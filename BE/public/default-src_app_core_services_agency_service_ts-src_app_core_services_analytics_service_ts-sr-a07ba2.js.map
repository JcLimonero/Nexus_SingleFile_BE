{"version":3,"file":"default-src_app_core_services_agency_service_ts-src_app_core_services_analytics_service_ts-sr-a07ba2.js","mappings":"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","sources":["./src/app/core/services/agency.service.ts","./src/app/core/services/analytics.service.ts","./src/app/core/services/default-agency.service.ts","./src/app/core/services/user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { ApiBaseService } from './api-base.service';\n\nexport interface Agency {\n  Id: number;\n  Name: string;\n  IdAgency?: string;\n  Enabled: number;\n  RegistrationDate?: string;\n  UpdateDate?: string;\n  IdLastUserUpdate?: number;\n  // Campo adicional siempre incluido\n  LastUserUpdateName?: string;\n}\n\nexport interface AgencyFilters {\n  name?: string;\n  enabled?: number;\n  date_from?: string;\n  date_to?: string;\n}\n\nexport interface AgencySearchParams {\n  enabled?: boolean;\n  search?: string;\n  limit?: number;\n  offset?: number;\n  sort_by?: string;\n  sort_order?: 'ASC' | 'DESC';\n}\n\nexport interface AgencyResponse {\n  success: boolean;\n  message: string;\n  data?: any;\n}\n\nexport interface AgencyListResponse extends AgencyResponse {\n  data: {\n    agencies: Agency[];\n    total: number;\n    limit?: number;\n    offset?: number;\n    count: number;\n    sort_by?: string;\n    sort_order?: string;\n  };\n}\n\nexport interface AgencyStatsResponse extends AgencyResponse {\n  data: {\n    total: number;\n    enabled: number;\n    disabled: number;\n  };\n}\n\nexport interface PaginatedAgencyResponse {\n  agencies: Agency[];\n  total: number;\n  per_page: number;\n  current_page: number;\n  total_pages: number;\n  has_next: boolean;\n  has_prev: boolean;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AgencyService {\n  private readonly API_URL = 'agency';\n\n  constructor(\n    private http: HttpClient,\n    private apiBaseService: ApiBaseService\n  ) {}\n\n  /**\n   * Obtener todas las agencias con filtros y paginación\n   */\n  getAgencies(params: AgencySearchParams = {}): Observable<AgencyListResponse> {\n    let httpParams = new HttpParams();\n\n    if (params.enabled !== undefined) {\n      httpParams = httpParams.set('enabled', params.enabled.toString());\n    }\n\n    if (params.search) {\n      httpParams = httpParams.set('search', params.search);\n    }\n\n    if (params.limit) {\n      httpParams = httpParams.set('limit', params.limit.toString());\n    }\n\n    if (params.offset) {\n      httpParams = httpParams.set('offset', params.offset.toString());\n    }\n\n    if (params.sort_by) {\n      httpParams = httpParams.set('sort_by', params.sort_by);\n    }\n\n    if (params.sort_order) {\n      httpParams = httpParams.set('sort_order', params.sort_order);\n    }\n\n    const url = this.apiBaseService.buildApiUrl(this.API_URL);\n    console.log('🏢 AgencyService - URL construida:', url);\n    console.log('🏢 AgencyService - Parámetros:', httpParams);\n    \n    return this.http.get<AgencyListResponse>(url, { params: httpParams });\n  }\n\n  /**\n   * Obtener agencias con paginación avanzada\n   */\n  getAgenciesPaginated(\n    page: number = 1,\n    perPage: number = 20,\n    filters: AgencyFilters = {},\n    sortBy: string = 'Name',\n    sortOrder: 'ASC' | 'DESC' = 'ASC'\n  ): Observable<PaginatedAgencyResponse> {\n    const offset = (page - 1) * perPage;\n    \n    let httpParams = new HttpParams()\n      .set('limit', perPage.toString())\n      .set('offset', offset.toString())\n      .set('sort_by', sortBy)\n      .set('sort_order', sortOrder);\n\n    // Aplicar filtros\n    if (filters.name) {\n      httpParams = httpParams.set('search', filters.name);\n    }\n\n    if (filters.enabled !== undefined) {\n      httpParams = httpParams.set('enabled', filters.enabled.toString());\n    }\n\n    return this.http.get<AgencyListResponse>(this.apiBaseService.buildApiUrl(this.API_URL), { params: httpParams })\n      .pipe(\n        map(response => {\n          if (response.success && response.data) {\n            const totalPages = Math.ceil(response.data.total / perPage);\n            return {\n              agencies: response.data.agencies,\n              total: response.data.total,\n              per_page: perPage,\n              current_page: page,\n              total_pages: totalPages,\n              has_next: page < totalPages,\n              has_prev: page > 1\n            };\n          }\n          throw new Error(response.message || 'Error al obtener agencias');\n        })\n      );\n  }\n\n  /**\n   * Obtener agencia por ID\n   */\n  getAgencyById(id: number): Observable<AgencyResponse> {\n    return this.http.get<AgencyResponse>(`${this.apiBaseService.buildApiUrl(this.API_URL)}/${id}`);\n  }\n\n  /**\n   * Crear nueva agencia\n   */\n  createAgency(agency: Partial<Agency>): Observable<AgencyResponse> {\n    return this.http.post<AgencyResponse>(this.apiBaseService.buildApiUrl(this.API_URL), agency);\n  }\n\n  /**\n   * Actualizar agencia existente\n   */\n  updateAgency(id: number, agency: Partial<Agency>): Observable<AgencyResponse> {\n    return this.http.put<AgencyResponse>(`${this.apiBaseService.buildApiUrl(this.API_URL)}/${id}`, agency);\n  }\n\n  /**\n   * Eliminar agencia (soft delete por defecto)\n   */\n  deleteAgency(id: number, force: boolean = false): Observable<AgencyResponse> {\n    const params = force ? new HttpParams().set('force', 'true') : new HttpParams();\n    return this.http.delete<AgencyResponse>(`${this.apiBaseService.buildApiUrl(this.API_URL)}/${id}`, { params });\n  }\n\n  /**\n   * Cambiar estado de habilitación de una agencia\n   */\n  toggleAgencyStatus(id: number): Observable<AgencyResponse> {\n    return this.http.patch<AgencyResponse>(`${this.apiBaseService.buildApiUrl(this.API_URL)}/${id}/toggle-status`, {});\n  }\n\n  /**\n   * Buscar agencias por nombre\n   */\n  searchAgencies(query: string): Observable<AgencyResponse> {\n    const params = new HttpParams().set('q', query);\n    return this.http.get<AgencyResponse>(`${this.apiBaseService.buildApiUrl(this.API_URL)}/search`, { params });\n  }\n\n\n\n  /**\n   * Obtener estadísticas de agencias\n   */\n  getAgencyStats(): Observable<AgencyStatsResponse> {\n    return this.http.get<AgencyStatsResponse>(`${this.apiBaseService.buildApiUrl(this.API_URL)}/stats`);\n  }\n\n  /**\n   * Obtener agencias habilitadas (para dropdowns, etc.)\n   */\n  getEnabledAgencies(): Observable<AgencyListResponse> {\n    return this.getAgencies({ enabled: true, sort_by: 'Name', sort_order: 'ASC' });\n  }\n\n  /**\n   * Validar datos de agencia antes de enviar\n   */\n  validateAgencyData(agency: Partial<Agency>): { valid: boolean; errors: string[] } {\n    const errors: string[] = [];\n\n    if (!agency.Name || agency.Name.trim().length < 3) {\n      errors.push('El nombre debe tener al menos 3 caracteres');\n    }\n\n    if (agency.Name && agency.Name.length > 600) {\n      errors.push('El nombre no puede exceder 600 caracteres');\n    }\n\n    if (agency.IdAgency && agency.IdAgency.length > 50) {\n      errors.push('El IdAgency no puede exceder 50 caracteres');\n    }\n\n    if (agency.Enabled !== undefined && ![0, 1].includes(agency.Enabled)) {\n      errors.push('El estado debe ser 0 o 1');\n    }\n\n    return {\n      valid: errors.length === 0,\n      errors\n    };\n  }\n\n  /**\n   * Preparar datos de agencia para envío\n   */\n  prepareAgencyData(agency: Partial<Agency>, isUpdate: boolean = false): Partial<Agency> {\n    const preparedData: Partial<Agency> = {};\n\n    if (agency.Name) {\n      preparedData.Name = agency.Name.trim();\n    }\n\n    if (agency.IdAgency !== undefined) {\n      preparedData.IdAgency = agency.IdAgency || undefined;\n    }\n\n    if (agency.IdAgency !== undefined) {\n      preparedData.IdAgency = agency.IdAgency || undefined;\n    }\n\n    if (agency.Enabled !== undefined) {\n      preparedData.Enabled = agency.Enabled;\n    }\n\n    return preparedData;\n  }\n\n  /**\n   * Mapear respuesta de agencia a interfaz local\n   */\n  mapAgencyResponse(response: any): Agency {\n    return {\n      Id: response.Id,\n      Name: response.Name,\n      IdAgency: response.IdAgency || undefined,\n      Enabled: response.Enabled,\n      RegistrationDate: response.RegistrationDate || undefined,\n      UpdateDate: response.UpdateDate || undefined,\n      IdLastUserUpdate: response.IdLastUserUpdate || undefined,\n      LastUserUpdateName: response.LastUserUpdateName || undefined\n    };\n  }\n\n  /**\n   * Mapear múltiples respuestas de agencias\n   */\n  mapAgenciesResponse(response: any[]): Agency[] {\n    return response.map(agency => this.mapAgencyResponse(agency));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { Observable, BehaviorSubject, combineLatest } from 'rxjs';\nimport { map, tap, catchError } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport { environment } from '../../../environments/environment';\n\nexport interface AnalyticsFilters {\n  startDate?: string;\n  endDate?: string;\n  userId?: number;\n  agencyId?: number;\n  processId?: number;\n  documentTypeId?: number;\n  dateRange?: {\n    startDate: Date | null;\n    endDate: Date | null;\n  };\n}\n\nexport interface UserActivityStats {\n  totalLogs: number;\n  uniqueUsers: number;\n  topActions: Array<{ action: string; count: number }>;\n  dailyActivity: Array<{ date: string; count: number }>;\n  userActivity: Array<{ userId: number; username: string; count: number }>;\n}\n\nexport interface DocumentStats {\n  totalDocuments: number;\n  documentsByType: Array<{ type: string; count: number }>;\n  documentsByStatus: Array<{ status: string; count: number }>;\n  documentsByAgency: Array<{ agency: string; count: number }>;\n  monthlyTrend: Array<{ month: string; count: number }>;\n}\n\nexport interface ProcessStats {\n  totalProcesses: number;\n  processesByStatus: Array<{ status: string; count: number }>;\n  processesByAgency: Array<{ agency: string; count: number }>;\n  averageProcessingTime: number;\n  monthlyTrend: Array<{ month: string; count: number }>;\n}\n\nexport interface AgencyStats {\n  totalAgencies: number;\n  activeAgencies: number;\n  agenciesByRegion: Array<{ region: string; count: number }>;\n  topPerformingAgencies: Array<{ agency: string; documents: number; processes: number }>;\n}\n\nexport interface SystemMetrics {\n  totalUsers: number;\n  activeUsers: number;\n  totalDocuments: number;\n  totalProcesses: number;\n  totalAgencies: number;\n  systemUptime: number;\n  averageResponseTime: number;\n}\n\nexport interface DistributionMetrics {\n  entregados: {\n    total: number;\n    porcentaje: number;\n  };\n  canceladas: {\n    total: number;\n    porcentaje: number;\n  };\n  proceso: {\n    total: number;\n    porcentaje: number;\n  };\n  total: number;\n  month: string;\n  year: string;\n  agency_id: number | null;\n}\n\nexport interface AgencyMetrics {\n  todayCases: number;\n  monthlyCases: number;\n  totalCases: number;\n  totalUsers: number;\n  monthlyAgencyCases: number;\n  monthlyName: string;\n}\n\nexport interface AdvisorDistributionData {\n  advisorName: string;\n  approved: number;\n  pending: number;\n  rejected: number;\n  total: number;\n}\n\nexport interface WeeklyData {\n  day: string;\n  dayName: string;\n  count: number;\n}\n\nexport interface AttentionPeriodData {\n  range: string;\n  label: string;\n  count: number;\n  color: string;\n}\n\nexport interface CurrentMonthAttentionData {\n  range: string;\n  label: string;\n  count: number;\n  color: string;\n}\n\nexport interface CurrentMonthLiberatedData {\n  total: number;\n  month: string;\n  year: number;\n}\n\nexport interface TotalLiberatedData {\n  total: number;\n}\n\nexport interface OrderByPeriod {\n  idFile: number;\n  ndCliente: number;\n  ndPedido: number;\n  cliente: string;\n  proceso: string;\n  operacion: string;\n  fase: string;\n  fechaAtencion: string;\n  fechaCierre: string;\n  diasAtencion: number;\n  estado: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AnalyticsService {\n  private readonly baseUrl = `${environment.apiBaseUrl}/api`;\n  \n  // Subjects para manejar estado reactivo\n  private filtersSubject = new BehaviorSubject<AnalyticsFilters>({});\n  public filters$ = this.filtersSubject.asObservable();\n\n  constructor(private http: HttpClient) {}\n\n  // Métodos para manejar filtros\n  setFilters(filters: AnalyticsFilters): void {\n    this.filtersSubject.next(filters);\n  }\n\n  getFilters(): AnalyticsFilters {\n    return this.filtersSubject.value;\n  }\n\n  clearFilters(): void {\n    this.filtersSubject.next({});\n  }\n\n  // Métodos para obtener estadísticas de actividad de usuarios\n  getUserActivityStats(filters?: AnalyticsFilters): Observable<UserActivityStats> {\n    const params = this.buildParams(filters);\n    return this.http.get<any>(`${this.baseUrl}/user-activity-logs/stats`, { params })\n      .pipe(\n        map(response => response.data || response),\n        tap(data => console.log('User Activity Stats:', data))\n      );\n  }\n\n  getUserActivityLogs(filters?: AnalyticsFilters, limit = 100, offset = 0): Observable<any> {\n    const params = this.buildParams(filters);\n    params.set('limit', limit.toString());\n    params.set('offset', offset.toString());\n    \n    return this.http.get<any>(`${this.baseUrl}/user-activity-logs`, { params })\n      .pipe(\n        map(response => response.data || response),\n        tap(data => console.log('User Activity Logs:', data))\n      );\n  }\n\n  // Métodos para obtener estadísticas de documentos\n  getDocumentStats(filters?: AnalyticsFilters): Observable<DocumentStats> {\n    const params = this.buildParams(filters);\n    return this.http.get<any>(`${this.baseUrl}/analytics/widget-document-statistics`, { params })\n      .pipe(\n        map(response => response.data || response),\n        tap(data => console.log('Document Stats:', data))\n      );\n  }\n\n  // Métodos para obtener estadísticas de procesos\n  getProcessStats(filters?: AnalyticsFilters): Observable<ProcessStats> {\n    const params = this.buildParams(filters);\n    return this.http.get<any>(`${this.baseUrl}/analytics/widget-process-statistics`, { params })\n      .pipe(\n        map(response => response.data || response),\n        tap(data => console.log('Process Stats:', data))\n      );\n  }\n\n  // Métodos para obtener estadísticas de agencias\n  getAgencyStats(filters?: AnalyticsFilters): Observable<AgencyStats> {\n    const params = this.buildParams(filters);\n    return this.http.get<any>(`${this.baseUrl}/analytics/widget-agency-statistics`, { params })\n      .pipe(\n        map(response => response.data || response),\n        tap(data => console.log('Agency Stats:', data))\n      );\n  }\n\n  // Métodos para obtener métricas específicas de agencia\n  getAgencyMetrics(filters?: AnalyticsFilters): Observable<AgencyMetrics> {\n    const params = this.buildParams(filters);\n    console.log('🔧 AnalyticsService: getAgencyMetrics called with filters:', filters);\n    console.log('🔧 AnalyticsService: Built params:', params.toString());\n    console.log('🔧 AnalyticsService: Full URL:', `${this.baseUrl}/analytics/widget-agency-specific-metrics?${params.toString()}`);\n    \n    return this.http.get<any>(`${this.baseUrl}/analytics/widget-agency-specific-metrics`, { params })\n      .pipe(\n        map(response => response.data || response),\n        tap(data => console.log('🔧 AnalyticsService: Received Agency Metrics:', data))\n      );\n  }\n\n  getDistributionMetrics(filters?: AnalyticsFilters): Observable<DistributionMetrics> {\n    const params = this.buildParams(filters);\n    return this.http.get<any>(`${this.baseUrl}/analytics/widget-file-distribution-metrics`, { params })\n      .pipe(\n        map(response => response.data || response),\n        tap(data => console.log('Distribution Metrics:', data))\n      );\n  }\n\n  getProcessDistribution(filters?: any): Observable<any[]> {\n    const params = this.buildParams(filters);\n    console.log('🔧 AnalyticsService: getProcessDistribution called with filters:', filters);\n    console.log('🔧 AnalyticsService: Built params:', params.toString());\n    console.log('🔧 AnalyticsService: Full URL:', `${this.baseUrl}/analytics/widget-process-distribution?${params.toString()}`);\n    \n    return this.http.get<any>(`${this.baseUrl}/analytics/widget-process-distribution`, { params })\n      .pipe(\n        map(response => response.data || response),\n        tap(data => console.log('🔧 AnalyticsService: Received Process Distribution:', data))\n      );\n  }\n\n  getStatusDistribution(filters?: any): Observable<any[]> {\n    const params = this.buildParams(filters);\n    console.log('🔧 AnalyticsService: getStatusDistribution called with filters:', filters);\n    console.log('🔧 AnalyticsService: Built params:', params.toString());\n    console.log('🔧 AnalyticsService: Full URL:', `${this.baseUrl}/analytics/widget-status-distribution?${params.toString()}`);\n    \n    return this.http.get<any>(`${this.baseUrl}/analytics/widget-status-distribution`, { params })\n      .pipe(\n        map(response => response.data || response),\n        tap(data => console.log('🔧 AnalyticsService: Received Status Distribution:', data))\n      );\n  }\n\n  getCurrentMonthStatusDistribution(filters?: any): Observable<any[]> {\n    const params = this.buildParams(filters);\n    console.log('🔧 AnalyticsService: getCurrentMonthStatusDistribution called with filters:', filters);\n    console.log('🔧 AnalyticsService: Built params:', params.toString());\n    console.log('🔧 AnalyticsService: Full URL:', `${this.baseUrl}/analytics/widget-current-month-status?${params.toString()}`);\n    \n    return this.http.get<any>(`${this.baseUrl}/analytics/widget-current-month-status`, { params })\n      .pipe(\n        map(response => response.data || response),\n        tap(data => console.log('🔧 AnalyticsService: Received Current Month Status Distribution:', data))\n      );\n  }\n\n  getPreviousMonthsData(filters?: any): Observable<any[]> {\n    const params = this.buildParams(filters);\n    console.log('🔧 AnalyticsService: getPreviousMonthsData called with filters:', filters);\n    console.log('🔧 AnalyticsService: Built params:', params.toString());\n    console.log('🔧 AnalyticsService: Full URL:', `${this.baseUrl}/analytics/widget-previous-months?${params.toString()}`);\n    \n    return this.http.get<any>(`${this.baseUrl}/analytics/widget-previous-months`, { params })\n      .pipe(\n        map(response => response.data || response),\n        tap(data => console.log('🔧 AnalyticsService: Received Previous Months Data:', data))\n      );\n  }\n\n  getHistoricalStatusDistribution(filters?: any): Observable<any[]> {\n    const params = this.buildParams(filters);\n    console.log('🔧 AnalyticsService: getHistoricalStatusDistribution called with filters:', filters);\n    console.log('🔧 AnalyticsService: Built params:', params.toString());\n    console.log('🔧 AnalyticsService: Full URL:', `${this.baseUrl}/analytics/widget-historical-status?${params.toString()}`);\n    \n    return this.http.get<any>(`${this.baseUrl}/analytics/widget-historical-status`, { params })\n      .pipe(\n        map(response => response.data || response),\n        tap(data => console.log('🔧 AnalyticsService: Received Historical Status Distribution:', data))\n      );\n  }\n\n  getTrendData(filters?: any): Observable<any> {\n    const params = this.buildParams(filters);\n    return this.http.get<any>(`${this.baseUrl}/analytics/widget-file-trend-chart`, { params })\n      .pipe(\n        map(response => response.data || response),\n        tap(data => console.log('Trend Data:', data))\n      );\n  }\n\n  // Métodos para obtener métricas del sistema\n  getSystemMetrics(): Observable<SystemMetrics> {\n    return combineLatest([\n      this.http.get<any>(`${this.baseUrl}/analytics/widget-system-overview-metrics`),\n      this.http.get<any>(`${this.baseUrl}/analytics/widget-document-statistics`),\n      this.http.get<any>(`${this.baseUrl}/analytics/widget-process-statistics`),\n      this.http.get<any>(`${this.baseUrl}/analytics/widget-agency-statistics`)\n    ]).pipe(\n      map(([userStats, docStats, processStats, agencyStats]) => {\n        return {\n          totalUsers: userStats.data?.totalUsers || 0,\n          activeUsers: userStats.data?.activeUsers || 0,\n          totalDocuments: docStats.data?.totalDocuments || 0,\n          totalProcesses: processStats.data?.totalProcesses || 0,\n          totalAgencies: agencyStats.data?.totalAgencies || 0,\n          systemUptime: 99.9, // Esto debería venir del backend\n          averageResponseTime: 150 // Esto debería venir del backend\n        };\n      }),\n      tap(data => console.log('System Metrics:', data))\n    );\n  }\n\n  // Método para obtener datos combinados del dashboard\n  getDashboardData(filters?: AnalyticsFilters): Observable<{\n    userActivity: UserActivityStats;\n    documents: DocumentStats;\n    processes: ProcessStats;\n    agencies: AgencyStats;\n    system: SystemMetrics;\n  }> {\n    return combineLatest([\n      this.getUserActivityStats(filters),\n      this.getDocumentStats(filters),\n      this.getProcessStats(filters),\n      this.getAgencyStats(filters),\n      this.getSystemMetrics()\n    ]).pipe(\n      map(([userActivity, documents, processes, agencies, system]) => ({\n        userActivity,\n        documents,\n        processes,\n        agencies,\n        system\n      }))\n    );\n  }\n\n  // Método para exportar datos\n  exportAnalytics(format: 'pdf' | 'excel', filters?: AnalyticsFilters): Observable<Blob> {\n    const params = this.buildParams(filters);\n    params.set('format', format);\n    \n    return this.http.get(`${this.baseUrl}/analytics/export`, { \n      params,\n      responseType: 'blob'\n    });\n  }\n\n  // Método auxiliar para construir parámetros de consulta\n  private buildParams(filters?: any): HttpParams {\n    let params = new HttpParams();\n    \n    if (filters) {\n      // Manejar filtros de fecha (prioridad: dateRange > startDate/endDate individuales)\n      if (filters.dateRange && filters.dateRange.startDate && filters.dateRange.endDate) {\n        params = params.set('start_date', filters.dateRange.startDate.toISOString().split('T')[0]);\n        params = params.set('end_date', filters.dateRange.endDate.toISOString().split('T')[0]);\n      } else {\n        if (filters.startDate) params = params.set('start_date', filters.startDate);\n        if (filters.endDate) params = params.set('end_date', filters.endDate);\n      }\n      \n      if (filters.userId) params = params.set('user_id', filters.userId.toString());\n      if (filters.agencyId) params = params.set('agency_id', filters.agencyId.toString());\n      if (filters.agency_id) params = params.set('agency_id', filters.agency_id.toString()); // Agregado para compatibilidad\n      if (filters.idSeller) params = params.set('idSeller', filters.idSeller.toString()); // Agregado para trend chart\n      if (filters.year) params = params.set('year', filters.year.toString()); // Agregado para trend chart\n      if (filters.processId) params = params.set('process_id', filters.processId.toString());\n      if (filters.documentTypeId) params = params.set('document_type_id', filters.documentTypeId.toString());\n    }\n    \n    return params;\n  }\n\n  // Método para obtener distribución de expedientes por asesor\n  getAdvisorDistribution(agencyId?: string | null, userId?: string | null): Observable<AdvisorDistributionData[]> {\n    let params = new HttpParams();\n    \n    if (agencyId) {\n      params = params.set('agency_id', agencyId);\n    }\n    \n    if (userId) {\n      params = params.set('user_id', userId);\n    }\n    \n    return this.http.get<any>(`${this.baseUrl}/analytics/advisor-distribution`, { params })\n      .pipe(\n        map(response => {\n          if (response && response.success && Array.isArray(response.data)) {\n            return response.data;\n          }\n          return [];\n        }),\n        catchError(error => {\n          console.error('Error en getAdvisorDistribution:', error);\n          return of([]);\n        })\n      );\n  }\n\n  getWeeklyData(agencyId?: string | null, userId?: string | null): Observable<WeeklyData[]> {\n    let params = new HttpParams();\n    \n    if (agencyId) {\n      params = params.set('agency_id', agencyId);\n    }\n    \n    if (userId) {\n      params = params.set('user_id', userId);\n    }\n    \n    return this.http.get<any>(`${this.baseUrl}/analytics/weekly-data`, { params })\n      .pipe(\n        map(response => {\n          if (response && response.success && Array.isArray(response.data)) {\n            return response.data;\n          }\n          return [];\n        }),\n        catchError(error => {\n          console.error('Error en getWeeklyData:', error);\n          return of([]);\n        })\n      );\n  }\n\n  getAttentionPeriodData(agencyId?: string | null, userId?: string | null): Observable<AttentionPeriodData[]> {\n    let params = new HttpParams();\n    \n    if (agencyId) {\n      params = params.set('agency_id', agencyId);\n    }\n    \n    if (userId) {\n      params = params.set('user_id', userId);\n    }\n    \n    return this.http.get<any>(`${this.baseUrl}/analytics/attention-period`, { params })\n      .pipe(\n        map(response => {\n          if (response && response.success && Array.isArray(response.data)) {\n            return response.data;\n          }\n          return [];\n        }),\n        catchError(error => {\n          console.error('Error en getAttentionPeriodData:', error);\n          return of([]);\n        })\n      );\n  }\n\n  getCurrentMonthAttentionData(agencyId?: string | null, userId?: string | null): Observable<CurrentMonthAttentionData[]> {\n    let params = new HttpParams();\n    \n    if (agencyId) {\n      params = params.set('agency_id', agencyId);\n    }\n    \n    if (userId) {\n      params = params.set('user_id', userId);\n    }\n    \n    return this.http.get<any>(`${this.baseUrl}/analytics/current-month-attention`, { params })\n      .pipe(\n        map(response => {\n          if (response && response.success && Array.isArray(response.data)) {\n            return response.data;\n          }\n          return [];\n        }),\n        catchError(error => {\n          console.error('Error en getCurrentMonthAttentionData:', error);\n          return of([]);\n        })\n      );\n  }\n\n  /**\n   * Obtener datos de expedientes liberados del mes actual\n   */\n  getCurrentMonthLiberated(agencyId?: string | null, userId?: string | null): Observable<CurrentMonthLiberatedData> {\n    let params = new HttpParams();\n\n    if (agencyId) {\n      params = params.set('agency_id', agencyId);\n    }\n\n    if (userId) {\n      params = params.set('user_id', userId);\n    }\n\n    return this.http.get<any>(`${this.baseUrl}/analytics/current-month-liberated`, { params })\n      .pipe(\n        map(response => {\n          if (response && response.success && response.data) {\n            return response.data;\n          }\n          return { total: 0, month: '', year: new Date().getFullYear() };\n        }),\n        catchError(error => {\n          console.error('Error en getCurrentMonthLiberated:', error);\n          return of({ total: 0, month: '', year: new Date().getFullYear() });\n        })\n      );\n  }\n\n  /**\n   * Obtener datos de expedientes liberados totales (toda la historia)\n   */\n  getTotalLiberated(agencyId?: string | null, userId?: string | null): Observable<TotalLiberatedData> {\n    let params = new HttpParams();\n\n    if (agencyId) {\n      params = params.set('agency_id', agencyId);\n    }\n\n    if (userId) {\n      params = params.set('user_id', userId);\n    }\n\n    return this.http.get<any>(`${this.baseUrl}/analytics/total-liberated`, { params })\n      .pipe(\n        map(response => {\n          if (response && response.success && response.data) {\n            return response.data;\n          }\n          return { total: 0 };\n        }),\n        catchError(error => {\n          console.error('Error en getTotalLiberated:', error);\n          return of({ total: 0 });\n        })\n      );\n  }\n\n  getOrdersByAttentionPeriod(range: string, agencyId?: string | null, userId?: string | null, currentMonth?: boolean, liberatedOnly?: boolean): Observable<OrderByPeriod[]> {\n    let params = new HttpParams();\n    \n    params = params.set('range', range);\n    \n    if (agencyId) {\n      params = params.set('agency_id', agencyId);\n    }\n    \n    if (userId) {\n      params = params.set('user_id', userId);\n    }\n    \n    if (currentMonth) {\n      params = params.set('current_month', 'true');\n    }\n    \n    if (liberatedOnly) {\n      params = params.set('liberated_only', 'true');\n    }\n    \n    return this.http.get<any>(`${this.baseUrl}/analytics/orders-by-attention-period`, { params })\n      .pipe(\n        map(response => {\n          if (response && response.success && Array.isArray(response.data)) {\n            return response.data;\n          }\n          return [];\n        }),\n        catchError(error => {\n          console.error('Error en getOrdersByAttentionPeriod:', error);\n          return of([]);\n        })\n      );\n  }\n\n  // Métodos para obtener datos en tiempo real (para futuras implementaciones con WebSockets)\n  getRealTimeMetrics(): Observable<any> {\n    // Esto se implementará cuando agreguemos WebSockets\n    return new Observable(observer => {\n      // Placeholder para implementación futura\n      observer.next({});\n    });\n  }\n\n  // Método para obtener métricas de rendimiento\n  getPerformanceMetrics(): Observable<any> {\n    return this.http.get<any>(`${this.baseUrl}/analytics/performance`)\n      .pipe(\n        map(response => response.data || response),\n        tap(data => console.log('Performance Metrics:', data))\n      );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\n\nexport interface Agencia {\n  Id: number;\n  Name: string;\n  Enabled: boolean | number | string; // Puede ser boolean, number o string\n  [key: string]: any; // Para campos adicionales\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DefaultAgencyService {\n  private apiUrl = environment.apiBaseUrl;\n  \n  // BehaviorSubject para mantener el estado de la agencia seleccionada\n  private selectedAgencySubject = new BehaviorSubject<number | null>(null);\n  public selectedAgency$ = this.selectedAgencySubject.asObservable();\n  \n  // BehaviorSubject para mantener el estado de las agencias disponibles\n  private agenciasSubject = new BehaviorSubject<Agencia[]>([]);\n  public agencias$ = this.agenciasSubject.asObservable();\n\n  constructor(private http: HttpClient) {}\n\n  /**\n   * Obtener agencias disponibles\n   */\n  obtenerAgencias(): Observable<Agencia[]> {\n    return this.http.get<any>(`${this.apiUrl}/api/agency`).pipe(\n      map(response => {\n        if (response && response.success && response.data && response.data.agencies) {\n          return response.data.agencies;\n        }\n        if (Array.isArray(response)) {\n          return response;\n        }\n        if (response && response.agencies && Array.isArray(response.agencies)) {\n          return response.agencies;\n        }\n        return [];\n      }),\n      tap(agencias => {\n        this.agenciasSubject.next(agencias);\n      })\n    );\n  }\n\n  /**\n   * Obtener agencia predeterminada del usuario\n   */\n  obtenerAgenciaUsuario(): Observable<number | null> {\n    return this.http.get<any>(`${this.apiUrl}/api/user/profile`).pipe(\n      map(response => {\n        if (response && response.success && response.data) {\n          return response.data.DefaultAgency;\n        }\n        return null;\n      })\n    );\n  }\n\n  /**\n   * Obtener la agencia predeterminada del usuario con reintentos\n   */\n  private obtenerAgenciaUsuarioConReintentos(maxReintentos: number = 3, delayMs: number = 1000): Observable<number | null> {\n    return new Observable(observer => {\n      let intentos = 0;\n      \n      const intentarObtener = () => {\n        intentos++;\n        console.log(`🔄 DefaultAgencyService - Intento ${intentos} de obtener agencia predeterminada del usuario`);\n        \n        this.obtenerAgenciaUsuario().subscribe({\n          next: (defaultAgencyId) => {\n            console.log(`✅ DefaultAgencyService - Agencia predeterminada obtenida exitosamente en intento ${intentos}:`, defaultAgencyId);\n            observer.next(defaultAgencyId);\n            observer.complete();\n          },\n          error: (error) => {\n            console.warn(`⚠️ DefaultAgencyService - Intento ${intentos} falló:`, error);\n            console.error(`🔍 DefaultAgencyService - Detalles del error:`, {\n              status: error.status,\n              statusText: error.statusText,\n              message: error.message,\n              error: error.error\n            });\n            \n            if (intentos < maxReintentos) {\n              console.log(`🔄 DefaultAgencyService - Reintentando en ${delayMs}ms... (${intentos}/${maxReintentos})`);\n              setTimeout(intentarObtener, delayMs);\n            } else {\n              console.error(`❌ DefaultAgencyService - Todos los ${maxReintentos} intentos fallaron`);\n              observer.error(error);\n            }\n          }\n        });\n      };\n      \n      intentarObtener();\n    });\n  }\n\n  /**\n   * Establecer agencia predeterminada del usuario\n   * @param autoSelect Si es true, selecciona automáticamente una agencia\n   * @returns Observable<number | null> que devuelve el ID de la agencia seleccionada\n   */\n  establecerAgenciaPredeterminada(autoSelect: boolean = true): Observable<number | null> {\n    return new Observable(observer => {\n      console.log('🔄 DefaultAgencyService - Iniciando establecimiento de agencia predeterminada...');\n      console.log('📊 DefaultAgencyService - Agencias disponibles en el servicio:', this.agenciasSubject.value);\n      \n      // Intentar obtener la agencia predeterminada con reintentos\n      this.obtenerAgenciaUsuarioConReintentos().subscribe({\n        next: (defaultAgencyId) => {\n          console.log('👤 DefaultAgencyService - Agencia predeterminada del usuario obtenida:', defaultAgencyId);\n          let agenciaSeleccionada: number | null = null;\n          \n          if (defaultAgencyId && this.agenciasSubject.value.length > 0) {\n            // Buscar la agencia predeterminada del usuario en la lista\n            const agenciaPredeterminada = this.agenciasSubject.value.find(ag => ag.Id === defaultAgencyId);\n            if (agenciaPredeterminada) {\n              console.log('✅ DefaultAgencyService - Agencia predeterminada del usuario encontrada:', agenciaPredeterminada);\n              agenciaSeleccionada = defaultAgencyId;\n            } else {\n              // Si no se encuentra la agencia predeterminada, seleccionar la primera\n              if (autoSelect) {\n                console.log('⚠️ DefaultAgencyService - Agencia predeterminada del usuario no encontrada, seleccionando primera agencia');\n                agenciaSeleccionada = this.agenciasSubject.value[0].Id;\n                console.log('🔍 DefaultAgencyService - Primera agencia de la lista:', this.agenciasSubject.value[0]);\n              }\n            }\n          } else {\n            // Si el usuario no tiene agencia predeterminada, seleccionar la primera de la lista\n            if (autoSelect && this.agenciasSubject.value.length > 0) {\n              console.log('ℹ️ DefaultAgencyService - Usuario sin agencia predeterminada, seleccionando primera agencia de la lista');\n              agenciaSeleccionada = this.agenciasSubject.value[0].Id;\n              console.log('🔍 DefaultAgencyService - Primera agencia de la lista:', this.agenciasSubject.value[0]);\n            }\n          }\n          \n          // Actualizar el BehaviorSubject\n          if (agenciaSeleccionada) {\n            console.log('🎯 DefaultAgencyService - Estableciendo agencia seleccionada:', agenciaSeleccionada);\n            this.selectedAgencySubject.next(agenciaSeleccionada);\n          }\n          \n          observer.next(agenciaSeleccionada);\n          observer.complete();\n        },\n        error: (error) => {\n          console.error('❌ DefaultAgencyService - Error obteniendo agencia predeterminada después de reintentos:', error);\n          console.warn('⚠️ DefaultAgencyService - No se pudo obtener agencia predeterminada, seleccionando primera agencia de la lista');\n          // En caso de error, seleccionar la primera agencia disponible si está habilitado\n          let agenciaSeleccionada: number | null = null;\n          if (autoSelect && this.agenciasSubject.value.length > 0) {\n            agenciaSeleccionada = this.agenciasSubject.value[0].Id;\n            console.log('ℹ️ DefaultAgencyService - Seleccionada primera agencia por defecto:', agenciaSeleccionada);\n            console.log('🔍 DefaultAgencyService - Primera agencia de la lista:', this.agenciasSubject.value[0]);\n            this.selectedAgencySubject.next(agenciaSeleccionada);\n          }\n          \n          observer.next(agenciaSeleccionada);\n          observer.complete();\n        }\n      });\n    });\n  }\n\n  /**\n   * Seleccionar una agencia específica\n   */\n  seleccionarAgencia(agenciaId: number): void {\n    this.selectedAgencySubject.next(agenciaId);\n  }\n\n  /**\n   * Obtener la agencia actualmente seleccionada\n   */\n  getAgenciaSeleccionada(): number | null {\n    return this.selectedAgencySubject.value;\n  }\n\n  /**\n   * Obtener las agencias disponibles\n   */\n  getAgencias(): Agencia[] {\n    return this.agenciasSubject.value;\n  }\n\n  /**\n   * Limpiar la selección de agencia\n   */\n  limpiarSeleccion(): void {\n    this.selectedAgencySubject.next(null);\n  }\n\n  /**\n   * Verificar si una agencia está habilitada\n   */\n  esAgenciaHabilitada(agencia: Agencia): boolean {\n    return agencia && this.esHabilitado(agencia.Enabled);\n  }\n\n  /**\n   * Método de utilidad para validar estado habilitado de cualquier campo\n   */\n  private esHabilitado(valor: any): boolean {\n    if (valor === null || valor === undefined) {\n      return false;\n    }\n    \n    // Convertir a string para comparación segura\n    const valorStr = String(valor).toLowerCase();\n    return valorStr === 'true' || valorStr === '1' || valorStr === 'enabled';\n  }\n\n  /**\n   * Obtener agencias habilitadas\n   */\n  getAgenciasHabilitadas(): Agencia[] {\n    return this.agenciasSubject.value.filter(ag => this.esAgenciaHabilitada(ag));\n  }\n\n  /**\n   * Obtener agencias por estado (habilitadas o deshabilitadas)\n   */\n  getAgenciasPorEstado(habilitadas: boolean = true): Agencia[] {\n    return this.agenciasSubject.value.filter(ag => this.esAgenciaHabilitada(ag) === habilitadas);\n  }\n\n  /**\n   * Verificar si hay agencias disponibles\n   */\n  tieneAgencias(): boolean {\n    return this.agenciasSubject.value.length > 0;\n  }\n\n  /**\n   * Verificar si hay agencias habilitadas\n   */\n  tieneAgenciasHabilitadas(): boolean {\n    return this.getAgenciasHabilitadas().length > 0;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { User, UserCreateRequest, UserUpdateRequest, UserResponse, UserRole, UserRoleResponse, Agency, AgencyResponse } from '../interfaces/user.interface';\nimport { ApiBaseService } from './api-base.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n  private readonly API_URL = 'user';\n\n  constructor(\n    private http: HttpClient,\n    private apiBaseService: ApiBaseService\n  ) { }\n\n  getUsers(limit?: number): Observable<UserResponse> {\n    const params = limit ? `?limit=${limit}` : '';\n    return this.http.get<UserResponse>(`${this.apiBaseService.buildApiUrl(this.API_URL)}${params}`);\n  }\n\n  getAllUsers(): Observable<UserResponse> {\n    return this.http.get<UserResponse>(this.apiBaseService.buildApiUrl(this.API_URL));\n  }\n\n  getUsersByStatus(enabled: string): Observable<UserResponse> {\n    return this.http.get<UserResponse>(`${this.apiBaseService.buildApiUrl(this.API_URL)}?enabled=${enabled}`);\n  }\n\n  getUserById(id: string): Observable<any> {\n    return this.http.get(`${this.apiBaseService.buildApiUrl(this.API_URL)}/${id}`);\n  }\n\n  createUser(user: UserCreateRequest): Observable<any> {\n    return this.http.post(this.apiBaseService.buildApiUrl(this.API_URL), user);\n  }\n\n  updateUser(id: string, user: UserUpdateRequest): Observable<any> {\n    return this.http.put(`${this.apiBaseService.buildApiUrl(this.API_URL)}/${id}`, user);\n  }\n\n  deleteUser(id: string): Observable<any> {\n    return this.http.delete(`${this.apiBaseService.buildApiUrl(this.API_URL)}/${id}`);\n  }\n\n  toggleStatus(id: string): Observable<any> {\n    return this.http.patch(`${this.apiBaseService.buildApiUrl(this.API_URL)}/${id}/toggle-status`, {});\n  }\n\n  changePassword(id: string, newPassword: string): Observable<any> {\n    return this.http.post(`${this.apiBaseService.buildApiUrl(this.API_URL)}/${id}/change-password`, { new_password: newPassword });\n  }\n\n  resetPassword(id: string): Observable<any> {\n    return this.http.post(`${this.apiBaseService.buildApiUrl(this.API_URL)}/${id}/reset-password`, {});\n  }\n\n  searchUsers(query: string): Observable<any> {\n    return this.http.get(`${this.apiBaseService.buildApiUrl(this.API_URL)}/search?q=${query}`);\n  }\n\n  getStats(): Observable<any> {\n    return this.http.get(`${this.apiBaseService.buildApiUrl(this.API_URL)}/stats`);\n  }\n\n  checkUsernameAvailability(username: string): Observable<any> {\n    return this.http.get(`${this.apiBaseService.buildApiUrl(this.API_URL)}/check-username?username=${username}`);\n  }\n\n  checkEmailAvailability(email: string): Observable<any> {\n    return this.http.get(`${this.apiBaseService.buildApiUrl(this.API_URL)}/check-email?email=${email}`);\n  }\n\n  // Métodos para obtener datos de referencia\n  getUserRoles(): Observable<UserRoleResponse> {\n    return this.http.get<UserRoleResponse>(this.apiBaseService.buildApiUrl('user-role'));\n  }\n\n  getAgencies(): Observable<AgencyResponse> {\n    return this.http.get<AgencyResponse>(this.apiBaseService.buildApiUrl('agency'));\n  }\n\n  // Obtener agencias asignadas a un usuario específico\n  getUserAgencies(userId: string): Observable<any> {\n    return this.http.get(`${this.apiBaseService.buildApiUrl('user')}/${userId}/agencies`);\n  }\n\n  // Obtener usuarios por agencia\n  getUsersByAgency(agencyId?: number): Observable<UserResponse> {\n    const params = agencyId ? `?default_agency=${agencyId}` : '';\n    return this.http.get<UserResponse>(`${this.apiBaseService.buildApiUrl(this.API_URL)}${params}`);\n  }\n}\n"],"names":["HttpParams","map","AgencyService","constructor","http","apiBaseService","API_URL","getAgencies","params","httpParams","enabled","undefined","set","toString","search","limit","offset","sort_by","sort_order","url","buildApiUrl","console","log","get","getAgenciesPaginated","page","perPage","filters","sortBy","sortOrder","name","pipe","response","success","data","totalPages","Math","ceil","total","agencies","per_page","current_page","total_pages","has_next","has_prev","Error","message","getAgencyById","id","createAgency","agency","post","updateAgency","put","deleteAgency","force","delete","toggleAgencyStatus","patch","searchAgencies","query","getAgencyStats","getEnabledAgencies","validateAgencyData","errors","Name","trim","length","push","IdAgency","Enabled","includes","valid","prepareAgencyData","isUpdate","preparedData","mapAgencyResponse","Id","RegistrationDate","UpdateDate","IdLastUserUpdate","LastUserUpdateName","mapAgenciesResponse","_","i0","ɵɵinject","i1","HttpClient","i2","ApiBaseService","_2","factory","ɵfac","providedIn","Observable","BehaviorSubject","combineLatest","tap","catchError","of","environment","AnalyticsService","baseUrl","apiBaseUrl","filtersSubject","filters$","asObservable","setFilters","next","getFilters","value","clearFilters","getUserActivityStats","buildParams","getUserActivityLogs","getDocumentStats","getProcessStats","getAgencyMetrics","getDistributionMetrics","getProcessDistribution","getStatusDistribution","getCurrentMonthStatusDistribution","getPreviousMonthsData","getHistoricalStatusDistribution","getTrendData","getSystemMetrics","userStats","docStats","processStats","agencyStats","totalUsers","activeUsers","totalDocuments","totalProcesses","totalAgencies","systemUptime","averageResponseTime","getDashboardData","userActivity","documents","processes","system","exportAnalytics","format","responseType","dateRange","startDate","endDate","toISOString","split","userId","agencyId","agency_id","idSeller","year","processId","documentTypeId","getAdvisorDistribution","Array","isArray","error","getWeeklyData","getAttentionPeriodData","getCurrentMonthAttentionData","getCurrentMonthLiberated","month","Date","getFullYear","getTotalLiberated","getOrdersByAttentionPeriod","range","currentMonth","liberatedOnly","getRealTimeMetrics","observer","getPerformanceMetrics","DefaultAgencyService","apiUrl","selectedAgencySubject","selectedAgency$","agenciasSubject","agencias$","obtenerAgencias","agencias","obtenerAgenciaUsuario","DefaultAgency","obtenerAgenciaUsuarioConReintentos","maxReintentos","delayMs","intentos","intentarObtener","subscribe","defaultAgencyId","complete","warn","status","statusText","setTimeout","establecerAgenciaPredeterminada","autoSelect","agenciaSeleccionada","agenciaPredeterminada","find","ag","seleccionarAgencia","agenciaId","getAgenciaSeleccionada","getAgencias","limpiarSeleccion","esAgenciaHabilitada","agencia","esHabilitado","valor","valorStr","String","toLowerCase","getAgenciasHabilitadas","filter","getAgenciasPorEstado","habilitadas","tieneAgencias","tieneAgenciasHabilitadas","UserService","getUsers","getAllUsers","getUsersByStatus","getUserById","createUser","user","updateUser","deleteUser","toggleStatus","changePassword","newPassword","new_password","resetPassword","searchUsers","getStats","checkUsernameAvailability","username","checkEmailAvailability","email","getUserRoles","getUserAgencies","getUsersByAgency"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}
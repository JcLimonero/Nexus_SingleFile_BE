{"version":3,"file":"src_app_pages_configuracion_tipos-cliente_tipos-cliente_component_ts.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAC+C;AACM;AACe;AACsB;AACb;AAClB;AACJ;AACW;AACT;AACE;AACmB;AACjB;;;;;;;;;;;;;;;;;ICUvDa,4DAAA,gBAAsE;IACpEA,oDAAA,+BACF;IAAAA,0DAAA,EAAY;;;;;IACZA,4DAAA,gBAAuE;IACrEA,oDAAA,mDACF;IAAAA,0DAAA,EAAY;;;;;IACZA,4DAAA,gBAAuE;IACrEA,oDAAA,kDACF;IAAAA,0DAAA,EAAY;;;;;IAcdA,4DAAA,cAAoE;IACfA,oDAAA,mCAAuB;IAAAA,0DAAA,EAAK;IAC/EA,4DAAA,cAA4C;IAEZA,oDAAA,UAAG;IAAAA,0DAAA,EAAO;IACtCA,4DAAA,eAA6B;IAAAA,oDAAA,GAA0B;IAAAA,0DAAA,EAAO;IAEhEA,4DAAA,UAAK;IACyBA,oDAAA,4BAAe;IAAAA,0DAAA,EAAO;IAClDA,4DAAA,gBAAmB;IAAAA,oDAAA,IAAmD;IAAAA,0DAAA,EAAO;IAE/EA,4DAAA,WAAK;IACyBA,oDAAA,uBAAe;IAAAA,0DAAA,EAAO;IAClDA,4DAAA,gBAAmB;IAAAA,oDAAA,IAAiD;IAAAA,0DAAA,EAAO;IAE7EA,4DAAA,WAAK;IACyBA,oDAAA,uCAAqB;IAAAA,0DAAA,EAAO;IACxDA,4DAAA,gBAAmB;IAAAA,oDAAA,IAA2C;IAAAA,0DAAA,EAAO;;;;IAZxCA,uDAAA,GAA0B;IAA1BA,+DAAA,CAAAM,MAAA,CAAAC,IAAA,CAAAC,YAAA,CAAAC,EAAA,CAA0B;IAIpCT,uDAAA,GAAmD;IAAnDA,+DAAA,CAAAM,MAAA,CAAAC,IAAA,CAAAC,YAAA,CAAAE,kBAAA,UAAmD;IAInDV,uDAAA,GAAiD;IAAjDA,+DAAA,CAAAM,MAAA,CAAAC,IAAA,CAAAC,YAAA,CAAAG,gBAAA,UAAiD;IAIjDX,uDAAA,GAA2C;IAA3CA,+DAAA,CAAAM,MAAA,CAAAC,IAAA,CAAAC,YAAA,CAAAI,UAAA,UAA2C;;;;;IAmBhEZ,uDAAA,sBAAsE;;;;;IACtEA,4DAAA,eAA2B;IAAAA,oDAAA,GAA2C;IAAAA,0DAAA,EAAW;;;;IAAtDA,uDAAA,EAA2C;IAA3CA,+DAAA,CAAAc,MAAA,CAAAP,IAAA,CAAAQ,IAAA,6BAA2C;;;AD9CxE,MAAOC,+BAA+B;EAI1CC,YACUC,EAAe,EACfC,mBAAwC,EACxCC,SAAwD,EAChCb,IAAgC,EACxDc,QAAqB;IAJrB,KAAAH,EAAE,GAAFA,EAAE;IACF,KAAAC,mBAAmB,GAAnBA,mBAAmB;IACnB,KAAAC,SAAS,GAATA,SAAS;IACe,KAAAb,IAAI,GAAJA,IAAI;IAC5B,KAAAc,QAAQ,GAARA,QAAQ;IAPlB,KAAAC,OAAO,GAAG,KAAK;EAQX;EAEJC,QAAQA,CAAA;IACN,IAAI,CAACC,cAAc,EAAE;IACrB,IAAI,CAACC,YAAY,EAAE;EACrB;EAEQD,cAAcA,CAAA;IACpB,IAAI,CAACE,gBAAgB,GAAG,IAAI,CAACR,EAAE,CAACS,KAAK,CAAC;MACpCC,IAAI,EAAE,CAAC,EAAE,EAAE,CAACvC,sDAAU,CAACwC,QAAQ,EAAExC,sDAAU,CAACyC,SAAS,CAAC,CAAC,CAAC,EAAEzC,sDAAU,CAAC0C,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;MACrFC,OAAO,EAAE,CAAC,GAAG,EAAE3C,sDAAU,CAACwC,QAAQ;KACnC,CAAC;EACJ;EAEQJ,YAAYA,CAAA;IAClB,IAAI,IAAI,CAAClB,IAAI,CAACC,YAAY,IAAI,IAAI,CAACD,IAAI,CAACQ,IAAI,KAAK,MAAM,EAAE;MACvD,IAAI,CAACW,gBAAgB,CAACO,UAAU,CAAC;QAC/BL,IAAI,EAAE,IAAI,CAACrB,IAAI,CAACC,YAAY,CAACoB,IAAI;QACjCI,OAAO,EAAE,IAAI,CAACzB,IAAI,CAACC,YAAY,CAACwB;OACjC,CAAC;;EAEN;EAEAE,QAAQA,CAAA;IACN,IAAI,IAAI,CAACR,gBAAgB,CAACS,KAAK,EAAE;MAC/B,IAAI,CAACb,OAAO,GAAG,IAAI;MAEnB,IAAI,IAAI,CAACf,IAAI,CAACQ,IAAI,KAAK,QAAQ,EAAE;QAC/B,IAAI,CAACqB,kBAAkB,EAAE;OAC1B,MAAM;QACL,IAAI,CAACC,kBAAkB,EAAE;;;EAG/B;EAEQD,kBAAkBA,CAAA;IACxB,MAAME,gBAAgB,GAA8B;MAClDV,IAAI,EAAE,IAAI,CAACF,gBAAgB,CAACa,KAAK,CAACX,IAAI;MACtCI,OAAO,EAAE,IAAI,CAACN,gBAAgB,CAACa,KAAK,CAACP;KACtC;IAED,IAAI,CAACb,mBAAmB,CAACiB,kBAAkB,CAACE,gBAAgB,CAAC,CAACE,SAAS,CAAC;MACtEC,IAAI,EAAGC,QAAQ,IAAI;QACjB,IAAIA,QAAQ,CAACC,OAAO,EAAE;UACpB,IAAI,CAACtB,QAAQ,CAACuB,IAAI,CAAC,qCAAqC,EAAE,OAAO,EAAE;YACjEC,QAAQ,EAAE;WACX,CAAC;UACF,IAAI,CAACzB,SAAS,CAAC0B,KAAK,CAAC,IAAI,CAAC;SAC3B,MAAM;UACL,IAAI,CAACzB,QAAQ,CAACuB,IAAI,CAACF,QAAQ,CAACK,OAAO,IAAI,gCAAgC,EAAE,OAAO,EAAE;YAChFF,QAAQ,EAAE;WACX,CAAC;;QAEJ,IAAI,CAACvB,OAAO,GAAG,KAAK;MACtB,CAAC;MACD0B,KAAK,EAAGA,KAAK,IAAI;QACf,IAAI,CAAC3B,QAAQ,CAACuB,IAAI,CAAC,gCAAgC,EAAE,OAAO,EAAE;UAC5DC,QAAQ,EAAE;SACX,CAAC;QACF,IAAI,CAACvB,OAAO,GAAG,KAAK;MACtB;KACD,CAAC;EACJ;EAEQe,kBAAkBA,CAAA;IACxB,MAAMC,gBAAgB,GAA8B;MAClD7B,EAAE,EAAE,IAAI,CAACF,IAAI,CAACC,YAAY,CAACC,EAAG;MAC9BmB,IAAI,EAAE,IAAI,CAACF,gBAAgB,CAACa,KAAK,CAACX,IAAI;MACtCI,OAAO,EAAE,IAAI,CAACN,gBAAgB,CAACa,KAAK,CAACP;KACtC;IAED,IAAI,CAACb,mBAAmB,CAACkB,kBAAkB,CAAC,IAAI,CAAC9B,IAAI,CAACC,YAAY,CAACC,EAAG,EAAE6B,gBAAgB,CAAC,CAACE,SAAS,CAAC;MAClGC,IAAI,EAAGC,QAAQ,IAAI;QACjB,IAAIA,QAAQ,CAACC,OAAO,EAAE;UACpB,IAAI,CAACtB,QAAQ,CAACuB,IAAI,CAAC,0CAA0C,EAAE,OAAO,EAAE;YACtEC,QAAQ,EAAE;WACX,CAAC;UACF,IAAI,CAACzB,SAAS,CAAC0B,KAAK,CAAC,IAAI,CAAC;SAC3B,MAAM;UACL,IAAI,CAACzB,QAAQ,CAACuB,IAAI,CAACF,QAAQ,CAACK,OAAO,IAAI,qCAAqC,EAAE,OAAO,EAAE;YACrFF,QAAQ,EAAE;WACX,CAAC;;QAEJ,IAAI,CAACvB,OAAO,GAAG,KAAK;MACtB,CAAC;MACD0B,KAAK,EAAGA,KAAK,IAAI;QACf,IAAI,CAAC3B,QAAQ,CAACuB,IAAI,CAAC,qCAAqC,EAAE,OAAO,EAAE;UACjEC,QAAQ,EAAE;SACX,CAAC;QACF,IAAI,CAACvB,OAAO,GAAG,KAAK;MACtB;KACD,CAAC;EACJ;EAEA2B,QAAQA,CAAA;IACN,IAAI,CAAC7B,SAAS,CAAC0B,KAAK,EAAE;EACxB;EAEA,IAAII,WAAWA,CAAA;IACb,OAAO,IAAI,CAAC3C,IAAI,CAACQ,IAAI,KAAK,QAAQ,GAAG,uBAAuB,GAAG,wBAAwB;EACzF;EAEA,IAAIoC,gBAAgBA,CAAA;IAClB,OAAO,IAAI,CAAC5C,IAAI,CAACQ,IAAI,KAAK,QAAQ,GAAG,OAAO,GAAG,YAAY;EAC7D;EAAC,QAAAqC,CAAA;qBAlHUpC,+BAA+B,EAAAhB,+DAAA,CAAAsD,uDAAA,GAAAtD,+DAAA,CAAAwD,qFAAA,GAAAxD,+DAAA,CAAA0D,kEAAA,GAAA1D,+DAAA,CAQhCV,qEAAe,GAAAU,+DAAA,CAAA4D,oEAAA;EAAA;EAAA,QAAAE,EAAA;UARd9C,+BAA+B;IAAA+C,SAAA;IAAAC,UAAA;IAAAC,QAAA,GAAAjE,iEAAA;IAAAmE,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,yCAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCnC5CxE,4DAAA,aAAiB;QAIXA,oDAAA,GACF;QAAAA,0DAAA,EAAK;QACLA,4DAAA,gBAAiE;QAAzCA,wDAAA,mBAAA2E,iEAAA;UAAA,OAASF,GAAA,CAAAxB,QAAA,EAAU;QAAA,EAAC;QAC1CjD,4DAAA,eAAU;QAAAA,oDAAA,YAAK;QAAAA,0DAAA,EAAW;QAK9BA,4DAAA,cAAmF;QAA9CA,wDAAA,sBAAA4E,kEAAA;UAAA,OAAYH,GAAA,CAAAvC,QAAA,EAAU;QAAA,EAAC;QAE1DlC,4DAAA,wBAAoD;QACvCA,oDAAA,kCAA0B;QAAAA,0DAAA,EAAY;QACjDA,uDAAA,gBAIkB;QAClBA,4DAAA,gBAAU;QAAAA,oDAAA,wEAA2D;QAAAA,0DAAA,EAAW;QAChFA,wDAAA,KAAA8E,qDAAA,uBAEY,KAAAC,qDAAA,4BAAAC,qDAAA;QAOdhF,0DAAA,EAAiB;QAGjBA,4DAAA,yBAAoD;QACvCA,oDAAA,cAAM;QAAAA,0DAAA,EAAY;QAC7BA,4DAAA,qBAAsC;QACdA,oDAAA,cAAM;QAAAA,0DAAA,EAAa;QACzCA,4DAAA,sBAAsB;QAAAA,oDAAA,gBAAQ;QAAAA,0DAAA,EAAa;QAE7CA,4DAAA,gBAAU;QAAAA,oDAAA,yCAAiC;QAAAA,0DAAA,EAAW;QAIxDA,wDAAA,KAAAiF,+CAAA,mBAoBM;QAGNjF,4DAAA,eAAsD;QAIlDA,wDAAA,mBAAAkF,kEAAA;UAAA,OAAST,GAAA,CAAAxB,QAAA,EAAU;QAAA,EAAC;QAEpBjD,oDAAA,kBACF;QAAAA,0DAAA,EAAS;QACTA,4DAAA,kBAImD;QACjDA,wDAAA,KAAAmF,uDAAA,0BAAsE,KAAAC,oDAAA;QAEtEpF,oDAAA,IACF;QAAAA,0DAAA,EAAS;;;;;;QA/ETA,uDAAA,GACF;QADEA,gEAAA,MAAAyE,GAAA,CAAAvB,WAAA,MACF;QAOIlD,uDAAA,GAA8B;QAA9BA,wDAAA,cAAAyE,GAAA,CAAA/C,gBAAA,CAA8B;QAUpB1B,uDAAA,GAAwD;QAAxDA,wDAAA,UAAAuF,OAAA,GAAAd,GAAA,CAAA/C,gBAAA,CAAA8D,GAAA,2BAAAD,OAAA,CAAAE,QAAA,aAAwD;QAGxDzF,uDAAA,EAAyD;QAAzDA,wDAAA,UAAA0F,OAAA,GAAAjB,GAAA,CAAA/C,gBAAA,CAAA8D,GAAA,2BAAAE,OAAA,CAAAD,QAAA,cAAyD;QAGzDzF,uDAAA,EAAyD;QAAzDA,wDAAA,UAAA2F,OAAA,GAAAlB,GAAA,CAAA/C,gBAAA,CAAA8D,GAAA,2BAAAG,OAAA,CAAAF,QAAA,cAAyD;QAgBjEzF,uDAAA,IAA0B;QAA1BA,wDAAA,SAAAyE,GAAA,CAAAlE,IAAA,CAAAQ,IAAA,YAA0B;QA4B5Bf,uDAAA,GAAoB;QAApBA,wDAAA,aAAAyE,GAAA,CAAAnD,OAAA,CAAoB;QAOpBtB,uDAAA,GAAgD;QAAhDA,wDAAA,aAAAyE,GAAA,CAAA/C,gBAAA,CAAAkE,OAAA,IAAAnB,GAAA,CAAAnD,OAAA,CAAgD;QAClCtB,uDAAA,EAAa;QAAbA,wDAAA,SAAAyE,GAAA,CAAAnD,OAAA,CAAa;QAChBtB,uDAAA,EAAc;QAAdA,wDAAA,UAAAyE,GAAA,CAAAnD,OAAA,CAAc;QACzBtB,uDAAA,EACF;QADEA,gEAAA,MAAAyE,GAAA,CAAAtB,gBAAA,MACF;;;mBD7DFhE,yDAAY,EAAA0G,iDAAA,EACZzG,+DAAmB,EAAAkE,4DAAA,EAAAA,gEAAA,EAAAA,2DAAA,EAAAA,gEAAA,EAAAA,8DAAA,EAAAA,8DAAA,EAAAA,2DAAA,EACnB/D,qEAAe,EACfC,0EAAiB,EACjBC,qEAAe,EAAA6G,+DAAA,EAAAA,mEAAA,EACf5G,iEAAa,EAAA+G,2DAAA,EACb9G,4EAAkB,EAAAgH,sEAAA,EAAAA,kEAAA,EAAAA,iEAAA,EAAAA,kEAAA,EAClB/G,mEAAc,EAAAoH,6DAAA,EACdnH,sEAAe,EAAAqH,gEAAA,EAAAE,8DAAA,EACftH,yFAAwB,EAAAwH,mFAAA,EACxBvH,wEAAgB,EAAAyH,kEAAA;IAAAE,MAAA;EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AE/B2B;AACF;AACgC;AACE;AACf;AACM;AACO;AAClB;AACJ;AACW;AACT;AACE;AACmB;AACjB;AAGqD;;;;;;;;;;;;;;;;;;;;IC6DhH1H,4DAAA,cAAmE;IACjEA,uDAAA,sBAAyC;IAC3CA,0DAAA,EAAM;;;;;IAOAA,4DAAA,aAAiI;IAC/HA,oDAAA,WACF;IAAAA,0DAAA,EAAK;;;;;IACLA,4DAAA,aAAwF;IACtFA,oDAAA,GACF;IAAAA,0DAAA,EAAK;;;;IADHA,uDAAA,EACF;IADEA,gEAAA,MAAAkI,eAAA,CAAAzH,EAAA,MACF;;;;;IAKAT,4DAAA,aAA+H;IAC7HA,oDAAA,eACF;IAAAA,0DAAA,EAAK;;;;;IACLA,4DAAA,aAAgE;IAC9DA,oDAAA,GACF;IAAAA,0DAAA,EAAK;;;;IADHA,uDAAA,EACF;IADEA,gEAAA,MAAAmI,eAAA,CAAAvG,IAAA,MACF;;;;;IAKA5B,4DAAA,aAAiI;IAC/HA,oDAAA,eACF;IAAAA,0DAAA,EAAK;;;;;IACLA,4DAAA,aAA+D;IAG3DA,oDAAA,GACF;IAAAA,0DAAA,EAAO;;;;IAFDA,uDAAA,EAAmG;IAAnGA,wDAAA,YAAAoI,eAAA,CAAApG,OAAA,qEAAmG;IACvGhC,uDAAA,EACF;IADEA,gEAAA,MAAAoI,eAAA,CAAApG,OAAA,sCACF;;;;;IAMFhC,4DAAA,aAAiH;IAC/GA,oDAAA,iBACF;IAAAA,0DAAA,EAAK;;;;;;IACLA,4DAAA,aAAoE;IAG9DA,wDAAA,mBAAAqI,oEAAA;MAAA,MAAAC,WAAA,GAAAtI,2DAAA,CAAAwI,IAAA;MAAA,MAAAC,eAAA,GAAAH,WAAA,CAAAI,SAAA;MAAA,MAAAC,OAAA,GAAA3I,2DAAA;MAAA,OAASA,yDAAA,CAAA2I,OAAA,CAAAG,cAAA,CAAAL,eAAA,CAA2B;IAAA,EAAC;IAKrCzI,4DAAA,mBAA2B;IAAAA,oDAAA,WAAI;IAAAA,0DAAA,EAAW;IAE5CA,4DAAA,iBAKkC;IAJhCA,wDAAA,mBAAA+I,oEAAA;MAAA,MAAAT,WAAA,GAAAtI,2DAAA,CAAAwI,IAAA;MAAA,MAAAC,eAAA,GAAAH,WAAA,CAAAI,SAAA;MAAA,MAAAM,OAAA,GAAAhJ,2DAAA;MAAA,OAASA,yDAAA,CAAAgJ,OAAA,CAAAC,kBAAA,CAAAR,eAAA,CAA+B;IAAA,EAAC;IAKzCzI,4DAAA,mBAA2B;IAAAA,oDAAA,aAAM;IAAAA,0DAAA,EAAW;;;;;IAMpDA,uDAAA,aAA4D;;;;;IAC5DA,uDAAA,aAAwF;;;;;IAI1FA,4DAAA,cAA2E;IAC3BA,oDAAA,YAAK;IAAAA,0DAAA,EAAW;IAC9DA,4DAAA,YAAyB;IAAAA,oDAAA,yCAAkC;IAAAA,0DAAA,EAAI;;;;;;IAIjEA,uDAAA,wBAOgB;;;;IALdA,wDAAA,oBAAAA,6DAAA,IAAAmJ,GAAA,EAAqC,2BAAAC,OAAA,CAAAC,UAAA,CAAAC,YAAA,CAAAC,MAAA;;;;;IA3EzCvJ,4DAAA,cAAmF;IAG/EA,qEAAA,OAAgC;IAC9BA,wDAAA,IAAAyJ,0CAAA,iBAEK,IAAAC,0CAAA;IAIP1J,mEAAA,EAAe;IAGfA,qEAAA,OAAkC;IAChCA,wDAAA,IAAA4J,0CAAA,iBAEK,IAAAC,0CAAA;IAIP7J,mEAAA,EAAe;IAGfA,qEAAA,OAAqC;IACnCA,wDAAA,IAAA8J,0CAAA,iBAEK,KAAAC,2CAAA;IAOP/J,mEAAA,EAAe;IAGfA,qEAAA,QAAsC;IACpCA,wDAAA,KAAAgK,2CAAA,iBAEK,KAAAC,2CAAA;IAqBPjK,mEAAA,EAAe;IAEfA,wDAAA,KAAAkK,2CAAA,iBAA4D,KAAAC,2CAAA;IAE9DnK,0DAAA,EAAQ;IAGRA,wDAAA,KAAAoK,4CAAA,kBAGM,KAAAC,sDAAA;IAWRrK,0DAAA,EAAM;;;;IAhFaA,uDAAA,EAAyB;IAAzBA,wDAAA,eAAAsK,MAAA,CAAAjB,UAAA,CAAyB;IA6DpBrJ,uDAAA,IAAiC;IAAjCA,wDAAA,oBAAAsK,MAAA,CAAAC,gBAAA,CAAiC;IACpBvK,uDAAA,EAA0B;IAA1BA,wDAAA,qBAAAsK,MAAA,CAAAC,gBAAA,CAA0B;IAIvDvK,uDAAA,EAA0C;IAA1CA,wDAAA,SAAAsK,MAAA,CAAAjB,UAAA,CAAAC,YAAA,CAAAC,MAAA,OAA0C;IAO7CvJ,uDAAA,EAAwC;IAAxCA,wDAAA,SAAAsK,MAAA,CAAAjB,UAAA,CAAAC,YAAA,CAAAC,MAAA,KAAwC;;;;;IAU7CvJ,4DAAA,cAAqE;IACnEA,oDAAA,GACF;IAAAA,0DAAA,EAAM;;;;IADJA,uDAAA,EACF;IADEA,gEAAA,gBAAAyK,MAAA,CAAAC,YAAA,YAAAD,MAAA,CAAApB,UAAA,CAAAC,YAAA,CAAAC,MAAA,kCAAAkB,MAAA,CAAAE,YAAA,CAAApB,MAAA,aACF;;;ADhII,MAAOqB,qBAAqB;EAWhC3J,YACUE,mBAAwC,EACxC0J,MAAiB,EACjBxJ,QAAqB;IAFrB,KAAAF,mBAAmB,GAAnBA,mBAAmB;IACnB,KAAA0J,MAAM,GAANA,MAAM;IACN,KAAAxJ,QAAQ,GAARA,QAAQ;IAblB,KAAAsJ,YAAY,GAAmB,EAAE;IACjC,KAAAtB,UAAU,GAAG,IAAIzB,uEAAkB,CAAe,EAAE,CAAC;IACrD,KAAA2C,gBAAgB,GAAa,CAAC,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,UAAU,CAAC;IAClE,KAAAjJ,OAAO,GAAG,KAAK;IACf,KAAAwJ,UAAU,GAAG,EAAE;IACf,KAAAC,YAAY,GAAG,EAAE;EASb;EAEJxJ,QAAQA,CAAA;IACN,IAAI,CAACyJ,gBAAgB,EAAE;EACzB;EAEAC,eAAeA,CAAA;IACb;IACAC,UAAU,CAAC,MAAK;MACd,IAAI,CAACC,eAAe,EAAE;IACxB,CAAC,CAAC;EACJ;EAEQA,eAAeA,CAAA;IACrB;IACA,IAAI,IAAI,CAACC,SAAS,EAAE;MAClB,IAAI,CAAC/B,UAAU,CAAC+B,SAAS,GAAG,IAAI,CAACA,SAAS;;IAE5C,IAAI,IAAI,CAACC,IAAI,EAAE;MACb,IAAI,CAAChC,UAAU,CAACgC,IAAI,GAAG,IAAI,CAACA,IAAI;;IAGlC;IACA,IAAI,CAAChC,UAAU,CAACiC,eAAe,GAAG,CAAC/K,IAAkB,EAAEgL,MAAc,KAAI;MACvE,MAAMT,UAAU,GAAGS,MAAM,CAACC,WAAW,EAAE;MACvC,OAAOjL,IAAI,CAACqB,IAAI,CAAC4J,WAAW,EAAE,CAACC,QAAQ,CAACX,UAAU,CAAC;IACrD,CAAC;EACH;EAEAE,gBAAgBA,CAAA;IACd,IAAI,CAAC1J,OAAO,GAAG,IAAI;IACnB,IAAI,CAACH,mBAAmB,CAACuK,mBAAmB,EAAE,CAAClJ,SAAS,CAAC;MACvDC,IAAI,EAAGC,QAA8B,IAAI;QACvC,IAAIA,QAAQ,CAACC,OAAO,EAAE;UACpB,IAAI,CAACgI,YAAY,GAAGjI,QAAQ,CAACnC,IAAI,CAACoL,cAAc;UAEhD;UACA,IAAI,CAACtC,UAAU,GAAG,IAAIzB,uEAAkB,CAAe,IAAI,CAAC+C,YAAY,CAAC;UAEzE;UACA,IAAI,CAACQ,eAAe,EAAE;UAEtB,IAAI,CAACS,WAAW,EAAE;SACnB,MAAM;UACL,IAAI,CAACvK,QAAQ,CAACuB,IAAI,CAACF,QAAQ,CAACK,OAAO,IAAI,kCAAkC,EAAE,OAAO,EAAE;YAClFF,QAAQ,EAAE;WACX,CAAC;;QAEJ,IAAI,CAACvB,OAAO,GAAG,KAAK;MACtB,CAAC;MACD0B,KAAK,EAAGA,KAAK,IAAI;QACf,IAAI,CAAC3B,QAAQ,CAACuB,IAAI,CAAC,kCAAkC,EAAE,OAAO,EAAE;UAC9DC,QAAQ,EAAE;SACX,CAAC;QACF,IAAI,CAACvB,OAAO,GAAG,KAAK;MACtB;KACD,CAAC;EACJ;EAEAsK,WAAWA,CAAA;IACT,MAAMC,WAAW,GAAG,IAAI,CAACf,UAAU,CAACgB,IAAI,EAAE;IAE1CC,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAE;MAChClB,UAAU,EAAE,IAAI,CAACA,UAAU;MAC3BC,YAAY,EAAE,IAAI,CAACA,YAAY;MAC/BkB,iBAAiB,EAAE,IAAI,CAACtB,YAAY,CAACpB;KACtC,CAAC;IAEF;IACA,IAAI,IAAI,CAACwB,YAAY,KAAK,EAAE,EAAE;MAC5B,MAAMzB,YAAY,GAAG,IAAI,CAACqB,YAAY,CAACY,MAAM,CAACW,WAAW,IACvDA,WAAW,CAAClK,OAAO,KAAK,IAAI,CAAC+I,YAAY,KACxCc,WAAW,KAAK,EAAE,IAClBK,WAAW,CAACtK,IAAI,CAAC4J,WAAW,EAAE,CAACC,QAAQ,CAACI,WAAW,CAACL,WAAW,EAAE,CAAC,CAAC,CACrE;MAEDO,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAE;QACxCjB,YAAY,EAAE,IAAI,CAACA,YAAY;QAC/BoB,aAAa,EAAE7C,YAAY,CAACC,MAAM;QAClC6C,UAAU,EAAE9C,YAAY,CAAC+C,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAACC,GAAG,CAACC,CAAC,KAAK;UAAEC,EAAE,EAAED,CAAC,CAAC9L,EAAE;UAAEgM,IAAI,EAAEF,CAAC,CAAC3K,IAAI;UAAE8K,OAAO,EAAEH,CAAC,CAACvK;QAAO,CAAE,CAAC;OAC/F,CAAC;MAEF;MACA,IAAI,CAACqH,UAAU,GAAG,IAAIzB,uEAAkB,CAAe0B,YAAY,CAAC;MACpE,IAAI,CAAC6B,eAAe,EAAE;KACvB,MAAM;MACL;MACA,IAAI,CAAC9B,UAAU,CAAC9I,IAAI,GAAG,IAAI,CAACoK,YAAY;MACxC,IAAI,CAACtB,UAAU,CAACkC,MAAM,GAAGM,WAAW,CAACC,IAAI,EAAE,CAACN,WAAW,EAAE;MAEzDO,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;;IAGjD;IACA,IAAI,IAAI,CAAC3C,UAAU,CAAC+B,SAAS,EAAE;MAC7B,IAAI,CAAC/B,UAAU,CAAC+B,SAAS,CAACuB,SAAS,EAAE;;EAEzC;EAEAC,WAAWA,CAAA;IACT,IAAI,CAAC5B,gBAAgB,EAAE;EACzB;EAEA6B,YAAYA,CAAA;IACVd,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAE;MACxClB,UAAU,EAAE,IAAI,CAACA,UAAU;MAC3BC,YAAY,EAAE,IAAI,CAACA;KACpB,CAAC;IAEF,IAAI,CAACD,UAAU,GAAG,EAAE;IACpB,IAAI,CAACC,YAAY,GAAG,EAAE;IAEtBgB,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAE;MAC1ClB,UAAU,EAAE,IAAI,CAACA,UAAU;MAC3BC,YAAY,EAAE,IAAI,CAACA;KACpB,CAAC;IAEF,IAAI,CAACa,WAAW,EAAE;IAElB,IAAI,CAACvK,QAAQ,CAACuB,IAAI,CAAC,mBAAmB,EAAE,MAAM,EAAE;MAC9CC,QAAQ,EAAE;KACX,CAAC;EACJ;EAEAiK,gBAAgBA,CAAA;IACd,MAAMC,UAAU,GAAG;MACjBvM,YAAY,EAAE,EAAkB;MAChCO,IAAI,EAAE;KACP;IAED,MAAMK,SAAS,GAAG,IAAI,CAACyJ,MAAM,CAACjI,IAAI,CAAC5B,2HAA+B,EAAE;MAClEgM,KAAK,EAAE,OAAO;MACdzM,IAAI,EAAEwM,UAAU;MAChBE,YAAY,EAAE;KACf,CAAC;IAEF7L,SAAS,CAAC8L,WAAW,EAAE,CAAC1K,SAAS,CAAC2K,MAAM,IAAG;MACzC,IAAIA,MAAM,EAAE;QACV,IAAI,CAACP,WAAW,EAAE;;IAEtB,CAAC,CAAC;EACJ;EAEA9D,cAAcA,CAACtI,YAA0B;IACvC,MAAMuM,UAAU,GAAG;MACjBvM,YAAY,EAAEA,YAAY;MAC1BO,IAAI,EAAE;KACP;IAED,MAAMK,SAAS,GAAG,IAAI,CAACyJ,MAAM,CAACjI,IAAI,CAAC5B,2HAA+B,EAAE;MAClEgM,KAAK,EAAE,OAAO;MACdzM,IAAI,EAAEwM,UAAU;MAChBE,YAAY,EAAE;KACf,CAAC;IAEF7L,SAAS,CAAC8L,WAAW,EAAE,CAAC1K,SAAS,CAAC2K,MAAM,IAAG;MACzC,IAAIA,MAAM,EAAE;QACV,IAAI,CAACP,WAAW,EAAE;;IAEtB,CAAC,CAAC;EACJ;EAEA3D,kBAAkBA,CAACzI,YAA0B;IAC3C,IAAI4M,OAAO,CAAC,6DAA6D5M,YAAY,CAACoB,IAAI,IAAI,CAAC,EAAE;MAC/F,IAAI,CAACT,mBAAmB,CAAC8H,kBAAkB,CAACzI,YAAY,CAACC,EAAG,CAAC,CAAC+B,SAAS,CAAC;QACtEC,IAAI,EAAGC,QAAQ,IAAI;UACjB,IAAIA,QAAQ,CAACC,OAAO,EAAE;YACpB,IAAI,CAACgI,YAAY,GAAG,IAAI,CAACA,YAAY,CAACY,MAAM,CAACgB,CAAC,IAAIA,CAAC,CAAC9L,EAAE,KAAKD,YAAY,CAACC,EAAE,CAAC;YAC3E,IAAI,CAACmL,WAAW,EAAE;YAClB,IAAI,CAACvK,QAAQ,CAACuB,IAAI,CAAC,wCAAwC,EAAE,OAAO,EAAE;cACpEC,QAAQ,EAAE;aACX,CAAC;WACH,MAAM;YACL,IAAI,CAACxB,QAAQ,CAACuB,IAAI,CAACF,QAAQ,CAACK,OAAO,IAAI,mCAAmC,EAAE,OAAO,EAAE;cACnFF,QAAQ,EAAE;aACX,CAAC;;QAEN,CAAC;QACDG,KAAK,EAAGA,KAAK,IAAI;UACf,IAAI,CAAC3B,QAAQ,CAACuB,IAAI,CAAC,mCAAmC,EAAE,OAAO,EAAE;YAC/DC,QAAQ,EAAE;WACX,CAAC;QACJ;OACD,CAAC;;EAEN;EAEAwK,YAAYA,CAAC7M,YAA0B;IACrC,IAAI,CAACW,mBAAmB,CAACkM,YAAY,CAAC7M,YAAY,CAACC,EAAG,CAAC,CAAC+B,SAAS,CAAC;MAChEC,IAAI,EAAGC,QAAQ,IAAI;QACjB,IAAIA,QAAQ,CAACC,OAAO,EAAE;UACpB;UACA,MAAM2K,KAAK,GAAG,IAAI,CAAC3C,YAAY,CAAC4C,SAAS,CAAChB,CAAC,IAAIA,CAAC,CAAC9L,EAAE,KAAKD,YAAY,CAACC,EAAE,CAAC;UACxE,IAAI6M,KAAK,KAAK,CAAC,CAAC,EAAE;YAChB,IAAI,CAAC3C,YAAY,CAAC2C,KAAK,CAAC,CAACtL,OAAO,GAAG,IAAI,CAAC2I,YAAY,CAAC2C,KAAK,CAAC,CAACtL,OAAO,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG;YACvF,IAAI,CAAC4J,WAAW,EAAE;;UAGpB,IAAI,CAACvK,QAAQ,CAACuB,IAAI,CAAC,8BAA8B,EAAE,OAAO,EAAE;YAC1DC,QAAQ,EAAE;WACX,CAAC;SACH,MAAM;UACL,IAAI,CAACxB,QAAQ,CAACuB,IAAI,CAACF,QAAQ,CAACK,OAAO,IAAI,yBAAyB,EAAE,OAAO,EAAE;YACzEF,QAAQ,EAAE;WACX,CAAC;;MAEN,CAAC;MACOG,KAAK,EAAGA,KAAK,IAAI;QACrB,IAAI,CAAC3B,QAAQ,CAACuB,IAAI,CAAC,yBAAyB,EAAE,OAAO,EAAE;UACrDC,QAAQ,EAAE;SACX,CAAC;MACJ;KACH,CAAC;EACJ;EAEA6H,YAAYA,CAAA;IACV,IAAI,CAAC,IAAI,CAACU,SAAS,IAAI,IAAI,CAAC/B,UAAU,CAACC,YAAY,CAACC,MAAM,KAAK,CAAC,EAAE;MAChE,OAAO,KAAK;;IAGd,MAAMiE,UAAU,GAAG,IAAI,CAACpC,SAAS,CAACqC,SAAS,GAAG,IAAI,CAACrC,SAAS,CAACsC,QAAQ,GAAG,CAAC;IACzE,MAAMC,QAAQ,GAAGC,IAAI,CAACC,GAAG,CAACL,UAAU,GAAG,IAAI,CAACpC,SAAS,CAACsC,QAAQ,GAAG,CAAC,EAAE,IAAI,CAACrE,UAAU,CAACC,YAAY,CAACC,MAAM,CAAC;IAExG,OAAO,GAAGiE,UAAU,IAAIG,QAAQ,EAAE;EACpC;EAAC,QAAAvK,CAAA;qBA/OUwH,qBAAqB,EAAA5K,+DAAA,CAAAsD,qFAAA,GAAAtD,+DAAA,CAAAwD,+DAAA,GAAAxD,+DAAA,CAAA0D,oEAAA;EAAA;EAAA,QAAAI,EAAA;UAArB8G,qBAAqB;IAAA7G,SAAA;IAAAgK,SAAA,WAAAC,4BAAAxJ,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;kEAQrBsD,qEAAY;kEACZE,2DAAO;;;;;;;;;;;;;;;QClDpBhI,4DAAA,aAAiB;QAIkCA,oDAAA,uCAA2B;QAAAA,0DAAA,EAAK;QAC7EA,4DAAA,WAA8B;QAAAA,oDAAA,kDAA2C;QAAAA,0DAAA,EAAI;QAE/EA,4DAAA,gBAIkC;QADhCA,wDAAA,mBAAAiO,uDAAA;UAAA,OAASxJ,GAAA,CAAAqI,gBAAA,EAAkB;QAAA,EAAC;QAE5B9M,4DAAA,eAAU;QAAAA,oDAAA,iBAAU;QAAAA,0DAAA,EAAW;QAC/BA,oDAAA,+BACF;QAAAA,0DAAA,EAAS;QAIXA,4DAAA,cAA2D;QAIvDA,uDAAA,WAAW;QAGXA,4DAAA,cAAqC;QAKjCA,wDAAA,mBAAAkO,wDAAA;UAAA,OAASzJ,GAAA,CAAAoI,YAAA,EAAc;QAAA,EAAC;QAIxB7M,4DAAA,gBAAU;QAAAA,oDAAA,iBAAS;QAAAA,0DAAA,EAAW;QAC9BA,oDAAA,yBACF;QAAAA,0DAAA,EAAS;QAGTA,4DAAA,iBAMkC;QAHhCA,wDAAA,mBAAAmO,wDAAA;UAAA,OAAS1J,GAAA,CAAAmI,WAAA,EAAa;QAAA,EAAC;QAIvB5M,4DAAA,gBAAyC;QAAAA,oDAAA,eAAO;QAAAA,0DAAA,EAAW;QAC3DA,oDAAA,kBACF;QAAAA,0DAAA,EAAS;QAIbA,4DAAA,cAAmD;QAGpCA,oDAAA,+BAAuB;QAAAA,0DAAA,EAAY;QAC9CA,4DAAA,iBAKkB;QAHhBA,wDAAA,2BAAAoO,+DAAAC,MAAA;UAAA,OAAA5J,GAAA,CAAAqG,UAAA,GAAAuD,MAAA;QAAA,EAAwB,2BAAAD,+DAAA;UAAA,OACP3J,GAAA,CAAAmH,WAAA,EAAa;QAAA,EADN;QAF1B5L,0DAAA,EAKkB;QAClBA,4DAAA,oBAAoB;QAAAA,oDAAA,oBAAE;QAAAA,0DAAA,EAAW;QAInCA,4DAAA,0BAAoD;QACvCA,oDAAA,cAAM;QAAAA,0DAAA,EAAY;QAC7BA,4DAAA,sBAAuE;QAA3DA,wDAAA,2BAAAsO,oEAAAD,MAAA;UAAA,OAAA5J,GAAA,CAAAsG,YAAA,GAAAsD,MAAA;QAAA,EAA0B,2BAAAC,oEAAA;UAAA,OAAkB7J,GAAA,CAAAmH,WAAA,EAAa;QAAA,EAA/B;QACpC5L,4DAAA,sBAAqB;QAAAA,oDAAA,aAAK;QAAAA,0DAAA,EAAa;QACvCA,4DAAA,sBAAsB;QAAAA,oDAAA,eAAO;QAAAA,0DAAA,EAAa;QAC1CA,4DAAA,sBAAsB;QAAAA,oDAAA,iBAAS;QAAAA,0DAAA,EAAa;QAOpDA,wDAAA,KAAAuO,qCAAA,kBAEM,KAAAC,qCAAA,wBAAAC,qCAAA;QA0FRzO,0DAAA,EAAM;;;QA3IIA,uDAAA,IAAyC;QAAzCA,wDAAA,cAAAyE,GAAA,CAAAqG,UAAA,KAAArG,GAAA,CAAAsG,YAAA,CAAyC;QAYzC/K,uDAAA,GAAoB;QAApBA,wDAAA,aAAAyE,GAAA,CAAAnD,OAAA,CAAoB;QAGVtB,uDAAA,EAA8B;QAA9BA,yDAAA,iBAAAyE,GAAA,CAAAnD,OAAA,CAA8B;QAYxCtB,uDAAA,GAAwB;QAAxBA,wDAAA,YAAAyE,GAAA,CAAAqG,UAAA,CAAwB;QAUd9K,uDAAA,GAA0B;QAA1BA,wDAAA,YAAAyE,GAAA,CAAAsG,YAAA,CAA0B;QAUtC/K,uDAAA,GAAa;QAAbA,wDAAA,SAAAyE,GAAA,CAAAnD,OAAA,CAAa;QAKgDtB,uDAAA,EAAc;QAAdA,wDAAA,UAAAyE,GAAA,CAAAnD,OAAA,CAAc;QAoF5BtB,uDAAA,EAAc;QAAdA,wDAAA,UAAAyE,GAAA,CAAAnD,OAAA,CAAc;;;mBD9IjEnC,yDAAY,EAAAyE,oDAAA,EAAAA,iDAAA,EACZ+D,uDAAW,EAAA9B,gEAAA,EAAAA,2DAAA,EAAAA,8DAAA,EAAAA,mDAAA,EACXgC,mEAAc,EAAAvB,6DAAA,EAAAA,qEAAA,EAAAA,oEAAA,EAAAA,iEAAA,EAAAA,+DAAA,EAAAA,8DAAA,EAAAA,kEAAA,EAAAA,4DAAA,EAAAA,iEAAA,EAAAA,2DAAA,EACdyB,2EAAkB,EAAAtB,qEAAA,EAClBwB,iEAAa,EAAAtB,2DAAA,EAAAA,iEAAA,EACbpH,qEAAe,EACfC,0EAAiB,EACjBC,sEAAe,EAAAuH,gEAAA,EAAAA,oEAAA,EACftH,kEAAa,EAAAwH,4DAAA,EACbvH,6EAAkB,EAAAyH,uEAAA,EAAAA,mEAAA,EAAAA,oEAAA,EAClBxH,oEAAc,EAAA0H,8DAAA,EACdzH,sEAAe,EAAA2H,gEAAA,EAAAiI,8DAAA,EACf3P,yFAAwB,EAAA4P,mFAAA,EACxB3P,wEAAgB,EAAA4P,kEAAA;IAAAjI,MAAA;EAAA","sources":["./src/app/pages/configuracion/tipos-cliente/costumer-type-edit-dialog/costumer-type-edit-dialog.component.ts","./src/app/pages/configuracion/tipos-cliente/costumer-type-edit-dialog/costumer-type-edit-dialog.component.html","./src/app/pages/configuracion/tipos-cliente/tipos-cliente.component.ts","./src/app/pages/configuracion/tipos-cliente/tipos-cliente.component.html"],"sourcesContent":["import { Component, OnInit, Inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA, MatDialogModule } from '@angular/material/dialog';\nimport { MatSnackBar, MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { CostumerType, CostumerTypeCreateRequest, CostumerTypeUpdateRequest, CostumerTypeEditDialogData } from '../../../../core/interfaces/costumer-type.interface';\nimport { CostumerTypeService } from '../../../../core/services/costumer-type.service';\n\n@Component({\n  selector: 'app-costumer-type-edit-dialog',\n  templateUrl: './costumer-type-edit-dialog.component.html',\n  styleUrls: ['./costumer-type-edit-dialog.component.scss'],\n  standalone: true,\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    MatDialogModule,\n    MatSnackBarModule,\n    MatButtonModule,\n    MatIconModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatSelectModule,\n    MatProgressSpinnerModule,\n    MatTooltipModule\n  ]\n})\nexport class CostumerTypeEditDialogComponent implements OnInit {\n  costumerTypeForm!: FormGroup;\n  loading = false;\n\n  constructor(\n    private fb: FormBuilder,\n    private costumerTypeService: CostumerTypeService,\n    private dialogRef: MatDialogRef<CostumerTypeEditDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: CostumerTypeEditDialogData,\n    private snackBar: MatSnackBar\n  ) { }\n\n  ngOnInit(): void {\n    this.initializeForm();\n    this.populateForm();\n  }\n\n  private initializeForm(): void {\n    this.costumerTypeForm = this.fb.group({\n      Name: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(600)]],\n      Enabled: ['1', Validators.required]\n    });\n  }\n\n  private populateForm(): void {\n    if (this.data.costumerType && this.data.mode === 'edit') {\n      this.costumerTypeForm.patchValue({\n        Name: this.data.costumerType.Name,\n        Enabled: this.data.costumerType.Enabled\n      });\n    }\n  }\n\n  onSubmit(): void {\n    if (this.costumerTypeForm.valid) {\n      this.loading = true;\n\n      if (this.data.mode === 'create') {\n        this.createCostumerType();\n      } else {\n        this.updateCostumerType();\n      }\n    }\n  }\n\n  private createCostumerType(): void {\n    const costumerTypeData: CostumerTypeCreateRequest = {\n      Name: this.costumerTypeForm.value.Name,\n      Enabled: this.costumerTypeForm.value.Enabled\n    };\n\n    this.costumerTypeService.createCostumerType(costumerTypeData).subscribe({\n      next: (response) => {\n        if (response.success) {\n          this.snackBar.open('Tipo de cliente creado exitosamente', 'Éxito', {\n            duration: 2000\n          });\n          this.dialogRef.close(true);\n        } else {\n          this.snackBar.open(response.message || 'Error al crear tipo de cliente', 'Error', {\n            duration: 3000\n          });\n        }\n        this.loading = false;\n      },\n      error: (error) => {\n        this.snackBar.open('Error al crear tipo de cliente', 'Error', {\n          duration: 3000\n        });\n        this.loading = false;\n      }\n    });\n  }\n\n  private updateCostumerType(): void {\n    const costumerTypeData: CostumerTypeUpdateRequest = {\n      Id: this.data.costumerType.Id!,\n      Name: this.costumerTypeForm.value.Name,\n      Enabled: this.costumerTypeForm.value.Enabled\n    };\n\n    this.costumerTypeService.updateCostumerType(this.data.costumerType.Id!, costumerTypeData).subscribe({\n      next: (response) => {\n        if (response.success) {\n          this.snackBar.open('Tipo de cliente actualizado exitosamente', 'Éxito', {\n            duration: 2000\n          });\n          this.dialogRef.close(true);\n        } else {\n          this.snackBar.open(response.message || 'Error al actualizar tipo de cliente', 'Error', {\n            duration: 3000\n          });\n        }\n        this.loading = false;\n      },\n      error: (error) => {\n        this.snackBar.open('Error al actualizar tipo de cliente', 'Error', {\n          duration: 3000\n        });\n        this.loading = false;\n      }\n    });\n  }\n\n  onCancel(): void {\n    this.dialogRef.close();\n  }\n\n  get dialogTitle(): string {\n    return this.data.mode === 'create' ? 'Crear Tipo de Cliente' : 'Editar Tipo de Cliente';\n  }\n\n  get submitButtonText(): string {\n    return this.data.mode === 'create' ? 'Crear' : 'Actualizar';\n  }\n}\n","<div class=\"p-0\">\n  <!-- Header del diálogo -->\n  <div class=\"flex items-center justify-between p-6 border-b border-gray-200\">\n    <h2 class=\"text-xl font-semibold text-gray-900\">\n      {{ dialogTitle }}\n    </h2>\n    <button mat-icon-button (click)=\"onCancel()\" matTooltip=\"Cerrar\">\n      <mat-icon>close</mat-icon>\n    </button>\n  </div>\n\n  <!-- Formulario -->\n  <form [formGroup]=\"costumerTypeForm\" (ngSubmit)=\"onSubmit()\" class=\"space-y-4 p-6\">\n    <!-- Nombre -->\n    <mat-form-field appearance=\"outline\" class=\"w-full\">\n      <mat-label>Nombre del Tipo de Cliente</mat-label>\n      <input \n        matInput \n        formControlName=\"Name\" \n        placeholder=\"Ej: CONSUMIDOR, PERSONA FISICA, PERSONA MORAL\"\n        maxlength=\"600\">\n      <mat-hint>Nombre completo del tipo de cliente (máximo 600 caracteres)</mat-hint>\n      <mat-error *ngIf=\"costumerTypeForm.get('Name')?.hasError('required')\">\n        El nombre es requerido\n      </mat-error>\n      <mat-error *ngIf=\"costumerTypeForm.get('Name')?.hasError('minlength')\">\n        El nombre debe tener al menos 3 caracteres\n      </mat-error>\n      <mat-error *ngIf=\"costumerTypeForm.get('Name')?.hasError('maxlength')\">\n        El nombre no puede exceder 600 caracteres\n      </mat-error>\n    </mat-form-field>\n\n    <!-- Estado -->\n    <mat-form-field appearance=\"outline\" class=\"w-full\">\n      <mat-label>Estado</mat-label>\n      <mat-select formControlName=\"Enabled\">\n        <mat-option value=\"1\">Activo</mat-option>\n        <mat-option value=\"0\">Inactivo</mat-option>\n      </mat-select>\n      <mat-hint>Estado actual del tipo de cliente</mat-hint>\n    </mat-form-field>\n\n    <!-- Información adicional (solo lectura en modo edición) -->\n    <div *ngIf=\"data.mode === 'edit'\" class=\"bg-gray-50 p-4 rounded-lg\">\n      <h3 class=\"text-sm font-medium text-gray-700 mb-2\">Información del Sistema</h3>\n      <div class=\"grid grid-cols-2 gap-4 text-sm\">\n        <div>\n          <span class=\"text-gray-500\">ID:</span>\n          <span class=\"ml-2 font-mono\">{{ data.costumerType.Id }}</span>\n        </div>\n        <div>\n          <span class=\"text-gray-500\">Último Usuario:</span>\n          <span class=\"ml-2\">{{ data.costumerType.LastUserUpdateName || 'N/A' }}</span>\n        </div>\n        <div>\n          <span class=\"text-gray-500\">Fecha Registro:</span>\n          <span class=\"ml-2\">{{ data.costumerType.RegistrationDate || 'N/A' }}</span>\n        </div>\n        <div>\n          <span class=\"text-gray-500\">Última Actualización:</span>\n          <span class=\"ml-2\">{{ data.costumerType.UpdateDate || 'N/A' }}</span>\n        </div>\n      </div>\n    </div>\n\n    <!-- Botones de Acción -->\n    <div class=\"flex justify-end space-x-3 pt-4 border-t\">\n      <button \n        type=\"button\" \n        mat-button \n        (click)=\"onCancel()\"\n        [disabled]=\"loading\">\n        Cancelar\n      </button>\n      <button \n        type=\"submit\" \n        mat-raised-button \n        color=\"primary\"\n        [disabled]=\"costumerTypeForm.invalid || loading\">\n        <mat-spinner *ngIf=\"loading\" diameter=\"20\" class=\"mr-2\"></mat-spinner>\n        <mat-icon *ngIf=\"!loading\">{{ data.mode === 'edit' ? 'save' : 'add' }}</mat-icon>\n        {{ submitButtonText }}\n      </button>\n    </div>\n  </form>\n</div>\n","import { Component, OnInit, AfterViewInit, ViewChild } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { MatTableDataSource, MatTableModule } from '@angular/material/table';\nimport { MatPaginator, MatPaginatorModule } from '@angular/material/paginator';\nimport { MatSort, MatSortModule } from '@angular/material/sort';\nimport { MatDialog, MatDialogModule } from '@angular/material/dialog';\nimport { MatSnackBar, MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { CostumerType, CostumerTypeResponse } from '../../../core/interfaces/costumer-type.interface';\nimport { CostumerTypeService } from '../../../core/services/costumer-type.service';\nimport { CostumerTypeEditDialogComponent } from './costumer-type-edit-dialog/costumer-type-edit-dialog.component';\n\n@Component({\n  selector: 'app-tipos-cliente',\n  templateUrl: './tipos-cliente.component.html',\n  styleUrls: ['./tipos-cliente.component.scss'],\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n    MatTableModule,\n    MatPaginatorModule,\n    MatSortModule,\n    MatDialogModule,\n    MatSnackBarModule,\n    MatButtonModule,\n    MatIconModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatSelectModule,\n    MatProgressSpinnerModule,\n    MatTooltipModule\n  ]\n})\nexport class TiposClienteComponent implements OnInit, AfterViewInit {\n  tiposCliente: CostumerType[] = [];\n  dataSource = new MatTableDataSource<CostumerType>([]);\n  displayedColumns: string[] = ['Id', 'Name', 'Enabled', 'acciones'];\n  loading = false;\n  searchTerm = '';\n  statusFilter = '';\n\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\n  @ViewChild(MatSort) sort!: MatSort;\n\n  constructor(\n    private costumerTypeService: CostumerTypeService,\n    private dialog: MatDialog,\n    private snackBar: MatSnackBar\n  ) { }\n\n  ngOnInit(): void {\n    this.loadTiposCliente();\n  }\n\n  ngAfterViewInit(): void {\n    // Usar setTimeout para asegurar que los ViewChild estén completamente inicializados\n    setTimeout(() => {\n      this.setupDataSource();\n    });\n  }\n\n  private setupDataSource(): void {\n    // Asegurar que paginator y sort estén configurados\n    if (this.paginator) {\n      this.dataSource.paginator = this.paginator;\n    }\n    if (this.sort) {\n      this.dataSource.sort = this.sort;\n    }\n    \n    // Configurar filtro personalizado\n    this.dataSource.filterPredicate = (data: CostumerType, filter: string) => {\n      const searchTerm = filter.toLowerCase();\n      return data.Name.toLowerCase().includes(searchTerm);\n    };\n  }\n\n  loadTiposCliente(): void {\n    this.loading = true;\n    this.costumerTypeService.getAllCostumerTypes().subscribe({\n      next: (response: CostumerTypeResponse) => {\n        if (response.success) {\n          this.tiposCliente = response.data.costumer_types;\n          \n          // Crear un nuevo DataSource con los datos\n          this.dataSource = new MatTableDataSource<CostumerType>(this.tiposCliente);\n          \n          // Configurar paginator, sort y filtros\n          this.setupDataSource();\n          \n          this.applyFilter();\n        } else {\n          this.snackBar.open(response.message || 'Error al cargar tipos de cliente', 'Error', {\n            duration: 3000\n          });\n        }\n        this.loading = false;\n      },\n      error: (error) => {\n        this.snackBar.open('Error al cargar tipos de cliente', 'Error', {\n          duration: 3000\n        });\n        this.loading = false;\n      }\n    });\n  }\n\n  applyFilter(): void {\n    const filterValue = this.searchTerm.trim();\n    \n    console.log('Aplicando filtros:', { \n      searchTerm: this.searchTerm, \n      statusFilter: this.statusFilter, \n      totalTiposCliente: this.tiposCliente.length \n    });\n    \n    // Aplicar filtro de estado si existe\n    if (this.statusFilter !== '') {\n      const filteredData = this.tiposCliente.filter(tipoCliente => \n        tipoCliente.Enabled === this.statusFilter &&\n        (filterValue === '' || \n         tipoCliente.Name.toLowerCase().includes(filterValue.toLowerCase()))\n      );\n      \n      console.log('Filtro de estado aplicado:', { \n        statusFilter: this.statusFilter, \n        filteredCount: filteredData.length,\n        sampleData: filteredData.slice(0, 3).map(t => ({ id: t.Id, name: t.Name, enabled: t.Enabled }))\n      });\n      \n      // Crear un nuevo DataSource para mantener el ordenamiento\n      this.dataSource = new MatTableDataSource<CostumerType>(filteredData);\n      this.setupDataSource();\n    } else {\n      // Si no hay filtro de estado, solo aplicar filtro de búsqueda\n      this.dataSource.data = this.tiposCliente;\n      this.dataSource.filter = filterValue.trim().toLowerCase();\n      \n      console.log('Solo filtro de búsqueda aplicado');\n    }\n    \n    // Reset paginator to first page\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n  }\n\n  refreshData(): void {\n    this.loadTiposCliente();\n  }\n\n  clearFilters(): void {\n    console.log('Limpiando filtros - Antes:', { \n      searchTerm: this.searchTerm, \n      statusFilter: this.statusFilter \n    });\n    \n    this.searchTerm = '';\n    this.statusFilter = '';\n    \n    console.log('Limpiando filtros - Después:', { \n      searchTerm: this.searchTerm, \n      statusFilter: this.statusFilter \n    });\n    \n    this.applyFilter();\n    \n    this.snackBar.open('Filtros limpiados', 'Info', {\n      duration: 2000\n    });\n  }\n\n  openCreateDialog(): void {\n    const dialogData = {\n      costumerType: {} as CostumerType,\n      mode: 'create'\n    };\n\n    const dialogRef = this.dialog.open(CostumerTypeEditDialogComponent, {\n      width: '600px',\n      data: dialogData,\n      disableClose: false\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        this.refreshData();\n      }\n    });\n  }\n\n  openEditDialog(costumerType: CostumerType): void {\n    const dialogData = {\n      costumerType: costumerType,\n      mode: 'edit'\n    };\n\n    const dialogRef = this.dialog.open(CostumerTypeEditDialogComponent, {\n      width: '600px',\n      data: dialogData,\n      disableClose: false\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        this.refreshData();\n      }\n    });\n  }\n\n  deleteCostumerType(costumerType: CostumerType): void {\n    if (confirm(`¿Estás seguro de que quieres eliminar el tipo de cliente \"${costumerType.Name}\"?`)) {\n      this.costumerTypeService.deleteCostumerType(costumerType.Id!).subscribe({\n        next: (response) => {\n          if (response.success) {\n            this.tiposCliente = this.tiposCliente.filter(t => t.Id !== costumerType.Id);\n            this.applyFilter();\n            this.snackBar.open('Tipo de cliente eliminado exitosamente', 'Éxito', {\n              duration: 2000\n            });\n          } else {\n            this.snackBar.open(response.message || 'Error al eliminar tipo de cliente', 'Error', {\n              duration: 3000\n            });\n          }\n        },\n        error: (error) => {\n          this.snackBar.open('Error al eliminar tipo de cliente', 'Error', {\n            duration: 3000\n          });\n        }\n      });\n    }\n  }\n\n  toggleStatus(costumerType: CostumerType): void {\n    this.costumerTypeService.toggleStatus(costumerType.Id!).subscribe({\n      next: (response) => {\n        if (response.success) {\n          // Actualizar el estado en la lista local\n          const index = this.tiposCliente.findIndex(t => t.Id === costumerType.Id);\n          if (index !== -1) {\n            this.tiposCliente[index].Enabled = this.tiposCliente[index].Enabled === '1' ? '0' : '1';\n            this.applyFilter();\n          }\n          \n          this.snackBar.open('Estado cambiado exitosamente', 'Éxito', {\n            duration: 2000\n          });\n        } else {\n          this.snackBar.open(response.message || 'Error al cambiar estado', 'Error', {\n            duration: 3000\n          });\n        }\n      },\n              error: (error) => {\n          this.snackBar.open('Error al cambiar estado', 'Error', {\n            duration: 3000\n          });\n        }\n    });\n  }\n\n  getPageRange(): string {\n    if (!this.paginator || this.dataSource.filteredData.length === 0) {\n      return '0-0';\n    }\n    \n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize + 1;\n    const endIndex = Math.min(startIndex + this.paginator.pageSize - 1, this.dataSource.filteredData.length);\n    \n    return `${startIndex}-${endIndex}`;\n  }\n}\n","<div class=\"p-6\">\n  <!-- Header -->\n  <div class=\"flex items-center justify-between mb-4\">\n    <div>\n      <h1 class=\"text-3xl font-bold text-gray-900\">Gestión de Tipos de Cliente</h1>\n      <p class=\"text-gray-600 mt-1\">Administra los tipos de cliente del sistema</p>\n    </div>\n    <button \n      mat-raised-button \n      color=\"primary\" \n      (click)=\"openCreateDialog()\"\n      class=\"flex items-center gap-2\">\n      <mat-icon>add_circle</mat-icon>\n      Nuevo Tipo de Cliente\n    </button>\n  </div>\n\n  <!-- Filtros -->\n  <div class=\"bg-white rounded-lg shadow-sm border p-4 mb-6\">\n    <div class=\"flex items-center justify-between mb-4\">\n      \n      <!-- Espacio vacío a la izquierda -->\n      <div></div>\n      \n      <!-- Botones de acción a la derecha -->\n      <div class=\"flex items-center gap-3\">\n        <!-- Botón de Limpiar Filtros -->\n        <button \n          mat-stroked-button \n          color=\"warn\" \n          (click)=\"clearFilters()\"\n          [disabled]=\"!searchTerm && !statusFilter\"\n          matTooltip=\"Limpiar filtros\"\n          class=\"flex items-center gap-2\">\n          <mat-icon>clear_all</mat-icon>\n          Limpiar Filtros\n        </button>\n        \n        <!-- Botón de Reload en filtros -->\n        <button \n          mat-stroked-button \n          color=\"accent\" \n          (click)=\"refreshData()\"\n          [disabled]=\"loading\"\n          matTooltip=\"Recargar datos\"\n          class=\"flex items-center gap-2\">\n          <mat-icon [class.animate-spin]=\"loading\">refresh</mat-icon>\n          Recargar\n        </button>\n      </div>\n    </div>\n    \n    <div class=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n      <!-- Búsqueda por texto -->\n      <mat-form-field appearance=\"outline\" class=\"w-full\">\n        <mat-label>Buscar tipos de cliente</mat-label>\n        <input \n          matInput \n          [(ngModel)]=\"searchTerm\" \n          (ngModelChange)=\"applyFilter()\"\n          placeholder=\"Buscar por nombre...\"\n          maxlength=\"100\">\n        <mat-icon matSuffix>🔍</mat-icon>\n      </mat-form-field>\n\n      <!-- Filtro por estado -->\n      <mat-form-field appearance=\"outline\" class=\"w-full\">\n        <mat-label>Estado</mat-label>\n        <mat-select [(ngModel)]=\"statusFilter\" (ngModelChange)=\"applyFilter()\">\n          <mat-option value=\"\">Todos</mat-option>\n          <mat-option value=\"1\">Activos</mat-option>\n          <mat-option value=\"0\">Inactivos</mat-option>\n        </mat-select>\n      </mat-form-field>\n    </div>\n  </div>\n\n  <!-- Loading Spinner -->\n  <div *ngIf=\"loading\" class=\"flex justify-center items-center py-8\">\n    <mat-spinner diameter=\"40\"></mat-spinner>\n  </div>\n\n  <!-- Tabla -->\n  <div class=\"bg-white rounded-lg shadow-sm border overflow-hidden\" *ngIf=\"!loading\">\n    <table mat-table [dataSource]=\"dataSource\" matSort class=\"w-full\" style=\"line-height: 1;\">\n      <!-- Columna ID -->\n      <ng-container matColumnDef=\"Id\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header class=\"w-16 text-center py-1 bg-gray-50 text-xs font-medium text-gray-700\">\n          ID\n        </th>\n        <td mat-cell *matCellDef=\"let tipoCliente\" class=\"text-xs font-mono text-gray-600 py-0\">\n          {{ tipoCliente.Id }}\n        </td>\n      </ng-container>\n\n      <!-- Columna Nombre -->\n      <ng-container matColumnDef=\"Name\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header class=\"min-w-0 flex-1 py-1 bg-gray-50 text-xs font-medium text-gray-700\">\n          Nombre\n        </th>\n        <td mat-cell *matCellDef=\"let tipoCliente\" class=\"text-xs py-0\">\n          {{ tipoCliente.Name }}\n        </td>\n      </ng-container>\n\n      <!-- Columna Estado -->\n      <ng-container matColumnDef=\"Enabled\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header class=\"w-24 text-center py-1 bg-gray-50 text-xs font-medium text-gray-700\">\n          Estado\n        </th>\n        <td mat-cell *matCellDef=\"let tipoCliente\" class=\"text-center\">\n          <span class=\"px-1.5 py-0.5 rounded-full text-xs font-medium\"\n                [ngClass]=\"tipoCliente.Enabled === '1' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'\">\n            {{ tipoCliente.Enabled === '1' ? 'Activo' : 'Inactivo' }}\n          </span>\n        </td>\n      </ng-container>\n\n      <!-- Columna Acciones -->\n      <ng-container matColumnDef=\"acciones\">\n        <th mat-header-cell *matHeaderCellDef class=\"w-28 text-center py-1 bg-gray-50 text-xs font-medium text-gray-700\">\n          Acciones\n        </th>\n        <td mat-cell *matCellDef=\"let tipoCliente\" class=\"text-center py-0\">\n          <div class=\"flex gap-0.5 justify-center items-center\">\n            <button\n              (click)=\"openEditDialog(tipoCliente)\"\n              mat-icon-button\n              color=\"primary\"\n              matTooltip=\"Editar\"\n              class=\"!w-6 !h-6 !min-h-6 !p-0\">\n              <mat-icon class=\"!text-sm\">edit</mat-icon>\n            </button>\n            <button\n              (click)=\"deleteCostumerType(tipoCliente)\"\n              mat-icon-button\n              color=\"warn\"\n              matTooltip=\"Eliminar\"\n              class=\"!w-6 !h-6 !min-h-6 !p-0\">\n              <mat-icon class=\"!text-sm\">delete</mat-icon>\n            </button>\n          </div>\n        </td>\n      </ng-container>\n\n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\" class=\"!min-h-0 !h-8\"></tr>\n    </table>\n\n    <!-- Empty State -->\n    <div *ngIf=\"dataSource.filteredData.length === 0\" class=\"text-center py-8\">\n      <mat-icon class=\"text-gray-400 text-4xl mb-2\">inbox</mat-icon>\n      <p class=\"text-gray-500\">No se encontraron tipos de cliente</p>\n    </div>\n\n    <!-- Paginación -->\n    <mat-paginator \n      *ngIf=\"dataSource.filteredData.length > 0\"\n      [pageSizeOptions]=\"[10, 25, 50, 100]\"\n      [pageSize]=\"10\"\n      [length]=\"dataSource.filteredData.length\"\n      showFirstLastButtons\n      class=\"border-t\">\n    </mat-paginator>\n  </div>\n\n  <!-- Contador de resultados -->\n  <div class=\"mt-4 text-sm text-gray-600 text-center\" *ngIf=\"!loading\">\n    Mostrando {{ getPageRange() }} de {{ dataSource.filteredData.length }} tipos de cliente visibles ({{ tiposCliente.length }} total)\n  </div>\n</div>\n"],"names":["CommonModule","ReactiveFormsModule","Validators","MAT_DIALOG_DATA","MatDialogModule","MatSnackBarModule","MatButtonModule","MatIconModule","MatFormFieldModule","MatInputModule","MatSelectModule","MatProgressSpinnerModule","MatTooltipModule","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate","ctx_r3","data","costumerType","Id","LastUserUpdateName","RegistrationDate","UpdateDate","ɵɵelement","ctx_r5","mode","CostumerTypeEditDialogComponent","constructor","fb","costumerTypeService","dialogRef","snackBar","loading","ngOnInit","initializeForm","populateForm","costumerTypeForm","group","Name","required","minLength","maxLength","Enabled","patchValue","onSubmit","valid","createCostumerType","updateCostumerType","costumerTypeData","value","subscribe","next","response","success","open","duration","close","message","error","onCancel","dialogTitle","submitButtonText","_","ɵɵdirectiveInject","i1","FormBuilder","i2","CostumerTypeService","i3","MatDialogRef","i4","MatSnackBar","_2","selectors","standalone","features","ɵɵStandaloneFeature","decls","vars","consts","template","CostumerTypeEditDialogComponent_Template","rf","ctx","ɵɵlistener","CostumerTypeEditDialogComponent_Template_button_click_4_listener","CostumerTypeEditDialogComponent_Template_form_ngSubmit_7_listener","ɵɵtemplate","CostumerTypeEditDialogComponent_mat_error_14_Template","CostumerTypeEditDialogComponent_mat_error_15_Template","CostumerTypeEditDialogComponent_mat_error_16_Template","CostumerTypeEditDialogComponent_div_27_Template","CostumerTypeEditDialogComponent_Template_button_click_29_listener","CostumerTypeEditDialogComponent_mat_spinner_32_Template","CostumerTypeEditDialogComponent_mat_icon_33_Template","ɵɵtextInterpolate1","ɵɵproperty","tmp_2_0","get","hasError","tmp_3_0","tmp_4_0","invalid","i5","NgIf","ɵNgNoValidate","DefaultValueAccessor","NgControlStatus","NgControlStatusGroup","MaxLengthValidator","FormGroupDirective","FormControlName","i6","MatButton","MatIconButton","i7","MatIcon","i8","MatFormField","MatLabel","MatHint","MatError","i9","MatInput","i10","MatSelect","i11","MatOption","i12","MatProgressSpinner","i13","MatTooltip","styles","FormsModule","MatTableDataSource","MatTableModule","MatPaginator","MatPaginatorModule","MatSort","MatSortModule","tipoCliente_r15","tipoCliente_r16","tipoCliente_r17","TiposClienteComponent_div_41_td_13_Template_button_click_2_listener","restoredCtx","ɵɵrestoreView","_r20","tipoCliente_r18","$implicit","ctx_r19","ɵɵnextContext","ɵɵresetView","openEditDialog","TiposClienteComponent_div_41_td_13_Template_button_click_5_listener","ctx_r21","deleteCostumerType","ɵɵpureFunction0","_c0","ctx_r14","dataSource","filteredData","length","ɵɵelementContainerStart","TiposClienteComponent_div_41_th_3_Template","TiposClienteComponent_div_41_td_4_Template","ɵɵelementContainerEnd","TiposClienteComponent_div_41_th_6_Template","TiposClienteComponent_div_41_td_7_Template","TiposClienteComponent_div_41_th_9_Template","TiposClienteComponent_div_41_td_10_Template","TiposClienteComponent_div_41_th_12_Template","TiposClienteComponent_div_41_td_13_Template","TiposClienteComponent_div_41_tr_14_Template","TiposClienteComponent_div_41_tr_15_Template","TiposClienteComponent_div_41_div_16_Template","TiposClienteComponent_div_41_mat_paginator_17_Template","ctx_r1","displayedColumns","ɵɵtextInterpolate3","ctx_r2","getPageRange","tiposCliente","TiposClienteComponent","dialog","searchTerm","statusFilter","loadTiposCliente","ngAfterViewInit","setTimeout","setupDataSource","paginator","sort","filterPredicate","filter","toLowerCase","includes","getAllCostumerTypes","costumer_types","applyFilter","filterValue","trim","console","log","totalTiposCliente","tipoCliente","filteredCount","sampleData","slice","map","t","id","name","enabled","firstPage","refreshData","clearFilters","openCreateDialog","dialogData","width","disableClose","afterClosed","result","confirm","toggleStatus","index","findIndex","startIndex","pageIndex","pageSize","endIndex","Math","min","MatDialog","viewQuery","TiposClienteComponent_Query","TiposClienteComponent_Template_button_click_7_listener","TiposClienteComponent_Template_button_click_15_listener","TiposClienteComponent_Template_button_click_19_listener","TiposClienteComponent_Template_input_ngModelChange_27_listener","$event","TiposClienteComponent_Template_mat_select_ngModelChange_33_listener","TiposClienteComponent_div_40_Template","TiposClienteComponent_div_41_Template","TiposClienteComponent_div_42_Template","ɵɵclassProp","NgClass","NgModel","MatTable","MatHeaderCellDef","MatHeaderRowDef","MatColumnDef","MatCellDef","MatRowDef","MatHeaderCell","MatCell","MatHeaderRow","MatRow","MatSortHeader","MatSuffix","i14","i15","i16"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}
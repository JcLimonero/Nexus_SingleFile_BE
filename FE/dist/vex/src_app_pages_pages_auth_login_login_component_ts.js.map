{"version":3,"file":"src_app_pages_pages_auth_login_login_component_ts.js","mappings":"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","sources":["./src/@vex/animations/fade-in-up.animation.ts","./src/app/pages/pages/auth/login/login.component.ts","./src/app/pages/pages/auth/login/login.component.html","./node_modules/@angular/material/fesm2022/checkbox.mjs"],"sourcesContent":["import { animate, style, transition, trigger } from '@angular/animations';\n\nexport function fadeInUpAnimation(duration: number) {\n  return trigger('fadeInUp', [\n    transition(':enter', [\n      style({\n        transform: 'translateY(20px)',\n        opacity: 0\n      }),\n      animate(\n        `${duration}ms cubic-bezier(0.35, 0, 0.25, 1)`,\n        style({\n          transform: 'translateY(0)',\n          opacity: 1\n        })\n      )\n    ])\n  ]);\n}\n\nexport const fadeInUp400ms = fadeInUpAnimation(400);\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component\n} from '@angular/core';\nimport { FormBuilder, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { Router, RouterLink } from '@angular/router';\nimport { MatSnackBar, MatSnackBarModule } from '@angular/material/snack-bar';\nimport { fadeInUp400ms } from '@vex/animations/fade-in-up.animation';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatButtonModule } from '@angular/material/button';\nimport { NgIf } from '@angular/common';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatFormFieldModule } from '@angular/material/form-field';\n\n@Component({\n  selector: 'vex-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [fadeInUp400ms],\n  standalone: true,\n  imports: [\n    ReactiveFormsModule,\n    MatFormFieldModule,\n    MatInputModule,\n    NgIf,\n    MatButtonModule,\n    MatTooltipModule,\n    MatIconModule,\n    MatCheckboxModule,\n    RouterLink,\n    MatSnackBarModule\n  ]\n})\nexport class LoginComponent {\n  form = this.fb.group({\n    email: ['', Validators.required],\n    password: ['', Validators.required]\n  });\n\n  inputType = 'password';\n  visible = false;\n\n  constructor(\n    private router: Router,\n    private fb: FormBuilder,\n    private cd: ChangeDetectorRef,\n    private snackbar: MatSnackBar\n  ) {}\n\n  send() {\n    this.router.navigate(['/']);\n    this.snackbar.open(\n      \"Lucky you! Looks like you didn't need a password or email address! For a real application we provide validators to prevent this. ;)\",\n      'THANKS',\n      {\n        duration: 10000\n      }\n    );\n  }\n\n  toggleVisibility() {\n    if (this.visible) {\n      this.inputType = 'password';\n      this.visible = false;\n      this.cd.markForCheck();\n    } else {\n      this.inputType = 'text';\n      this.visible = true;\n      this.cd.markForCheck();\n    }\n  }\n}\n","<div class=\"w-full h-full bg-pattern flex flex-col items-center justify-center\">\n  <div @fadeInUp class=\"card overflow-hidden w-full max-w-md\">\n    <div class=\"p-6 pb-0 flex flex-col items-center justify-center\">\n      <div class=\"fill-current text-center\">\n        <img class=\"w-16\" src=\"assets/img/logo/logo.svg\" />\n      </div>\n    </div>\n\n    <div class=\"text-center mt-4\">\n      <h2 class=\"title m-0\">Welcome back</h2>\n      <h4 class=\"body-2 text-secondary m-0\">\n        Sign in with your credentials below.\n      </h4>\n    </div>\n\n    <div [formGroup]=\"form\" class=\"p-6 flex flex-col gap-4\">\n      <div class=\"flex flex-col\">\n        <mat-form-field class=\"flex-1\">\n          <mat-label>E-Mail</mat-label>\n          <input formControlName=\"email\" matInput required />\n          <mat-error *ngIf=\"form.controls.email.hasError('required')\"\n          >We need an email address to log you in\n          </mat-error>\n        </mat-form-field>\n        <mat-form-field class=\"flex-1\">\n          <mat-label>Password</mat-label>\n          <input\n            [type]=\"inputType\"\n            formControlName=\"password\"\n            matInput\n            required />\n          <button\n            (click)=\"toggleVisibility()\"\n            mat-icon-button\n            matIconSuffix\n            matTooltip=\"Toggle Visibility\"\n            type=\"button\">\n            <mat-icon *ngIf=\"visible\" svgIcon=\"mat:visibility\"></mat-icon>\n            <mat-icon *ngIf=\"!visible\" svgIcon=\"mat:visibility_off\"></mat-icon>\n          </button>\n          <mat-hint>Click the eye to toggle visibility</mat-hint>\n          <mat-error *ngIf=\"form.controls.password.hasError('required')\"\n          >We need a password to log you in\n          </mat-error>\n        </mat-form-field>\n      </div>\n\n      <div class=\"flex items-center justify-between\">\n        <mat-checkbox class=\"caption\" color=\"primary\">Remember Me</mat-checkbox>\n        <a [routerLink]=\"['/forgot-password']\" class=\"caption\"\n        >Forgot Password?</a\n        >\n      </div>\n\n      <button (click)=\"send()\" color=\"primary\" mat-raised-button type=\"button\">\n        SIGN IN\n      </button>\n\n      <p class=\"text-secondary text-center\">\n        Don't have an account?<br />\n        <a [routerLink]=\"['/register']\">Click here to create one</a>\n      </p>\n    </div>\n  </div>\n</div>\n","import * as i0 from '@angular/core';\nimport { InjectionToken, forwardRef, EventEmitter, booleanAttribute, numberAttribute, Component, ViewEncapsulation, ChangeDetectionStrategy, Attribute, Optional, Inject, Input, Output, ViewChild, Directive, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, CheckboxRequiredValidator } from '@angular/forms';\nimport * as i1 from '@angular/material/core';\nimport { MatRipple, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/** Injection token to be used to override the default options for `mat-checkbox`. */\nconst MAT_CHECKBOX_DEFAULT_OPTIONS = new InjectionToken('mat-checkbox-default-options', {\n    providedIn: 'root',\n    factory: MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        color: 'accent',\n        clickAction: 'check-indeterminate',\n    };\n}\n\nconst MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatCheckbox),\n    multi: true,\n};\n/** Change event object emitted by checkbox. */\nclass MatCheckboxChange {\n}\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n// Default checkbox configuration.\nconst defaults = MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY();\nclass MatCheckbox {\n    /** Focuses the checkbox. */\n    focus() {\n        this._inputElement.nativeElement.focus();\n    }\n    /** Creates the change event that will be emitted by the checkbox. */\n    _createChangeEvent(isChecked) {\n        const event = new MatCheckboxChange();\n        event.source = this;\n        event.checked = isChecked;\n        return event;\n    }\n    /** Gets the element on which to add the animation CSS classes. */\n    _getAnimationTargetElement() {\n        return this._inputElement?.nativeElement;\n    }\n    /** Returns the unique id for the visual hidden input. */\n    get inputId() {\n        return `${this.id || this._uniqueId}-input`;\n    }\n    constructor(_elementRef, _changeDetectorRef, _ngZone, tabIndex, _animationMode, _options) {\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._ngZone = _ngZone;\n        this._animationMode = _animationMode;\n        this._options = _options;\n        /** CSS classes to add when transitioning between the different checkbox states. */\n        this._animationClasses = {\n            uncheckedToChecked: 'mdc-checkbox--anim-unchecked-checked',\n            uncheckedToIndeterminate: 'mdc-checkbox--anim-unchecked-indeterminate',\n            checkedToUnchecked: 'mdc-checkbox--anim-checked-unchecked',\n            checkedToIndeterminate: 'mdc-checkbox--anim-checked-indeterminate',\n            indeterminateToChecked: 'mdc-checkbox--anim-indeterminate-checked',\n            indeterminateToUnchecked: 'mdc-checkbox--anim-indeterminate-unchecked',\n        };\n        /**\n         * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will\n         * take precedence so this may be omitted.\n         */\n        this.ariaLabel = '';\n        /**\n         * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n         */\n        this.ariaLabelledby = null;\n        /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n        this.labelPosition = 'after';\n        /** Name value will be applied to the input element if present */\n        this.name = null;\n        /** Event emitted when the checkbox's `checked` value changes. */\n        this.change = new EventEmitter();\n        /** Event emitted when the checkbox's `indeterminate` value changes. */\n        this.indeterminateChange = new EventEmitter();\n        /**\n         * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n         * @docs-private\n         */\n        this._onTouched = () => { };\n        this._currentAnimationClass = '';\n        this._currentCheckState = 0 /* TransitionCheckState.Init */;\n        this._controlValueAccessorChangeFn = () => { };\n        this._checked = false;\n        this._disabled = false;\n        this._indeterminate = false;\n        this._options = this._options || defaults;\n        this.color = this._options.color || defaults.color;\n        this.tabIndex = parseInt(tabIndex) || 0;\n        this.id = this._uniqueId = `mat-mdc-checkbox-${++nextUniqueId}`;\n    }\n    ngAfterViewInit() {\n        this._syncIndeterminate(this._indeterminate);\n    }\n    /** Whether the checkbox is checked. */\n    get checked() {\n        return this._checked;\n    }\n    set checked(value) {\n        if (value != this.checked) {\n            this._checked = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Whether the checkbox is disabled. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        if (value !== this.disabled) {\n            this._disabled = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n     * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n     * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n     * set to false.\n     */\n    get indeterminate() {\n        return this._indeterminate;\n    }\n    set indeterminate(value) {\n        const changed = value != this._indeterminate;\n        this._indeterminate = value;\n        if (changed) {\n            if (this._indeterminate) {\n                this._transitionCheckState(3 /* TransitionCheckState.Indeterminate */);\n            }\n            else {\n                this._transitionCheckState(this.checked ? 1 /* TransitionCheckState.Checked */ : 2 /* TransitionCheckState.Unchecked */);\n            }\n            this.indeterminateChange.emit(this._indeterminate);\n        }\n        this._syncIndeterminate(this._indeterminate);\n    }\n    _isRippleDisabled() {\n        return this.disableRipple || this.disabled;\n    }\n    /** Method being called whenever the label text changes. */\n    _onLabelTextChange() {\n        // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n        // component will be only marked for check, but no actual change detection runs automatically.\n        // Instead of going back into the zone in order to trigger a change detection which causes\n        // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n        // an explicit change detection for the checkbox view and its children.\n        this._changeDetectorRef.detectChanges();\n    }\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value) {\n        this.checked = !!value;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    _transitionCheckState(newState) {\n        let oldState = this._currentCheckState;\n        let element = this._getAnimationTargetElement();\n        if (oldState === newState || !element) {\n            return;\n        }\n        if (this._currentAnimationClass) {\n            element.classList.remove(this._currentAnimationClass);\n        }\n        this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(oldState, newState);\n        this._currentCheckState = newState;\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.add(this._currentAnimationClass);\n            // Remove the animation class to avoid animation when the checkbox is moved between containers\n            const animationClass = this._currentAnimationClass;\n            this._ngZone.runOutsideAngular(() => {\n                setTimeout(() => {\n                    element.classList.remove(animationClass);\n                }, 1000);\n            });\n        }\n    }\n    _emitChangeEvent() {\n        this._controlValueAccessorChangeFn(this.checked);\n        this.change.emit(this._createChangeEvent(this.checked));\n        // Assigning the value again here is redundant, but we have to do it in case it was\n        // changed inside the `change` listener which will cause the input to be out of sync.\n        if (this._inputElement) {\n            this._inputElement.nativeElement.checked = this.checked;\n        }\n    }\n    /** Toggles the `checked` state of the checkbox. */\n    toggle() {\n        this.checked = !this.checked;\n        this._controlValueAccessorChangeFn(this.checked);\n    }\n    _handleInputClick() {\n        const clickAction = this._options?.clickAction;\n        // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n        if (!this.disabled && clickAction !== 'noop') {\n            // When user manually click on the checkbox, `indeterminate` is set to false.\n            if (this.indeterminate && clickAction !== 'check') {\n                Promise.resolve().then(() => {\n                    this._indeterminate = false;\n                    this.indeterminateChange.emit(this._indeterminate);\n                });\n            }\n            this._checked = !this._checked;\n            this._transitionCheckState(this._checked ? 1 /* TransitionCheckState.Checked */ : 2 /* TransitionCheckState.Unchecked */);\n            // Emit our custom change event if the native input emitted one.\n            // It is important to only emit it, if the native input triggered one, because\n            // we don't want to trigger a change event, when the `checked` variable changes for example.\n            this._emitChangeEvent();\n        }\n        else if (!this.disabled && clickAction === 'noop') {\n            // Reset native input when clicked with noop. The native checkbox becomes checked after\n            // click, reset it to be align with `checked` value of `mat-checkbox`.\n            this._inputElement.nativeElement.checked = this.checked;\n            this._inputElement.nativeElement.indeterminate = this.indeterminate;\n        }\n    }\n    _onInteractionEvent(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n    }\n    _onBlur() {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n        });\n    }\n    _getAnimationClassForCheckStateTransition(oldState, newState) {\n        // Don't transition if animations are disabled.\n        if (this._animationMode === 'NoopAnimations') {\n            return '';\n        }\n        switch (oldState) {\n            case 0 /* TransitionCheckState.Init */:\n                // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n                // [checked] bound to it.\n                if (newState === 1 /* TransitionCheckState.Checked */) {\n                    return this._animationClasses.uncheckedToChecked;\n                }\n                else if (newState == 3 /* TransitionCheckState.Indeterminate */) {\n                    return this._checked\n                        ? this._animationClasses.checkedToIndeterminate\n                        : this._animationClasses.uncheckedToIndeterminate;\n                }\n                break;\n            case 2 /* TransitionCheckState.Unchecked */:\n                return newState === 1 /* TransitionCheckState.Checked */\n                    ? this._animationClasses.uncheckedToChecked\n                    : this._animationClasses.uncheckedToIndeterminate;\n            case 1 /* TransitionCheckState.Checked */:\n                return newState === 2 /* TransitionCheckState.Unchecked */\n                    ? this._animationClasses.checkedToUnchecked\n                    : this._animationClasses.checkedToIndeterminate;\n            case 3 /* TransitionCheckState.Indeterminate */:\n                return newState === 1 /* TransitionCheckState.Checked */\n                    ? this._animationClasses.indeterminateToChecked\n                    : this._animationClasses.indeterminateToUnchecked;\n        }\n        return '';\n    }\n    /**\n     * Syncs the indeterminate value with the checkbox DOM node.\n     *\n     * We sync `indeterminate` directly on the DOM node, because in Ivy the check for whether a\n     * property is supported on an element boils down to `if (propName in element)`. Domino's\n     * HTMLInputElement doesn't have an `indeterminate` property so Ivy will warn during\n     * server-side rendering.\n     */\n    _syncIndeterminate(value) {\n        const nativeCheckbox = this._inputElement;\n        if (nativeCheckbox) {\n            nativeCheckbox.nativeElement.indeterminate = value;\n        }\n    }\n    _onInputClick() {\n        this._handleInputClick();\n    }\n    _onTouchTargetClick() {\n        this._handleInputClick();\n        if (!this.disabled) {\n            // Normally the input should be focused already, but if the click\n            // comes from the touch target, then we might have to focus it ourselves.\n            this._inputElement.nativeElement.focus();\n        }\n    }\n    /**\n     *  Prevent click events that come from the `<label/>` element from bubbling. This prevents the\n     *  click handler on the host from triggering twice when clicking on the `<label/>` element. After\n     *  the click event on the `<label/>` propagates, the browsers dispatches click on the associated\n     *  `<input/>`. By preventing clicks on the label by bubbling, we ensure only one click event\n     *  bubbles when the label is clicked.\n     */\n    _preventBubblingFromLabel(event) {\n        if (!!event.target && this._labelElement.nativeElement.contains(event.target)) {\n            event.stopPropagation();\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatCheckbox, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }, { token: 'tabindex', attribute: true }, { token: ANIMATION_MODULE_TYPE, optional: true }, { token: MAT_CHECKBOX_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"16.1.0\", version: \"17.0.4\", type: MatCheckbox, selector: \"mat-checkbox\", inputs: { ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"], id: \"id\", required: [\"required\", \"required\", booleanAttribute], labelPosition: \"labelPosition\", name: \"name\", value: \"value\", disableRipple: [\"disableRipple\", \"disableRipple\", booleanAttribute], tabIndex: [\"tabIndex\", \"tabIndex\", (value) => (value == null ? undefined : numberAttribute(value))], color: \"color\", checked: [\"checked\", \"checked\", booleanAttribute], disabled: [\"disabled\", \"disabled\", booleanAttribute], indeterminate: [\"indeterminate\", \"indeterminate\", booleanAttribute] }, outputs: { change: \"change\", indeterminateChange: \"indeterminateChange\" }, host: { properties: { \"attr.tabindex\": \"null\", \"attr.aria-label\": \"null\", \"attr.aria-labelledby\": \"null\", \"class._mat-animation-noopable\": \"_animationMode === 'NoopAnimations'\", \"class.mdc-checkbox--disabled\": \"disabled\", \"id\": \"id\", \"class.mat-mdc-checkbox-disabled\": \"disabled\", \"class.mat-mdc-checkbox-checked\": \"checked\", \"class\": \"color ? \\\"mat-\\\" + color : \\\"mat-accent\\\"\" }, classAttribute: \"mat-mdc-checkbox\" }, providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR], viewQueries: [{ propertyName: \"_inputElement\", first: true, predicate: [\"input\"], descendants: true }, { propertyName: \"_labelElement\", first: true, predicate: [\"label\"], descendants: true }, { propertyName: \"ripple\", first: true, predicate: MatRipple, descendants: true }], exportAs: [\"matCheckbox\"], ngImport: i0, template: \"<div class=\\\"mdc-form-field\\\"\\n     [class.mdc-form-field--align-end]=\\\"labelPosition == 'before'\\\"\\n     (click)=\\\"_preventBubblingFromLabel($event)\\\">\\n  <div #checkbox class=\\\"mdc-checkbox\\\">\\n    <!-- Render this element first so the input is on top. -->\\n    <div class=\\\"mat-mdc-checkbox-touch-target\\\" (click)=\\\"_onTouchTargetClick()\\\"></div>\\n    <input #input\\n           type=\\\"checkbox\\\"\\n           class=\\\"mdc-checkbox__native-control\\\"\\n           [class.mdc-checkbox--selected]=\\\"checked\\\"\\n           [attr.aria-label]=\\\"ariaLabel || null\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n           [attr.aria-checked]=\\\"indeterminate ? 'mixed' : null\\\"\\n           [attr.name]=\\\"name\\\"\\n           [attr.value]=\\\"value\\\"\\n           [checked]=\\\"checked\\\"\\n           [indeterminate]=\\\"indeterminate\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [tabIndex]=\\\"disabled ? -1 : tabIndex\\\"\\n           (blur)=\\\"_onBlur()\\\"\\n           (click)=\\\"_onInputClick()\\\"\\n           (change)=\\\"_onInteractionEvent($event)\\\"/>\\n    <div class=\\\"mdc-checkbox__ripple\\\"></div>\\n    <div class=\\\"mdc-checkbox__background\\\">\\n      <svg class=\\\"mdc-checkbox__checkmark\\\"\\n           focusable=\\\"false\\\"\\n           viewBox=\\\"0 0 24 24\\\"\\n           aria-hidden=\\\"true\\\">\\n        <path class=\\\"mdc-checkbox__checkmark-path\\\"\\n              fill=\\\"none\\\"\\n              d=\\\"M1.73,12.91 8.1,19.28 22.79,4.59\\\"/>\\n      </svg>\\n      <div class=\\\"mdc-checkbox__mixedmark\\\"></div>\\n    </div>\\n    <div class=\\\"mat-mdc-checkbox-ripple mat-mdc-focus-indicator\\\" mat-ripple\\n      [matRippleTrigger]=\\\"checkbox\\\"\\n      [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n      [matRippleCentered]=\\\"true\\\"></div>\\n  </div>\\n  <!--\\n    Avoid putting a click handler on the <label/> to fix duplicate navigation stop on Talk Back\\n    (#14385). Putting a click handler on the <label/> caused this bug because the browser produced\\n    an unnecessary accessibility tree node.\\n  -->\\n  <label class=\\\"mdc-label\\\"\\n         #label\\n         [for]=\\\"inputId\\\">\\n    <ng-content></ng-content>\\n  </label>\\n</div>\\n\", styles: [\".mdc-touch-target-wrapper{display:inline}@keyframes mdc-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:29.7833385}50%{animation-timing-function:cubic-bezier(0, 0, 0.2, 1)}100%{stroke-dashoffset:0}}@keyframes mdc-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0, 0, 0, 1)}100%{transform:scaleX(1)}}@keyframes mdc-checkbox-checked-unchecked-checkmark-path{from{animation-timing-function:cubic-bezier(0.4, 0, 1, 1);opacity:1;stroke-dashoffset:0}to{opacity:0;stroke-dashoffset:-29.7833385}}@keyframes mdc-checkbox-checked-indeterminate-checkmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 1);transform:rotate(0deg);opacity:1}to{transform:rotate(45deg);opacity:0}}@keyframes mdc-checkbox-indeterminate-checked-checkmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);transform:rotate(45deg);opacity:0}to{transform:rotate(360deg);opacity:1}}@keyframes mdc-checkbox-checked-indeterminate-mixedmark{from{animation-timing-function:mdc-animation-deceleration-curve-timing-function;transform:rotate(-45deg);opacity:0}to{transform:rotate(0deg);opacity:1}}@keyframes mdc-checkbox-indeterminate-checked-mixedmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);transform:rotate(0deg);opacity:1}to{transform:rotate(315deg);opacity:0}}@keyframes mdc-checkbox-indeterminate-unchecked-mixedmark{0%{animation-timing-function:linear;transform:scaleX(1);opacity:1}32.8%,100%{transform:scaleX(0);opacity:0}}.mdc-checkbox{display:inline-block;position:relative;flex:0 0 18px;box-sizing:content-box;width:18px;height:18px;line-height:0;white-space:nowrap;cursor:pointer;vertical-align:bottom}.mdc-checkbox[hidden]{display:none}.mdc-checkbox.mdc-ripple-upgraded--background-focused .mdc-checkbox__focus-ring,.mdc-checkbox:not(.mdc-ripple-upgraded):focus .mdc-checkbox__focus-ring{pointer-events:none;border:2px solid rgba(0,0,0,0);border-radius:6px;box-sizing:content-box;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%);height:100%;width:100%}@media screen and (forced-colors: active){.mdc-checkbox.mdc-ripple-upgraded--background-focused .mdc-checkbox__focus-ring,.mdc-checkbox:not(.mdc-ripple-upgraded):focus .mdc-checkbox__focus-ring{border-color:CanvasText}}.mdc-checkbox.mdc-ripple-upgraded--background-focused .mdc-checkbox__focus-ring::after,.mdc-checkbox:not(.mdc-ripple-upgraded):focus .mdc-checkbox__focus-ring::after{content:\\\"\\\";border:2px solid rgba(0,0,0,0);border-radius:8px;display:block;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%);height:calc(100% + 4px);width:calc(100% + 4px)}@media screen and (forced-colors: active){.mdc-checkbox.mdc-ripple-upgraded--background-focused .mdc-checkbox__focus-ring::after,.mdc-checkbox:not(.mdc-ripple-upgraded):focus .mdc-checkbox__focus-ring::after{border-color:CanvasText}}@media all and (-ms-high-contrast: none){.mdc-checkbox .mdc-checkbox__focus-ring{display:none}}@media screen and (forced-colors: active),(-ms-high-contrast: active){.mdc-checkbox__mixedmark{margin:0 1px}}.mdc-checkbox--disabled{cursor:default;pointer-events:none}.mdc-checkbox__background{display:inline-flex;position:absolute;align-items:center;justify-content:center;box-sizing:border-box;width:18px;height:18px;border:2px solid currentColor;border-radius:2px;background-color:rgba(0,0,0,0);pointer-events:none;will-change:background-color,border-color;transition:background-color 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1),border-color 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1)}.mdc-checkbox__checkmark{position:absolute;top:0;right:0;bottom:0;left:0;width:100%;opacity:0;transition:opacity 180ms 0ms cubic-bezier(0.4, 0, 0.6, 1)}.mdc-checkbox--upgraded .mdc-checkbox__checkmark{opacity:1}.mdc-checkbox__checkmark-path{transition:stroke-dashoffset 180ms 0ms cubic-bezier(0.4, 0, 0.6, 1);stroke:currentColor;stroke-width:3.12px;stroke-dashoffset:29.7833385;stroke-dasharray:29.7833385}.mdc-checkbox__mixedmark{width:100%;height:0;transform:scaleX(0) rotate(0deg);border-width:1px;border-style:solid;opacity:0;transition:opacity 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1),transform 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1)}.mdc-checkbox--anim-unchecked-checked .mdc-checkbox__background,.mdc-checkbox--anim-unchecked-indeterminate .mdc-checkbox__background,.mdc-checkbox--anim-checked-unchecked .mdc-checkbox__background,.mdc-checkbox--anim-indeterminate-unchecked .mdc-checkbox__background{animation-duration:180ms;animation-timing-function:linear}.mdc-checkbox--anim-unchecked-checked .mdc-checkbox__checkmark-path{animation:mdc-checkbox-unchecked-checked-checkmark-path 180ms linear 0s;transition:none}.mdc-checkbox--anim-unchecked-indeterminate .mdc-checkbox__mixedmark{animation:mdc-checkbox-unchecked-indeterminate-mixedmark 90ms linear 0s;transition:none}.mdc-checkbox--anim-checked-unchecked .mdc-checkbox__checkmark-path{animation:mdc-checkbox-checked-unchecked-checkmark-path 90ms linear 0s;transition:none}.mdc-checkbox--anim-checked-indeterminate .mdc-checkbox__checkmark{animation:mdc-checkbox-checked-indeterminate-checkmark 90ms linear 0s;transition:none}.mdc-checkbox--anim-checked-indeterminate .mdc-checkbox__mixedmark{animation:mdc-checkbox-checked-indeterminate-mixedmark 90ms linear 0s;transition:none}.mdc-checkbox--anim-indeterminate-checked .mdc-checkbox__checkmark{animation:mdc-checkbox-indeterminate-checked-checkmark 500ms linear 0s;transition:none}.mdc-checkbox--anim-indeterminate-checked .mdc-checkbox__mixedmark{animation:mdc-checkbox-indeterminate-checked-mixedmark 500ms linear 0s;transition:none}.mdc-checkbox--anim-indeterminate-unchecked .mdc-checkbox__mixedmark{animation:mdc-checkbox-indeterminate-unchecked-mixedmark 300ms linear 0s;transition:none}.mdc-checkbox__native-control:checked~.mdc-checkbox__background,.mdc-checkbox__native-control:indeterminate~.mdc-checkbox__background,.mdc-checkbox__native-control[data-indeterminate=true]~.mdc-checkbox__background{transition:border-color 90ms 0ms cubic-bezier(0, 0, 0.2, 1),background-color 90ms 0ms cubic-bezier(0, 0, 0.2, 1)}.mdc-checkbox__native-control:checked~.mdc-checkbox__background .mdc-checkbox__checkmark-path,.mdc-checkbox__native-control:indeterminate~.mdc-checkbox__background .mdc-checkbox__checkmark-path,.mdc-checkbox__native-control[data-indeterminate=true]~.mdc-checkbox__background .mdc-checkbox__checkmark-path{stroke-dashoffset:0}.mdc-checkbox__native-control{position:absolute;margin:0;padding:0;opacity:0;cursor:inherit}.mdc-checkbox__native-control:disabled{cursor:default;pointer-events:none}.mdc-checkbox--touch{margin:calc((var(--mdc-checkbox-state-layer-size) - var(--mdc-checkbox-state-layer-size)) / 2)}.mdc-checkbox--touch .mdc-checkbox__native-control{top:calc((var(--mdc-checkbox-state-layer-size) - var(--mdc-checkbox-state-layer-size)) / 2);right:calc((var(--mdc-checkbox-state-layer-size) - var(--mdc-checkbox-state-layer-size)) / 2);left:calc((var(--mdc-checkbox-state-layer-size) - var(--mdc-checkbox-state-layer-size)) / 2);width:var(--mdc-checkbox-state-layer-size);height:var(--mdc-checkbox-state-layer-size)}.mdc-checkbox__native-control:checked~.mdc-checkbox__background .mdc-checkbox__checkmark{transition:opacity 180ms 0ms cubic-bezier(0, 0, 0.2, 1),transform 180ms 0ms cubic-bezier(0, 0, 0.2, 1);opacity:1}.mdc-checkbox__native-control:checked~.mdc-checkbox__background .mdc-checkbox__mixedmark{transform:scaleX(1) rotate(-45deg)}.mdc-checkbox__native-control:indeterminate~.mdc-checkbox__background .mdc-checkbox__checkmark,.mdc-checkbox__native-control[data-indeterminate=true]~.mdc-checkbox__background .mdc-checkbox__checkmark{transform:rotate(45deg);opacity:0;transition:opacity 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1),transform 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1)}.mdc-checkbox__native-control:indeterminate~.mdc-checkbox__background .mdc-checkbox__mixedmark,.mdc-checkbox__native-control[data-indeterminate=true]~.mdc-checkbox__background .mdc-checkbox__mixedmark{transform:scaleX(1) rotate(0deg);opacity:1}.mdc-checkbox.mdc-checkbox--upgraded .mdc-checkbox__background,.mdc-checkbox.mdc-checkbox--upgraded .mdc-checkbox__checkmark,.mdc-checkbox.mdc-checkbox--upgraded .mdc-checkbox__checkmark-path,.mdc-checkbox.mdc-checkbox--upgraded .mdc-checkbox__mixedmark{transition:none}.mdc-form-field{display:inline-flex;align-items:center;vertical-align:middle}.mdc-form-field[hidden]{display:none}.mdc-form-field>label{margin-left:0;margin-right:auto;padding-left:4px;padding-right:0;order:0}[dir=rtl] .mdc-form-field>label,.mdc-form-field>label[dir=rtl]{margin-left:auto;margin-right:0}[dir=rtl] .mdc-form-field>label,.mdc-form-field>label[dir=rtl]{padding-left:0;padding-right:4px}.mdc-form-field--nowrap>label{text-overflow:ellipsis;overflow:hidden;white-space:nowrap}.mdc-form-field--align-end>label{margin-left:auto;margin-right:0;padding-left:0;padding-right:4px;order:-1}[dir=rtl] .mdc-form-field--align-end>label,.mdc-form-field--align-end>label[dir=rtl]{margin-left:0;margin-right:auto}[dir=rtl] .mdc-form-field--align-end>label,.mdc-form-field--align-end>label[dir=rtl]{padding-left:4px;padding-right:0}.mdc-form-field--space-between{justify-content:space-between}.mdc-form-field--space-between>label{margin:0}[dir=rtl] .mdc-form-field--space-between>label,.mdc-form-field--space-between>label[dir=rtl]{margin:0}.mdc-checkbox{padding:calc((var(--mdc-checkbox-state-layer-size) - 18px) / 2);margin:calc((var(--mdc-checkbox-state-layer-size) - var(--mdc-checkbox-state-layer-size)) / 2)}.mdc-checkbox .mdc-checkbox__native-control[disabled]:not(:checked):not(:indeterminate):not([data-indeterminate=true])~.mdc-checkbox__background{border-color:var(--mdc-checkbox-disabled-unselected-icon-color);background-color:transparent}.mdc-checkbox .mdc-checkbox__native-control[disabled]:checked~.mdc-checkbox__background,.mdc-checkbox .mdc-checkbox__native-control[disabled]:indeterminate~.mdc-checkbox__background,.mdc-checkbox .mdc-checkbox__native-control[data-indeterminate=true][disabled]~.mdc-checkbox__background{border-color:transparent;background-color:var(--mdc-checkbox-disabled-selected-icon-color)}.mdc-checkbox .mdc-checkbox__native-control:enabled~.mdc-checkbox__background .mdc-checkbox__checkmark{color:var(--mdc-checkbox-selected-checkmark-color)}.mdc-checkbox .mdc-checkbox__native-control:enabled~.mdc-checkbox__background .mdc-checkbox__mixedmark{border-color:var(--mdc-checkbox-selected-checkmark-color)}.mdc-checkbox .mdc-checkbox__native-control:disabled~.mdc-checkbox__background .mdc-checkbox__checkmark{color:var(--mdc-checkbox-disabled-selected-checkmark-color)}.mdc-checkbox .mdc-checkbox__native-control:disabled~.mdc-checkbox__background .mdc-checkbox__mixedmark{border-color:var(--mdc-checkbox-disabled-selected-checkmark-color)}.mdc-checkbox .mdc-checkbox__native-control:enabled:not(:checked):not(:indeterminate):not([data-indeterminate=true])~.mdc-checkbox__background{border-color:var(--mdc-checkbox-unselected-icon-color);background-color:transparent}.mdc-checkbox .mdc-checkbox__native-control:enabled:checked~.mdc-checkbox__background,.mdc-checkbox .mdc-checkbox__native-control:enabled:indeterminate~.mdc-checkbox__background,.mdc-checkbox .mdc-checkbox__native-control[data-indeterminate=true]:enabled~.mdc-checkbox__background{border-color:var(--mdc-checkbox-selected-icon-color);background-color:var(--mdc-checkbox-selected-icon-color)}@keyframes mdc-checkbox-fade-in-background-8A000000FFF4433600000000FFF44336{0%{border-color:var(--mdc-checkbox-unselected-icon-color);background-color:transparent}50%{border-color:var(--mdc-checkbox-selected-icon-color);background-color:var(--mdc-checkbox-selected-icon-color)}}@keyframes mdc-checkbox-fade-out-background-8A000000FFF4433600000000FFF44336{0%,80%{border-color:var(--mdc-checkbox-selected-icon-color);background-color:var(--mdc-checkbox-selected-icon-color)}100%{border-color:var(--mdc-checkbox-unselected-icon-color);background-color:transparent}}.mdc-checkbox.mdc-checkbox--anim-unchecked-checked .mdc-checkbox__native-control:enabled~.mdc-checkbox__background,.mdc-checkbox.mdc-checkbox--anim-unchecked-indeterminate .mdc-checkbox__native-control:enabled~.mdc-checkbox__background{animation-name:mdc-checkbox-fade-in-background-8A000000FFF4433600000000FFF44336}.mdc-checkbox.mdc-checkbox--anim-checked-unchecked .mdc-checkbox__native-control:enabled~.mdc-checkbox__background,.mdc-checkbox.mdc-checkbox--anim-indeterminate-unchecked .mdc-checkbox__native-control:enabled~.mdc-checkbox__background{animation-name:mdc-checkbox-fade-out-background-8A000000FFF4433600000000FFF44336}.mdc-checkbox:hover .mdc-checkbox__native-control:enabled:not(:checked):not(:indeterminate):not([data-indeterminate=true])~.mdc-checkbox__background{border-color:var(--mdc-checkbox-unselected-hover-icon-color);background-color:transparent}.mdc-checkbox:hover .mdc-checkbox__native-control:enabled:checked~.mdc-checkbox__background,.mdc-checkbox:hover .mdc-checkbox__native-control:enabled:indeterminate~.mdc-checkbox__background,.mdc-checkbox:hover .mdc-checkbox__native-control[data-indeterminate=true]:enabled~.mdc-checkbox__background{border-color:var(--mdc-checkbox-selected-hover-icon-color);background-color:var(--mdc-checkbox-selected-hover-icon-color)}@keyframes mdc-checkbox-fade-in-background-FF212121FFF4433600000000FFF44336{0%{border-color:var(--mdc-checkbox-unselected-hover-icon-color);background-color:transparent}50%{border-color:var(--mdc-checkbox-selected-hover-icon-color);background-color:var(--mdc-checkbox-selected-hover-icon-color)}}@keyframes mdc-checkbox-fade-out-background-FF212121FFF4433600000000FFF44336{0%,80%{border-color:var(--mdc-checkbox-selected-hover-icon-color);background-color:var(--mdc-checkbox-selected-hover-icon-color)}100%{border-color:var(--mdc-checkbox-unselected-hover-icon-color);background-color:transparent}}.mdc-checkbox:hover.mdc-checkbox--anim-unchecked-checked .mdc-checkbox__native-control:enabled~.mdc-checkbox__background,.mdc-checkbox:hover.mdc-checkbox--anim-unchecked-indeterminate .mdc-checkbox__native-control:enabled~.mdc-checkbox__background{animation-name:mdc-checkbox-fade-in-background-FF212121FFF4433600000000FFF44336}.mdc-checkbox:hover.mdc-checkbox--anim-checked-unchecked .mdc-checkbox__native-control:enabled~.mdc-checkbox__background,.mdc-checkbox:hover.mdc-checkbox--anim-indeterminate-unchecked .mdc-checkbox__native-control:enabled~.mdc-checkbox__background{animation-name:mdc-checkbox-fade-out-background-FF212121FFF4433600000000FFF44336}.mdc-checkbox:not(:disabled):active .mdc-checkbox__native-control:enabled:not(:checked):not(:indeterminate):not([data-indeterminate=true])~.mdc-checkbox__background{border-color:var(--mdc-checkbox-unselected-pressed-icon-color);background-color:transparent}.mdc-checkbox:not(:disabled):active .mdc-checkbox__native-control:enabled:checked~.mdc-checkbox__background,.mdc-checkbox:not(:disabled):active .mdc-checkbox__native-control:enabled:indeterminate~.mdc-checkbox__background,.mdc-checkbox:not(:disabled):active .mdc-checkbox__native-control[data-indeterminate=true]:enabled~.mdc-checkbox__background{border-color:var(--mdc-checkbox-selected-pressed-icon-color);background-color:var(--mdc-checkbox-selected-pressed-icon-color)}@keyframes mdc-checkbox-fade-in-background-8A000000FFF4433600000000FFF44336{0%{border-color:var(--mdc-checkbox-unselected-pressed-icon-color);background-color:transparent}50%{border-color:var(--mdc-checkbox-selected-pressed-icon-color);background-color:var(--mdc-checkbox-selected-pressed-icon-color)}}@keyframes mdc-checkbox-fade-out-background-8A000000FFF4433600000000FFF44336{0%,80%{border-color:var(--mdc-checkbox-selected-pressed-icon-color);background-color:var(--mdc-checkbox-selected-pressed-icon-color)}100%{border-color:var(--mdc-checkbox-unselected-pressed-icon-color);background-color:transparent}}.mdc-checkbox:not(:disabled):active.mdc-checkbox--anim-unchecked-checked .mdc-checkbox__native-control:enabled~.mdc-checkbox__background,.mdc-checkbox:not(:disabled):active.mdc-checkbox--anim-unchecked-indeterminate .mdc-checkbox__native-control:enabled~.mdc-checkbox__background{animation-name:mdc-checkbox-fade-in-background-8A000000FFF4433600000000FFF44336}.mdc-checkbox:not(:disabled):active.mdc-checkbox--anim-checked-unchecked .mdc-checkbox__native-control:enabled~.mdc-checkbox__background,.mdc-checkbox:not(:disabled):active.mdc-checkbox--anim-indeterminate-unchecked .mdc-checkbox__native-control:enabled~.mdc-checkbox__background{animation-name:mdc-checkbox-fade-out-background-8A000000FFF4433600000000FFF44336}.mdc-checkbox .mdc-checkbox__background{top:calc((var(--mdc-checkbox-state-layer-size) - 18px) / 2);left:calc((var(--mdc-checkbox-state-layer-size) - 18px) / 2)}.mdc-checkbox .mdc-checkbox__native-control{top:calc((var(--mdc-checkbox-state-layer-size) - var(--mdc-checkbox-state-layer-size)) / 2);right:calc((var(--mdc-checkbox-state-layer-size) - var(--mdc-checkbox-state-layer-size)) / 2);left:calc((var(--mdc-checkbox-state-layer-size) - var(--mdc-checkbox-state-layer-size)) / 2);width:var(--mdc-checkbox-state-layer-size);height:var(--mdc-checkbox-state-layer-size)}.mdc-checkbox .mdc-checkbox__native-control:enabled:focus:focus:not(:checked):not(:indeterminate)~.mdc-checkbox__background{border-color:var(--mdc-checkbox-unselected-focus-icon-color)}.mdc-checkbox .mdc-checkbox__native-control:enabled:focus:checked~.mdc-checkbox__background,.mdc-checkbox .mdc-checkbox__native-control:enabled:focus:indeterminate~.mdc-checkbox__background{border-color:var(--mdc-checkbox-selected-focus-icon-color);background-color:var(--mdc-checkbox-selected-focus-icon-color)}.mdc-checkbox:hover .mdc-checkbox__ripple{opacity:var(--mdc-checkbox-unselected-hover-state-layer-opacity);background-color:var(--mdc-checkbox-unselected-hover-state-layer-color)}.mdc-checkbox:hover .mat-mdc-checkbox-ripple .mat-ripple-element{background-color:var(--mdc-checkbox-unselected-hover-state-layer-color)}.mdc-checkbox .mdc-checkbox__native-control:focus~.mdc-checkbox__ripple{opacity:var(--mdc-checkbox-unselected-focus-state-layer-opacity);background-color:var(--mdc-checkbox-unselected-focus-state-layer-color)}.mdc-checkbox .mdc-checkbox__native-control:focus~.mat-mdc-checkbox-ripple .mat-ripple-element{background-color:var(--mdc-checkbox-unselected-focus-state-layer-color)}.mdc-checkbox:active .mdc-checkbox__native-control~.mdc-checkbox__ripple{opacity:var(--mdc-checkbox-unselected-pressed-state-layer-opacity);background-color:var(--mdc-checkbox-unselected-pressed-state-layer-color)}.mdc-checkbox:active .mdc-checkbox__native-control~.mat-mdc-checkbox-ripple .mat-ripple-element{background-color:var(--mdc-checkbox-unselected-pressed-state-layer-color)}.mdc-checkbox:hover .mdc-checkbox__native-control:checked~.mdc-checkbox__ripple{opacity:var(--mdc-checkbox-selected-hover-state-layer-opacity);background-color:var(--mdc-checkbox-selected-hover-state-layer-color)}.mdc-checkbox:hover .mdc-checkbox__native-control:checked~.mat-mdc-checkbox-ripple .mat-ripple-element{background-color:var(--mdc-checkbox-selected-hover-state-layer-color)}.mdc-checkbox .mdc-checkbox__native-control:focus:checked~.mdc-checkbox__ripple{opacity:var(--mdc-checkbox-selected-focus-state-layer-opacity);background-color:var(--mdc-checkbox-selected-focus-state-layer-color)}.mdc-checkbox .mdc-checkbox__native-control:focus:checked~.mat-mdc-checkbox-ripple .mat-ripple-element{background-color:var(--mdc-checkbox-selected-focus-state-layer-color)}.mdc-checkbox:active .mdc-checkbox__native-control:checked~.mdc-checkbox__ripple{opacity:var(--mdc-checkbox-selected-pressed-state-layer-opacity);background-color:var(--mdc-checkbox-selected-pressed-state-layer-color)}.mdc-checkbox:active .mdc-checkbox__native-control:checked~.mat-mdc-checkbox-ripple .mat-ripple-element{background-color:var(--mdc-checkbox-selected-pressed-state-layer-color)}.mat-mdc-checkbox{display:inline-block;position:relative;-webkit-tap-highlight-color:rgba(0,0,0,0)}.mat-mdc-checkbox .mdc-checkbox__background{-webkit-print-color-adjust:exact;color-adjust:exact}.mat-mdc-checkbox._mat-animation-noopable *,.mat-mdc-checkbox._mat-animation-noopable *::before{transition:none !important;animation:none !important}.mat-mdc-checkbox label{cursor:pointer}.mat-mdc-checkbox.mat-mdc-checkbox-disabled label{cursor:default}.mat-mdc-checkbox label:empty{display:none}.cdk-high-contrast-active .mat-mdc-checkbox.mat-mdc-checkbox-disabled{opacity:.5}.cdk-high-contrast-active .mat-mdc-checkbox .mdc-checkbox__checkmark{--mdc-checkbox-selected-checkmark-color: CanvasText;--mdc-checkbox-disabled-selected-checkmark-color: CanvasText}.mat-mdc-checkbox .mdc-checkbox__ripple{opacity:0}.mat-mdc-checkbox-ripple,.mdc-checkbox__ripple{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:50%;pointer-events:none}.mat-mdc-checkbox-ripple:not(:empty),.mdc-checkbox__ripple:not(:empty){transform:translateZ(0)}.mat-mdc-checkbox-ripple .mat-ripple-element{opacity:.1}.mat-mdc-checkbox-touch-target{position:absolute;top:50%;height:48px;left:50%;width:48px;transform:translate(-50%, -50%)}.mat-mdc-checkbox-ripple::before{border-radius:50%}.mdc-checkbox__native-control:focus~.mat-mdc-focus-indicator::before{content:\\\"\\\"}\"], dependencies: [{ kind: \"directive\", type: i1.MatRipple, selector: \"[mat-ripple], [matRipple]\", inputs: [\"matRippleColor\", \"matRippleUnbounded\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\", \"matRippleDisabled\", \"matRippleTrigger\"], exportAs: [\"matRipple\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatCheckbox, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-checkbox', host: {\n                        'class': 'mat-mdc-checkbox',\n                        '[attr.tabindex]': 'null',\n                        '[attr.aria-label]': 'null',\n                        '[attr.aria-labelledby]': 'null',\n                        '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n                        '[class.mdc-checkbox--disabled]': 'disabled',\n                        '[id]': 'id',\n                        // Add classes that users can use to more easily target disabled or checked checkboxes.\n                        '[class.mat-mdc-checkbox-disabled]': 'disabled',\n                        '[class.mat-mdc-checkbox-checked]': 'checked',\n                        '[class]': 'color ? \"mat-\" + color : \"mat-accent\"',\n                    }, providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR], exportAs: 'matCheckbox', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: \"<div class=\\\"mdc-form-field\\\"\\n     [class.mdc-form-field--align-end]=\\\"labelPosition == 'before'\\\"\\n     (click)=\\\"_preventBubblingFromLabel($event)\\\">\\n  <div #checkbox class=\\\"mdc-checkbox\\\">\\n    <!-- Render this element first so the input is on top. -->\\n    <div class=\\\"mat-mdc-checkbox-touch-target\\\" (click)=\\\"_onTouchTargetClick()\\\"></div>\\n    <input #input\\n           type=\\\"checkbox\\\"\\n           class=\\\"mdc-checkbox__native-control\\\"\\n           [class.mdc-checkbox--selected]=\\\"checked\\\"\\n           [attr.aria-label]=\\\"ariaLabel || null\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n           [attr.aria-checked]=\\\"indeterminate ? 'mixed' : null\\\"\\n           [attr.name]=\\\"name\\\"\\n           [attr.value]=\\\"value\\\"\\n           [checked]=\\\"checked\\\"\\n           [indeterminate]=\\\"indeterminate\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [tabIndex]=\\\"disabled ? -1 : tabIndex\\\"\\n           (blur)=\\\"_onBlur()\\\"\\n           (click)=\\\"_onInputClick()\\\"\\n           (change)=\\\"_onInteractionEvent($event)\\\"/>\\n    <div class=\\\"mdc-checkbox__ripple\\\"></div>\\n    <div class=\\\"mdc-checkbox__background\\\">\\n      <svg class=\\\"mdc-checkbox__checkmark\\\"\\n           focusable=\\\"false\\\"\\n           viewBox=\\\"0 0 24 24\\\"\\n           aria-hidden=\\\"true\\\">\\n        <path class=\\\"mdc-checkbox__checkmark-path\\\"\\n              fill=\\\"none\\\"\\n              d=\\\"M1.73,12.91 8.1,19.28 22.79,4.59\\\"/>\\n      </svg>\\n      <div class=\\\"mdc-checkbox__mixedmark\\\"></div>\\n    </div>\\n    <div class=\\\"mat-mdc-checkbox-ripple mat-mdc-focus-indicator\\\" mat-ripple\\n      [matRippleTrigger]=\\\"checkbox\\\"\\n      [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n      [matRippleCentered]=\\\"true\\\"></div>\\n  </div>\\n  <!--\\n    Avoid putting a click handler on the <label/> to fix duplicate navigation stop on Talk Back\\n    (#14385). Putting a click handler on the <label/> caused this bug because the browser produced\\n    an unnecessary accessibility tree node.\\n  -->\\n  <label class=\\\"mdc-label\\\"\\n         #label\\n         [for]=\\\"inputId\\\">\\n    <ng-content></ng-content>\\n  </label>\\n</div>\\n\", styles: [\".mdc-touch-target-wrapper{display:inline}@keyframes mdc-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:29.7833385}50%{animation-timing-function:cubic-bezier(0, 0, 0.2, 1)}100%{stroke-dashoffset:0}}@keyframes mdc-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0, 0, 0, 1)}100%{transform:scaleX(1)}}@keyframes mdc-checkbox-checked-unchecked-checkmark-path{from{animation-timing-function:cubic-bezier(0.4, 0, 1, 1);opacity:1;stroke-dashoffset:0}to{opacity:0;stroke-dashoffset:-29.7833385}}@keyframes mdc-checkbox-checked-indeterminate-checkmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 1);transform:rotate(0deg);opacity:1}to{transform:rotate(45deg);opacity:0}}@keyframes mdc-checkbox-indeterminate-checked-checkmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);transform:rotate(45deg);opacity:0}to{transform:rotate(360deg);opacity:1}}@keyframes mdc-checkbox-checked-indeterminate-mixedmark{from{animation-timing-function:mdc-animation-deceleration-curve-timing-function;transform:rotate(-45deg);opacity:0}to{transform:rotate(0deg);opacity:1}}@keyframes mdc-checkbox-indeterminate-checked-mixedmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);transform:rotate(0deg);opacity:1}to{transform:rotate(315deg);opacity:0}}@keyframes mdc-checkbox-indeterminate-unchecked-mixedmark{0%{animation-timing-function:linear;transform:scaleX(1);opacity:1}32.8%,100%{transform:scaleX(0);opacity:0}}.mdc-checkbox{display:inline-block;position:relative;flex:0 0 18px;box-sizing:content-box;width:18px;height:18px;line-height:0;white-space:nowrap;cursor:pointer;vertical-align:bottom}.mdc-checkbox[hidden]{display:none}.mdc-checkbox.mdc-ripple-upgraded--background-focused .mdc-checkbox__focus-ring,.mdc-checkbox:not(.mdc-ripple-upgraded):focus .mdc-checkbox__focus-ring{pointer-events:none;border:2px solid rgba(0,0,0,0);border-radius:6px;box-sizing:content-box;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%);height:100%;width:100%}@media screen and (forced-colors: active){.mdc-checkbox.mdc-ripple-upgraded--background-focused .mdc-checkbox__focus-ring,.mdc-checkbox:not(.mdc-ripple-upgraded):focus .mdc-checkbox__focus-ring{border-color:CanvasText}}.mdc-checkbox.mdc-ripple-upgraded--background-focused .mdc-checkbox__focus-ring::after,.mdc-checkbox:not(.mdc-ripple-upgraded):focus .mdc-checkbox__focus-ring::after{content:\\\"\\\";border:2px solid rgba(0,0,0,0);border-radius:8px;display:block;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%);height:calc(100% + 4px);width:calc(100% + 4px)}@media screen and (forced-colors: active){.mdc-checkbox.mdc-ripple-upgraded--background-focused .mdc-checkbox__focus-ring::after,.mdc-checkbox:not(.mdc-ripple-upgraded):focus .mdc-checkbox__focus-ring::after{border-color:CanvasText}}@media all and (-ms-high-contrast: none){.mdc-checkbox .mdc-checkbox__focus-ring{display:none}}@media screen and (forced-colors: active),(-ms-high-contrast: active){.mdc-checkbox__mixedmark{margin:0 1px}}.mdc-checkbox--disabled{cursor:default;pointer-events:none}.mdc-checkbox__background{display:inline-flex;position:absolute;align-items:center;justify-content:center;box-sizing:border-box;width:18px;height:18px;border:2px solid currentColor;border-radius:2px;background-color:rgba(0,0,0,0);pointer-events:none;will-change:background-color,border-color;transition:background-color 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1),border-color 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1)}.mdc-checkbox__checkmark{position:absolute;top:0;right:0;bottom:0;left:0;width:100%;opacity:0;transition:opacity 180ms 0ms cubic-bezier(0.4, 0, 0.6, 1)}.mdc-checkbox--upgraded .mdc-checkbox__checkmark{opacity:1}.mdc-checkbox__checkmark-path{transition:stroke-dashoffset 180ms 0ms cubic-bezier(0.4, 0, 0.6, 1);stroke:currentColor;stroke-width:3.12px;stroke-dashoffset:29.7833385;stroke-dasharray:29.7833385}.mdc-checkbox__mixedmark{width:100%;height:0;transform:scaleX(0) rotate(0deg);border-width:1px;border-style:solid;opacity:0;transition:opacity 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1),transform 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1)}.mdc-checkbox--anim-unchecked-checked .mdc-checkbox__background,.mdc-checkbox--anim-unchecked-indeterminate .mdc-checkbox__background,.mdc-checkbox--anim-checked-unchecked .mdc-checkbox__background,.mdc-checkbox--anim-indeterminate-unchecked .mdc-checkbox__background{animation-duration:180ms;animation-timing-function:linear}.mdc-checkbox--anim-unchecked-checked .mdc-checkbox__checkmark-path{animation:mdc-checkbox-unchecked-checked-checkmark-path 180ms linear 0s;transition:none}.mdc-checkbox--anim-unchecked-indeterminate .mdc-checkbox__mixedmark{animation:mdc-checkbox-unchecked-indeterminate-mixedmark 90ms linear 0s;transition:none}.mdc-checkbox--anim-checked-unchecked .mdc-checkbox__checkmark-path{animation:mdc-checkbox-checked-unchecked-checkmark-path 90ms linear 0s;transition:none}.mdc-checkbox--anim-checked-indeterminate .mdc-checkbox__checkmark{animation:mdc-checkbox-checked-indeterminate-checkmark 90ms linear 0s;transition:none}.mdc-checkbox--anim-checked-indeterminate .mdc-checkbox__mixedmark{animation:mdc-checkbox-checked-indeterminate-mixedmark 90ms linear 0s;transition:none}.mdc-checkbox--anim-indeterminate-checked .mdc-checkbox__checkmark{animation:mdc-checkbox-indeterminate-checked-checkmark 500ms linear 0s;transition:none}.mdc-checkbox--anim-indeterminate-checked .mdc-checkbox__mixedmark{animation:mdc-checkbox-indeterminate-checked-mixedmark 500ms linear 0s;transition:none}.mdc-checkbox--anim-indeterminate-unchecked .mdc-checkbox__mixedmark{animation:mdc-checkbox-indeterminate-unchecked-mixedmark 300ms linear 0s;transition:none}.mdc-checkbox__native-control:checked~.mdc-checkbox__background,.mdc-checkbox__native-control:indeterminate~.mdc-checkbox__background,.mdc-checkbox__native-control[data-indeterminate=true]~.mdc-checkbox__background{transition:border-color 90ms 0ms cubic-bezier(0, 0, 0.2, 1),background-color 90ms 0ms cubic-bezier(0, 0, 0.2, 1)}.mdc-checkbox__native-control:checked~.mdc-checkbox__background .mdc-checkbox__checkmark-path,.mdc-checkbox__native-control:indeterminate~.mdc-checkbox__background .mdc-checkbox__checkmark-path,.mdc-checkbox__native-control[data-indeterminate=true]~.mdc-checkbox__background .mdc-checkbox__checkmark-path{stroke-dashoffset:0}.mdc-checkbox__native-control{position:absolute;margin:0;padding:0;opacity:0;cursor:inherit}.mdc-checkbox__native-control:disabled{cursor:default;pointer-events:none}.mdc-checkbox--touch{margin:calc((var(--mdc-checkbox-state-layer-size) - var(--mdc-checkbox-state-layer-size)) / 2)}.mdc-checkbox--touch .mdc-checkbox__native-control{top:calc((var(--mdc-checkbox-state-layer-size) - var(--mdc-checkbox-state-layer-size)) / 2);right:calc((var(--mdc-checkbox-state-layer-size) - var(--mdc-checkbox-state-layer-size)) / 2);left:calc((var(--mdc-checkbox-state-layer-size) - var(--mdc-checkbox-state-layer-size)) / 2);width:var(--mdc-checkbox-state-layer-size);height:var(--mdc-checkbox-state-layer-size)}.mdc-checkbox__native-control:checked~.mdc-checkbox__background .mdc-checkbox__checkmark{transition:opacity 180ms 0ms cubic-bezier(0, 0, 0.2, 1),transform 180ms 0ms cubic-bezier(0, 0, 0.2, 1);opacity:1}.mdc-checkbox__native-control:checked~.mdc-checkbox__background .mdc-checkbox__mixedmark{transform:scaleX(1) rotate(-45deg)}.mdc-checkbox__native-control:indeterminate~.mdc-checkbox__background .mdc-checkbox__checkmark,.mdc-checkbox__native-control[data-indeterminate=true]~.mdc-checkbox__background .mdc-checkbox__checkmark{transform:rotate(45deg);opacity:0;transition:opacity 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1),transform 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1)}.mdc-checkbox__native-control:indeterminate~.mdc-checkbox__background .mdc-checkbox__mixedmark,.mdc-checkbox__native-control[data-indeterminate=true]~.mdc-checkbox__background .mdc-checkbox__mixedmark{transform:scaleX(1) rotate(0deg);opacity:1}.mdc-checkbox.mdc-checkbox--upgraded .mdc-checkbox__background,.mdc-checkbox.mdc-checkbox--upgraded .mdc-checkbox__checkmark,.mdc-checkbox.mdc-checkbox--upgraded .mdc-checkbox__checkmark-path,.mdc-checkbox.mdc-checkbox--upgraded .mdc-checkbox__mixedmark{transition:none}.mdc-form-field{display:inline-flex;align-items:center;vertical-align:middle}.mdc-form-field[hidden]{display:none}.mdc-form-field>label{margin-left:0;margin-right:auto;padding-left:4px;padding-right:0;order:0}[dir=rtl] .mdc-form-field>label,.mdc-form-field>label[dir=rtl]{margin-left:auto;margin-right:0}[dir=rtl] .mdc-form-field>label,.mdc-form-field>label[dir=rtl]{padding-left:0;padding-right:4px}.mdc-form-field--nowrap>label{text-overflow:ellipsis;overflow:hidden;white-space:nowrap}.mdc-form-field--align-end>label{margin-left:auto;margin-right:0;padding-left:0;padding-right:4px;order:-1}[dir=rtl] .mdc-form-field--align-end>label,.mdc-form-field--align-end>label[dir=rtl]{margin-left:0;margin-right:auto}[dir=rtl] .mdc-form-field--align-end>label,.mdc-form-field--align-end>label[dir=rtl]{padding-left:4px;padding-right:0}.mdc-form-field--space-between{justify-content:space-between}.mdc-form-field--space-between>label{margin:0}[dir=rtl] .mdc-form-field--space-between>label,.mdc-form-field--space-between>label[dir=rtl]{margin:0}.mdc-checkbox{padding:calc((var(--mdc-checkbox-state-layer-size) - 18px) / 2);margin:calc((var(--mdc-checkbox-state-layer-size) - var(--mdc-checkbox-state-layer-size)) / 2)}.mdc-checkbox .mdc-checkbox__native-control[disabled]:not(:checked):not(:indeterminate):not([data-indeterminate=true])~.mdc-checkbox__background{border-color:var(--mdc-checkbox-disabled-unselected-icon-color);background-color:transparent}.mdc-checkbox .mdc-checkbox__native-control[disabled]:checked~.mdc-checkbox__background,.mdc-checkbox .mdc-checkbox__native-control[disabled]:indeterminate~.mdc-checkbox__background,.mdc-checkbox .mdc-checkbox__native-control[data-indeterminate=true][disabled]~.mdc-checkbox__background{border-color:transparent;background-color:var(--mdc-checkbox-disabled-selected-icon-color)}.mdc-checkbox .mdc-checkbox__native-control:enabled~.mdc-checkbox__background .mdc-checkbox__checkmark{color:var(--mdc-checkbox-selected-checkmark-color)}.mdc-checkbox .mdc-checkbox__native-control:enabled~.mdc-checkbox__background .mdc-checkbox__mixedmark{border-color:var(--mdc-checkbox-selected-checkmark-color)}.mdc-checkbox .mdc-checkbox__native-control:disabled~.mdc-checkbox__background .mdc-checkbox__checkmark{color:var(--mdc-checkbox-disabled-selected-checkmark-color)}.mdc-checkbox .mdc-checkbox__native-control:disabled~.mdc-checkbox__background .mdc-checkbox__mixedmark{border-color:var(--mdc-checkbox-disabled-selected-checkmark-color)}.mdc-checkbox .mdc-checkbox__native-control:enabled:not(:checked):not(:indeterminate):not([data-indeterminate=true])~.mdc-checkbox__background{border-color:var(--mdc-checkbox-unselected-icon-color);background-color:transparent}.mdc-checkbox .mdc-checkbox__native-control:enabled:checked~.mdc-checkbox__background,.mdc-checkbox .mdc-checkbox__native-control:enabled:indeterminate~.mdc-checkbox__background,.mdc-checkbox .mdc-checkbox__native-control[data-indeterminate=true]:enabled~.mdc-checkbox__background{border-color:var(--mdc-checkbox-selected-icon-color);background-color:var(--mdc-checkbox-selected-icon-color)}@keyframes mdc-checkbox-fade-in-background-8A000000FFF4433600000000FFF44336{0%{border-color:var(--mdc-checkbox-unselected-icon-color);background-color:transparent}50%{border-color:var(--mdc-checkbox-selected-icon-color);background-color:var(--mdc-checkbox-selected-icon-color)}}@keyframes mdc-checkbox-fade-out-background-8A000000FFF4433600000000FFF44336{0%,80%{border-color:var(--mdc-checkbox-selected-icon-color);background-color:var(--mdc-checkbox-selected-icon-color)}100%{border-color:var(--mdc-checkbox-unselected-icon-color);background-color:transparent}}.mdc-checkbox.mdc-checkbox--anim-unchecked-checked .mdc-checkbox__native-control:enabled~.mdc-checkbox__background,.mdc-checkbox.mdc-checkbox--anim-unchecked-indeterminate .mdc-checkbox__native-control:enabled~.mdc-checkbox__background{animation-name:mdc-checkbox-fade-in-background-8A000000FFF4433600000000FFF44336}.mdc-checkbox.mdc-checkbox--anim-checked-unchecked .mdc-checkbox__native-control:enabled~.mdc-checkbox__background,.mdc-checkbox.mdc-checkbox--anim-indeterminate-unchecked .mdc-checkbox__native-control:enabled~.mdc-checkbox__background{animation-name:mdc-checkbox-fade-out-background-8A000000FFF4433600000000FFF44336}.mdc-checkbox:hover .mdc-checkbox__native-control:enabled:not(:checked):not(:indeterminate):not([data-indeterminate=true])~.mdc-checkbox__background{border-color:var(--mdc-checkbox-unselected-hover-icon-color);background-color:transparent}.mdc-checkbox:hover .mdc-checkbox__native-control:enabled:checked~.mdc-checkbox__background,.mdc-checkbox:hover .mdc-checkbox__native-control:enabled:indeterminate~.mdc-checkbox__background,.mdc-checkbox:hover .mdc-checkbox__native-control[data-indeterminate=true]:enabled~.mdc-checkbox__background{border-color:var(--mdc-checkbox-selected-hover-icon-color);background-color:var(--mdc-checkbox-selected-hover-icon-color)}@keyframes mdc-checkbox-fade-in-background-FF212121FFF4433600000000FFF44336{0%{border-color:var(--mdc-checkbox-unselected-hover-icon-color);background-color:transparent}50%{border-color:var(--mdc-checkbox-selected-hover-icon-color);background-color:var(--mdc-checkbox-selected-hover-icon-color)}}@keyframes mdc-checkbox-fade-out-background-FF212121FFF4433600000000FFF44336{0%,80%{border-color:var(--mdc-checkbox-selected-hover-icon-color);background-color:var(--mdc-checkbox-selected-hover-icon-color)}100%{border-color:var(--mdc-checkbox-unselected-hover-icon-color);background-color:transparent}}.mdc-checkbox:hover.mdc-checkbox--anim-unchecked-checked .mdc-checkbox__native-control:enabled~.mdc-checkbox__background,.mdc-checkbox:hover.mdc-checkbox--anim-unchecked-indeterminate .mdc-checkbox__native-control:enabled~.mdc-checkbox__background{animation-name:mdc-checkbox-fade-in-background-FF212121FFF4433600000000FFF44336}.mdc-checkbox:hover.mdc-checkbox--anim-checked-unchecked .mdc-checkbox__native-control:enabled~.mdc-checkbox__background,.mdc-checkbox:hover.mdc-checkbox--anim-indeterminate-unchecked .mdc-checkbox__native-control:enabled~.mdc-checkbox__background{animation-name:mdc-checkbox-fade-out-background-FF212121FFF4433600000000FFF44336}.mdc-checkbox:not(:disabled):active .mdc-checkbox__native-control:enabled:not(:checked):not(:indeterminate):not([data-indeterminate=true])~.mdc-checkbox__background{border-color:var(--mdc-checkbox-unselected-pressed-icon-color);background-color:transparent}.mdc-checkbox:not(:disabled):active .mdc-checkbox__native-control:enabled:checked~.mdc-checkbox__background,.mdc-checkbox:not(:disabled):active .mdc-checkbox__native-control:enabled:indeterminate~.mdc-checkbox__background,.mdc-checkbox:not(:disabled):active .mdc-checkbox__native-control[data-indeterminate=true]:enabled~.mdc-checkbox__background{border-color:var(--mdc-checkbox-selected-pressed-icon-color);background-color:var(--mdc-checkbox-selected-pressed-icon-color)}@keyframes mdc-checkbox-fade-in-background-8A000000FFF4433600000000FFF44336{0%{border-color:var(--mdc-checkbox-unselected-pressed-icon-color);background-color:transparent}50%{border-color:var(--mdc-checkbox-selected-pressed-icon-color);background-color:var(--mdc-checkbox-selected-pressed-icon-color)}}@keyframes mdc-checkbox-fade-out-background-8A000000FFF4433600000000FFF44336{0%,80%{border-color:var(--mdc-checkbox-selected-pressed-icon-color);background-color:var(--mdc-checkbox-selected-pressed-icon-color)}100%{border-color:var(--mdc-checkbox-unselected-pressed-icon-color);background-color:transparent}}.mdc-checkbox:not(:disabled):active.mdc-checkbox--anim-unchecked-checked .mdc-checkbox__native-control:enabled~.mdc-checkbox__background,.mdc-checkbox:not(:disabled):active.mdc-checkbox--anim-unchecked-indeterminate .mdc-checkbox__native-control:enabled~.mdc-checkbox__background{animation-name:mdc-checkbox-fade-in-background-8A000000FFF4433600000000FFF44336}.mdc-checkbox:not(:disabled):active.mdc-checkbox--anim-checked-unchecked .mdc-checkbox__native-control:enabled~.mdc-checkbox__background,.mdc-checkbox:not(:disabled):active.mdc-checkbox--anim-indeterminate-unchecked .mdc-checkbox__native-control:enabled~.mdc-checkbox__background{animation-name:mdc-checkbox-fade-out-background-8A000000FFF4433600000000FFF44336}.mdc-checkbox .mdc-checkbox__background{top:calc((var(--mdc-checkbox-state-layer-size) - 18px) / 2);left:calc((var(--mdc-checkbox-state-layer-size) - 18px) / 2)}.mdc-checkbox .mdc-checkbox__native-control{top:calc((var(--mdc-checkbox-state-layer-size) - var(--mdc-checkbox-state-layer-size)) / 2);right:calc((var(--mdc-checkbox-state-layer-size) - var(--mdc-checkbox-state-layer-size)) / 2);left:calc((var(--mdc-checkbox-state-layer-size) - var(--mdc-checkbox-state-layer-size)) / 2);width:var(--mdc-checkbox-state-layer-size);height:var(--mdc-checkbox-state-layer-size)}.mdc-checkbox .mdc-checkbox__native-control:enabled:focus:focus:not(:checked):not(:indeterminate)~.mdc-checkbox__background{border-color:var(--mdc-checkbox-unselected-focus-icon-color)}.mdc-checkbox .mdc-checkbox__native-control:enabled:focus:checked~.mdc-checkbox__background,.mdc-checkbox .mdc-checkbox__native-control:enabled:focus:indeterminate~.mdc-checkbox__background{border-color:var(--mdc-checkbox-selected-focus-icon-color);background-color:var(--mdc-checkbox-selected-focus-icon-color)}.mdc-checkbox:hover .mdc-checkbox__ripple{opacity:var(--mdc-checkbox-unselected-hover-state-layer-opacity);background-color:var(--mdc-checkbox-unselected-hover-state-layer-color)}.mdc-checkbox:hover .mat-mdc-checkbox-ripple .mat-ripple-element{background-color:var(--mdc-checkbox-unselected-hover-state-layer-color)}.mdc-checkbox .mdc-checkbox__native-control:focus~.mdc-checkbox__ripple{opacity:var(--mdc-checkbox-unselected-focus-state-layer-opacity);background-color:var(--mdc-checkbox-unselected-focus-state-layer-color)}.mdc-checkbox .mdc-checkbox__native-control:focus~.mat-mdc-checkbox-ripple .mat-ripple-element{background-color:var(--mdc-checkbox-unselected-focus-state-layer-color)}.mdc-checkbox:active .mdc-checkbox__native-control~.mdc-checkbox__ripple{opacity:var(--mdc-checkbox-unselected-pressed-state-layer-opacity);background-color:var(--mdc-checkbox-unselected-pressed-state-layer-color)}.mdc-checkbox:active .mdc-checkbox__native-control~.mat-mdc-checkbox-ripple .mat-ripple-element{background-color:var(--mdc-checkbox-unselected-pressed-state-layer-color)}.mdc-checkbox:hover .mdc-checkbox__native-control:checked~.mdc-checkbox__ripple{opacity:var(--mdc-checkbox-selected-hover-state-layer-opacity);background-color:var(--mdc-checkbox-selected-hover-state-layer-color)}.mdc-checkbox:hover .mdc-checkbox__native-control:checked~.mat-mdc-checkbox-ripple .mat-ripple-element{background-color:var(--mdc-checkbox-selected-hover-state-layer-color)}.mdc-checkbox .mdc-checkbox__native-control:focus:checked~.mdc-checkbox__ripple{opacity:var(--mdc-checkbox-selected-focus-state-layer-opacity);background-color:var(--mdc-checkbox-selected-focus-state-layer-color)}.mdc-checkbox .mdc-checkbox__native-control:focus:checked~.mat-mdc-checkbox-ripple .mat-ripple-element{background-color:var(--mdc-checkbox-selected-focus-state-layer-color)}.mdc-checkbox:active .mdc-checkbox__native-control:checked~.mdc-checkbox__ripple{opacity:var(--mdc-checkbox-selected-pressed-state-layer-opacity);background-color:var(--mdc-checkbox-selected-pressed-state-layer-color)}.mdc-checkbox:active .mdc-checkbox__native-control:checked~.mat-mdc-checkbox-ripple .mat-ripple-element{background-color:var(--mdc-checkbox-selected-pressed-state-layer-color)}.mat-mdc-checkbox{display:inline-block;position:relative;-webkit-tap-highlight-color:rgba(0,0,0,0)}.mat-mdc-checkbox .mdc-checkbox__background{-webkit-print-color-adjust:exact;color-adjust:exact}.mat-mdc-checkbox._mat-animation-noopable *,.mat-mdc-checkbox._mat-animation-noopable *::before{transition:none !important;animation:none !important}.mat-mdc-checkbox label{cursor:pointer}.mat-mdc-checkbox.mat-mdc-checkbox-disabled label{cursor:default}.mat-mdc-checkbox label:empty{display:none}.cdk-high-contrast-active .mat-mdc-checkbox.mat-mdc-checkbox-disabled{opacity:.5}.cdk-high-contrast-active .mat-mdc-checkbox .mdc-checkbox__checkmark{--mdc-checkbox-selected-checkmark-color: CanvasText;--mdc-checkbox-disabled-selected-checkmark-color: CanvasText}.mat-mdc-checkbox .mdc-checkbox__ripple{opacity:0}.mat-mdc-checkbox-ripple,.mdc-checkbox__ripple{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:50%;pointer-events:none}.mat-mdc-checkbox-ripple:not(:empty),.mdc-checkbox__ripple:not(:empty){transform:translateZ(0)}.mat-mdc-checkbox-ripple .mat-ripple-element{opacity:.1}.mat-mdc-checkbox-touch-target{position:absolute;top:50%;height:48px;left:50%;width:48px;transform:translate(-50%, -50%)}.mat-mdc-checkbox-ripple::before{border-radius:50%}.mdc-checkbox__native-control:focus~.mat-mdc-focus-indicator::before{content:\\\"\\\"}\"] }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Attribute,\n                    args: ['tabindex']\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_CHECKBOX_DEFAULT_OPTIONS]\n                }] }], propDecorators: { ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], ariaDescribedby: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], id: [{\n                type: Input\n            }], required: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], labelPosition: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], change: [{\n                type: Output\n            }], indeterminateChange: [{\n                type: Output\n            }], value: [{\n                type: Input\n            }], disableRipple: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], _inputElement: [{\n                type: ViewChild,\n                args: ['input']\n            }], _labelElement: [{\n                type: ViewChild,\n                args: ['label']\n            }], tabIndex: [{\n                type: Input,\n                args: [{ transform: (value) => (value == null ? undefined : numberAttribute(value)) }]\n            }], color: [{\n                type: Input\n            }], ripple: [{\n                type: ViewChild,\n                args: [MatRipple]\n            }], checked: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], disabled: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], indeterminate: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }] } });\n\nconst MAT_CHECKBOX_REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n    multi: true,\n};\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\nclass MatCheckboxRequiredValidator extends CheckboxRequiredValidator {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatCheckboxRequiredValidator, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.0.4\", type: MatCheckboxRequiredValidator, selector: \"mat-checkbox[required][formControlName],\\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]\", providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatCheckboxRequiredValidator, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n                    providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n                }]\n        }] });\n\n/** This module is used by both original and MDC-based checkbox implementations. */\nclass _MatCheckboxRequiredValidatorModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: _MatCheckboxRequiredValidatorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.0.4\", ngImport: i0, type: _MatCheckboxRequiredValidatorModule, declarations: [MatCheckboxRequiredValidator], exports: [MatCheckboxRequiredValidator] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: _MatCheckboxRequiredValidatorModule }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: _MatCheckboxRequiredValidatorModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [MatCheckboxRequiredValidator],\n                    declarations: [MatCheckboxRequiredValidator],\n                }]\n        }] });\nclass MatCheckboxModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatCheckboxModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.0.4\", ngImport: i0, type: MatCheckboxModule, declarations: [MatCheckbox], imports: [MatCommonModule, MatRippleModule, _MatCheckboxRequiredValidatorModule], exports: [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatCheckboxModule, imports: [MatCommonModule, MatRippleModule, _MatCheckboxRequiredValidatorModule, MatCommonModule, _MatCheckboxRequiredValidatorModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatCheckboxModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule, MatRippleModule, _MatCheckboxRequiredValidatorModule],\n                    exports: [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule],\n                    declarations: [MatCheckbox],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR, MAT_CHECKBOX_DEFAULT_OPTIONS, MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY, MAT_CHECKBOX_REQUIRED_VALIDATOR, MatCheckbox, MatCheckboxChange, MatCheckboxModule, MatCheckboxRequiredValidator, _MatCheckboxRequiredValidatorModule };\n"],"names":["animate","style","transition","trigger","fadeInUpAnimation","duration","transform","opacity","fadeInUp400ms","ReactiveFormsModule","Validators","RouterLink","MatSnackBarModule","MatCheckboxModule","MatIconModule","MatTooltipModule","MatButtonModule","NgIf","MatInputModule","MatFormFieldModule","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement","LoginComponent","constructor","router","fb","cd","snackbar","form","group","email","required","password","inputType","visible","send","navigate","open","toggleVisibility","markForCheck","_","ɵɵdirectiveInject","i1","Router","i2","FormBuilder","ChangeDetectorRef","i3","MatSnackBar","_2","selectors","standalone","features","ɵɵStandaloneFeature","decls","vars","consts","template","LoginComponent_Template","rf","ctx","ɵɵtemplate","LoginComponent_mat_error_16_Template","ɵɵlistener","LoginComponent_Template_button_click_21_listener","LoginComponent_mat_icon_22_Template","LoginComponent_mat_icon_23_Template","LoginComponent_mat_error_26_Template","LoginComponent_Template_button_click_32_listener","ɵɵadvance","ɵɵproperty","undefined","controls","hasError","ɵɵpureFunction0","_c0","_c1","DefaultValueAccessor","NgControlStatus","NgControlStatusGroup","RequiredValidator","FormGroupDirective","FormControlName","i4","MatFormField","MatLabel","MatHint","MatError","MatSuffix","i5","MatInput","i6","MatButton","MatIconButton","i7","MatTooltip","i8","MatIcon","i9","MatCheckbox","styles","data","animation","changeDetection","InjectionToken","forwardRef","EventEmitter","booleanAttribute","numberAttribute","Component","ViewEncapsulation","ChangeDetectionStrategy","Attribute","Optional","Inject","Input","Output","ViewChild","Directive","NgModule","NG_VALUE_ACCESSOR","NG_VALIDATORS","CheckboxRequiredValidator","MatRipple","MatCommonModule","MatRippleModule","ANIMATION_MODULE_TYPE","_c2","MAT_CHECKBOX_DEFAULT_OPTIONS","providedIn","factory","MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY","color","clickAction","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","provide","useExisting","multi","MatCheckboxChange","nextUniqueId","defaults","focus","_inputElement","nativeElement","_createChangeEvent","isChecked","event","source","checked","_getAnimationTargetElement","inputId","id","_uniqueId","_elementRef","_changeDetectorRef","_ngZone","tabIndex","_animationMode","_options","_animationClasses","uncheckedToChecked","uncheckedToIndeterminate","checkedToUnchecked","checkedToIndeterminate","indeterminateToChecked","indeterminateToUnchecked","ariaLabel","ariaLabelledby","labelPosition","name","change","indeterminateChange","_onTouched","_currentAnimationClass","_currentCheckState","_controlValueAccessorChangeFn","_checked","_disabled","_indeterminate","parseInt","ngAfterViewInit","_syncIndeterminate","value","disabled","indeterminate","changed","_transitionCheckState","emit","_isRippleDisabled","disableRipple","_onLabelTextChange","detectChanges","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","newState","oldState","element","classList","remove","_getAnimationClassForCheckStateTransition","length","add","animationClass","runOutsideAngular","setTimeout","_emitChangeEvent","toggle","_handleInputClick","Promise","resolve","then","_onInteractionEvent","stopPropagation","_onBlur","nativeCheckbox","_onInputClick","_onTouchTargetClick","_preventBubblingFromLabel","target","_labelElement","contains","ɵfac","MatCheckbox_Factory","t","ElementRef","NgZone","ɵɵinjectAttribute","ɵcmp","ɵɵdefineComponent","type","viewQuery","MatCheckbox_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","ripple","hostAttrs","hostVars","hostBindings","MatCheckbox_HostBindings","ɵɵhostProperty","ɵɵattribute","ɵɵclassMap","ɵɵclassProp","inputs","ariaDescribedby","outputs","exportAs","ɵɵProvidersFeature","ɵɵInputTransformsFeature","ngContentSelectors","MatCheckbox_Template","ɵɵprojectionDef","MatCheckbox_Template_div_click_0_listener","$event","MatCheckbox_Template_div_click_3_listener","MatCheckbox_Template_input_blur_4_listener","MatCheckbox_Template_input_click_4_listener","MatCheckbox_Template_input_change_4_listener","ɵɵnamespaceSVG","ɵɵnamespaceHTML","ɵɵprojection","_r0","ɵɵreference","dependencies","encapsulation","ngDevMode","ɵsetClassMetadata","args","selector","host","providers","None","OnPush","decorators","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","ɵMatCheckboxRequiredValidator_BaseFactory","MatCheckboxRequiredValidator_Factory","ɵɵgetInheritedFactory","ɵdir","ɵɵdefineDirective","ɵɵInheritDefinitionFeature","_MatCheckboxRequiredValidatorModule","_MatCheckboxRequiredValidatorModule_Factory","ɵmod","ɵɵdefineNgModule","_3","ɵinj","ɵɵdefineInjector","exports","declarations","MatCheckboxModule_Factory","imports"],"sourceRoot":"webpack:///","x_google_ignoreList":[3]}
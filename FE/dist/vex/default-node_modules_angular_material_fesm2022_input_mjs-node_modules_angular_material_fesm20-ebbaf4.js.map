{"version":3,"file":"default-node_modules_angular_material_fesm2022_input_mjs-node_modules_angular_material_fesm20-ebbaf4.js","mappings":"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","sources":["./node_modules/@angular/cdk/fesm2022/text-field.mjs","./node_modules/@angular/material/fesm2022/input.mjs","./node_modules/@angular/material/fesm2022/snack-bar.mjs"],"sourcesContent":["import * as i1 from '@angular/cdk/platform';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, Directive, Output, booleanAttribute, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { coerceElement, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { EMPTY, Subject, fromEvent } from 'rxjs';\nimport { auditTime, takeUntil } from 'rxjs/operators';\nimport { DOCUMENT } from '@angular/common';\n\n/** Options to pass to the animationstart listener. */\nconst listenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * An injectable service that can be used to monitor the autofill state of an input.\n * Based on the following blog post:\n * https://medium.com/@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n */\nclass AutofillMonitor {\n    constructor(_platform, _ngZone) {\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._monitoredElements = new Map();\n    }\n    monitor(elementOrRef) {\n        if (!this._platform.isBrowser) {\n            return EMPTY;\n        }\n        const element = coerceElement(elementOrRef);\n        const info = this._monitoredElements.get(element);\n        if (info) {\n            return info.subject;\n        }\n        const result = new Subject();\n        const cssClass = 'cdk-text-field-autofilled';\n        const listener = ((event) => {\n            // Animation events fire on initial element render, we check for the presence of the autofill\n            // CSS class to make sure this is a real change in state, not just the initial render before\n            // we fire off events.\n            if (event.animationName === 'cdk-text-field-autofill-start' &&\n                !element.classList.contains(cssClass)) {\n                element.classList.add(cssClass);\n                this._ngZone.run(() => result.next({ target: event.target, isAutofilled: true }));\n            }\n            else if (event.animationName === 'cdk-text-field-autofill-end' &&\n                element.classList.contains(cssClass)) {\n                element.classList.remove(cssClass);\n                this._ngZone.run(() => result.next({ target: event.target, isAutofilled: false }));\n            }\n        });\n        this._ngZone.runOutsideAngular(() => {\n            element.addEventListener('animationstart', listener, listenerOptions);\n            element.classList.add('cdk-text-field-autofill-monitored');\n        });\n        this._monitoredElements.set(element, {\n            subject: result,\n            unlisten: () => {\n                element.removeEventListener('animationstart', listener, listenerOptions);\n            },\n        });\n        return result;\n    }\n    stopMonitoring(elementOrRef) {\n        const element = coerceElement(elementOrRef);\n        const info = this._monitoredElements.get(element);\n        if (info) {\n            info.unlisten();\n            info.subject.complete();\n            element.classList.remove('cdk-text-field-autofill-monitored');\n            element.classList.remove('cdk-text-field-autofilled');\n            this._monitoredElements.delete(element);\n        }\n    }\n    ngOnDestroy() {\n        this._monitoredElements.forEach((_info, element) => this.stopMonitoring(element));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: AutofillMonitor, deps: [{ token: i1.Platform }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: AutofillMonitor, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: AutofillMonitor, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: i1.Platform }, { type: i0.NgZone }] });\n/** A directive that can be used to monitor the autofill state of an input. */\nclass CdkAutofill {\n    constructor(_elementRef, _autofillMonitor) {\n        this._elementRef = _elementRef;\n        this._autofillMonitor = _autofillMonitor;\n        /** Emits when the autofill state of the element changes. */\n        this.cdkAutofill = new EventEmitter();\n    }\n    ngOnInit() {\n        this._autofillMonitor\n            .monitor(this._elementRef)\n            .subscribe(event => this.cdkAutofill.emit(event));\n    }\n    ngOnDestroy() {\n        this._autofillMonitor.stopMonitoring(this._elementRef);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: CdkAutofill, deps: [{ token: i0.ElementRef }, { token: AutofillMonitor }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.0.4\", type: CdkAutofill, selector: \"[cdkAutofill]\", outputs: { cdkAutofill: \"cdkAutofill\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: CdkAutofill, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkAutofill]',\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: AutofillMonitor }], propDecorators: { cdkAutofill: [{\n                type: Output\n            }] } });\n\n/** Directive to automatically resize a textarea to fit its content. */\nclass CdkTextareaAutosize {\n    /** Minimum amount of rows in the textarea. */\n    get minRows() {\n        return this._minRows;\n    }\n    set minRows(value) {\n        this._minRows = coerceNumberProperty(value);\n        this._setMinHeight();\n    }\n    /** Maximum amount of rows in the textarea. */\n    get maxRows() {\n        return this._maxRows;\n    }\n    set maxRows(value) {\n        this._maxRows = coerceNumberProperty(value);\n        this._setMaxHeight();\n    }\n    /** Whether autosizing is enabled or not */\n    get enabled() {\n        return this._enabled;\n    }\n    set enabled(value) {\n        // Only act if the actual value changed. This specifically helps to not run\n        // resizeToFitContent too early (i.e. before ngAfterViewInit)\n        if (this._enabled !== value) {\n            (this._enabled = value) ? this.resizeToFitContent(true) : this.reset();\n        }\n    }\n    get placeholder() {\n        return this._textareaElement.placeholder;\n    }\n    set placeholder(value) {\n        this._cachedPlaceholderHeight = undefined;\n        if (value) {\n            this._textareaElement.setAttribute('placeholder', value);\n        }\n        else {\n            this._textareaElement.removeAttribute('placeholder');\n        }\n        this._cacheTextareaPlaceholderHeight();\n    }\n    constructor(_elementRef, _platform, _ngZone, \n    /** @breaking-change 11.0.0 make document required */\n    document) {\n        this._elementRef = _elementRef;\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._destroyed = new Subject();\n        this._enabled = true;\n        /**\n         * Value of minRows as of last resize. If the minRows has decreased, the\n         * height of the textarea needs to be recomputed to reflect the new minimum. The maxHeight\n         * does not have the same problem because it does not affect the textarea's scrollHeight.\n         */\n        this._previousMinRows = -1;\n        this._isViewInited = false;\n        /** Handles `focus` and `blur` events. */\n        this._handleFocusEvent = (event) => {\n            this._hasFocus = event.type === 'focus';\n        };\n        this._document = document;\n        this._textareaElement = this._elementRef.nativeElement;\n    }\n    /** Sets the minimum height of the textarea as determined by minRows. */\n    _setMinHeight() {\n        const minHeight = this.minRows && this._cachedLineHeight ? `${this.minRows * this._cachedLineHeight}px` : null;\n        if (minHeight) {\n            this._textareaElement.style.minHeight = minHeight;\n        }\n    }\n    /** Sets the maximum height of the textarea as determined by maxRows. */\n    _setMaxHeight() {\n        const maxHeight = this.maxRows && this._cachedLineHeight ? `${this.maxRows * this._cachedLineHeight}px` : null;\n        if (maxHeight) {\n            this._textareaElement.style.maxHeight = maxHeight;\n        }\n    }\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            // Remember the height which we started with in case autosizing is disabled\n            this._initialHeight = this._textareaElement.style.height;\n            this.resizeToFitContent();\n            this._ngZone.runOutsideAngular(() => {\n                const window = this._getWindow();\n                fromEvent(window, 'resize')\n                    .pipe(auditTime(16), takeUntil(this._destroyed))\n                    .subscribe(() => this.resizeToFitContent(true));\n                this._textareaElement.addEventListener('focus', this._handleFocusEvent);\n                this._textareaElement.addEventListener('blur', this._handleFocusEvent);\n            });\n            this._isViewInited = true;\n            this.resizeToFitContent(true);\n        }\n    }\n    ngOnDestroy() {\n        this._textareaElement.removeEventListener('focus', this._handleFocusEvent);\n        this._textareaElement.removeEventListener('blur', this._handleFocusEvent);\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Cache the height of a single-row textarea if it has not already been cached.\n     *\n     * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n     * maxRows. For the initial version, we will assume that the height of a single line in the\n     * textarea does not ever change.\n     */\n    _cacheTextareaLineHeight() {\n        if (this._cachedLineHeight) {\n            return;\n        }\n        // Use a clone element because we have to override some styles.\n        let textareaClone = this._textareaElement.cloneNode(false);\n        textareaClone.rows = 1;\n        // Use `position: absolute` so that this doesn't cause a browser layout and use\n        // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n        // would affect the height.\n        textareaClone.style.position = 'absolute';\n        textareaClone.style.visibility = 'hidden';\n        textareaClone.style.border = 'none';\n        textareaClone.style.padding = '0';\n        textareaClone.style.height = '';\n        textareaClone.style.minHeight = '';\n        textareaClone.style.maxHeight = '';\n        // In Firefox it happens that textarea elements are always bigger than the specified amount\n        // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n        // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n        // to hidden. This ensures that there is no invalid calculation of the line height.\n        // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n        textareaClone.style.overflow = 'hidden';\n        this._textareaElement.parentNode.appendChild(textareaClone);\n        this._cachedLineHeight = textareaClone.clientHeight;\n        textareaClone.remove();\n        // Min and max heights have to be re-calculated if the cached line height changes\n        this._setMinHeight();\n        this._setMaxHeight();\n    }\n    _measureScrollHeight() {\n        const element = this._textareaElement;\n        const previousMargin = element.style.marginBottom || '';\n        const isFirefox = this._platform.FIREFOX;\n        const needsMarginFiller = isFirefox && this._hasFocus;\n        const measuringClass = isFirefox\n            ? 'cdk-textarea-autosize-measuring-firefox'\n            : 'cdk-textarea-autosize-measuring';\n        // In some cases the page might move around while we're measuring the `textarea` on Firefox. We\n        // work around it by assigning a temporary margin with the same height as the `textarea` so that\n        // it occupies the same amount of space. See #23233.\n        if (needsMarginFiller) {\n            element.style.marginBottom = `${element.clientHeight}px`;\n        }\n        // Reset the textarea height to auto in order to shrink back to its default size.\n        // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n        element.classList.add(measuringClass);\n        // The measuring class includes a 2px padding to workaround an issue with Chrome,\n        // so we account for that extra space here by subtracting 4 (2px top + 2px bottom).\n        const scrollHeight = element.scrollHeight - 4;\n        element.classList.remove(measuringClass);\n        if (needsMarginFiller) {\n            element.style.marginBottom = previousMargin;\n        }\n        return scrollHeight;\n    }\n    _cacheTextareaPlaceholderHeight() {\n        if (!this._isViewInited || this._cachedPlaceholderHeight != undefined) {\n            return;\n        }\n        if (!this.placeholder) {\n            this._cachedPlaceholderHeight = 0;\n            return;\n        }\n        const value = this._textareaElement.value;\n        this._textareaElement.value = this._textareaElement.placeholder;\n        this._cachedPlaceholderHeight = this._measureScrollHeight();\n        this._textareaElement.value = value;\n    }\n    ngDoCheck() {\n        if (this._platform.isBrowser) {\n            this.resizeToFitContent();\n        }\n    }\n    /**\n     * Resize the textarea to fit its content.\n     * @param force Whether to force a height recalculation. By default the height will be\n     *    recalculated only if the value changed since the last call.\n     */\n    resizeToFitContent(force = false) {\n        // If autosizing is disabled, just skip everything else\n        if (!this._enabled) {\n            return;\n        }\n        this._cacheTextareaLineHeight();\n        this._cacheTextareaPlaceholderHeight();\n        // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n        // in checking the height of the textarea.\n        if (!this._cachedLineHeight) {\n            return;\n        }\n        const textarea = this._elementRef.nativeElement;\n        const value = textarea.value;\n        // Only resize if the value or minRows have changed since these calculations can be expensive.\n        if (!force && this._minRows === this._previousMinRows && value === this._previousValue) {\n            return;\n        }\n        const scrollHeight = this._measureScrollHeight();\n        const height = Math.max(scrollHeight, this._cachedPlaceholderHeight || 0);\n        // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n        textarea.style.height = `${height}px`;\n        this._ngZone.runOutsideAngular(() => {\n            if (typeof requestAnimationFrame !== 'undefined') {\n                requestAnimationFrame(() => this._scrollToCaretPosition(textarea));\n            }\n            else {\n                setTimeout(() => this._scrollToCaretPosition(textarea));\n            }\n        });\n        this._previousValue = value;\n        this._previousMinRows = this._minRows;\n    }\n    /**\n     * Resets the textarea to its original size\n     */\n    reset() {\n        // Do not try to change the textarea, if the initialHeight has not been determined yet\n        // This might potentially remove styles when reset() is called before ngAfterViewInit\n        if (this._initialHeight !== undefined) {\n            this._textareaElement.style.height = this._initialHeight;\n        }\n    }\n    _noopInputHandler() {\n        // no-op handler that ensures we're running change detection on input events.\n    }\n    /** Access injected document if available or fallback to global document reference */\n    _getDocument() {\n        return this._document || document;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        const doc = this._getDocument();\n        return doc.defaultView || window;\n    }\n    /**\n     * Scrolls a textarea to the caret position. On Firefox resizing the textarea will\n     * prevent it from scrolling to the caret position. We need to re-set the selection\n     * in order for it to scroll to the proper position.\n     */\n    _scrollToCaretPosition(textarea) {\n        const { selectionStart, selectionEnd } = textarea;\n        // IE will throw an \"Unspecified error\" if we try to set the selection range after the\n        // element has been removed from the DOM. Assert that the directive hasn't been destroyed\n        // between the time we requested the animation frame and when it was executed.\n        // Also note that we have to assert that the textarea is focused before we set the\n        // selection range. Setting the selection range on a non-focused textarea will cause\n        // it to receive focus on IE and Edge.\n        if (!this._destroyed.isStopped && this._hasFocus) {\n            textarea.setSelectionRange(selectionStart, selectionEnd);\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: CdkTextareaAutosize, deps: [{ token: i0.ElementRef }, { token: i1.Platform }, { token: i0.NgZone }, { token: DOCUMENT, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"17.0.4\", type: CdkTextareaAutosize, selector: \"textarea[cdkTextareaAutosize]\", inputs: { minRows: [\"cdkAutosizeMinRows\", \"minRows\"], maxRows: [\"cdkAutosizeMaxRows\", \"maxRows\"], enabled: [\"cdkTextareaAutosize\", \"enabled\", booleanAttribute], placeholder: \"placeholder\" }, host: { attributes: { \"rows\": \"1\" }, listeners: { \"input\": \"_noopInputHandler()\" }, classAttribute: \"cdk-textarea-autosize\" }, exportAs: [\"cdkTextareaAutosize\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: CdkTextareaAutosize, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'textarea[cdkTextareaAutosize]',\n                    exportAs: 'cdkTextareaAutosize',\n                    host: {\n                        'class': 'cdk-textarea-autosize',\n                        // Textarea elements that have the directive applied should have a single row by default.\n                        // Browsers normally show two rows by default and therefore this limits the minRows binding.\n                        'rows': '1',\n                        '(input)': '_noopInputHandler()',\n                    },\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i1.Platform }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }], propDecorators: { minRows: [{\n                type: Input,\n                args: ['cdkAutosizeMinRows']\n            }], maxRows: [{\n                type: Input,\n                args: ['cdkAutosizeMaxRows']\n            }], enabled: [{\n                type: Input,\n                args: [{ alias: 'cdkTextareaAutosize', transform: booleanAttribute }]\n            }], placeholder: [{\n                type: Input\n            }] } });\n\nclass TextFieldModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: TextFieldModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.0.4\", ngImport: i0, type: TextFieldModule, declarations: [CdkAutofill, CdkTextareaAutosize], exports: [CdkAutofill, CdkTextareaAutosize] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: TextFieldModule }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: TextFieldModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [CdkAutofill, CdkTextareaAutosize],\n                    exports: [CdkAutofill, CdkTextareaAutosize],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AutofillMonitor, CdkAutofill, CdkTextareaAutosize, TextFieldModule };\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i1 from '@angular/cdk/platform';\nimport { getSupportedInputTypes } from '@angular/cdk/platform';\nimport * as i4 from '@angular/cdk/text-field';\nimport { TextFieldModule } from '@angular/cdk/text-field';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, Optional, Self, Inject, Input, NgModule } from '@angular/core';\nimport * as i2 from '@angular/forms';\nimport { Validators } from '@angular/forms';\nimport * as i3 from '@angular/material/core';\nimport { mixinErrorState, MatCommonModule } from '@angular/material/core';\nimport * as i5 from '@angular/material/form-field';\nimport { MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport { Subject } from 'rxjs';\n\n/** @docs-private */\nfunction getMatInputUnsupportedTypeError(type) {\n    return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nconst MAT_INPUT_VALUE_ACCESSOR = new InjectionToken('MAT_INPUT_VALUE_ACCESSOR');\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n    'button',\n    'checkbox',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit',\n];\nlet nextUniqueId = 0;\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nconst _MatInputBase = mixinErrorState(class {\n    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, \n    /**\n     * Form control bound to the component.\n     * Implemented as part of `MatFormFieldControl`.\n     * @docs-private\n     */\n    ngControl) {\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n        /**\n         * Emits whenever the component state changes and should cause the parent\n         * form field to update. Implemented as part of `MatFormFieldControl`.\n         * @docs-private\n         */\n        this.stateChanges = new Subject();\n    }\n});\nclass MatInput extends _MatInputBase {\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get id() {\n        return this._id;\n    }\n    set id(value) {\n        this._id = value || this._uid;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get required() {\n        return this._required ?? this.ngControl?.control?.hasValidator(Validators.required) ?? false;\n    }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n    }\n    /** Input type of the element. */\n    get type() {\n        return this._type;\n    }\n    set type(value) {\n        this._type = value || 'text';\n        this._validateType();\n        // When using Angular inputs, developers are no longer able to set the properties on the native\n        // input element. To ensure that bindings for `type` work, we need to sync the setter\n        // with the native property. Textarea elements don't support the type property or attribute.\n        if (!this._isTextarea && getSupportedInputTypes().has(this._type)) {\n            this._elementRef.nativeElement.type = this._type;\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get value() {\n        return this._inputValueAccessor.value;\n    }\n    set value(value) {\n        if (value !== this.value) {\n            this._inputValueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n    /** Whether the element is readonly. */\n    get readonly() {\n        return this._readonly;\n    }\n    set readonly(value) {\n        this._readonly = coerceBooleanProperty(value);\n    }\n    constructor(_elementRef, _platform, ngControl, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, inputValueAccessor, _autofillMonitor, ngZone, \n    // TODO: Remove this once the legacy appearance has been removed. We only need\n    // to inject the form field for determining whether the placeholder has been promoted.\n    _formField) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._elementRef = _elementRef;\n        this._platform = _platform;\n        this._autofillMonitor = _autofillMonitor;\n        this._formField = _formField;\n        this._uid = `mat-input-${nextUniqueId++}`;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.focused = false;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.stateChanges = new Subject();\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.controlType = 'mat-input';\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.autofilled = false;\n        this._disabled = false;\n        this._type = 'text';\n        this._readonly = false;\n        this._neverEmptyInputTypes = [\n            'date',\n            'datetime',\n            'datetime-local',\n            'month',\n            'time',\n            'week',\n        ].filter(t => getSupportedInputTypes().has(t));\n        this._iOSKeyupListener = (event) => {\n            const el = event.target;\n            // Note: We specifically check for 0, rather than `!el.selectionStart`, because the two\n            // indicate different things. If the value is 0, it means that the caret is at the start\n            // of the input, whereas a value of `null` means that the input doesn't support\n            // manipulating the selection range. Inputs that don't support setting the selection range\n            // will throw an error so we want to avoid calling `setSelectionRange` on them. See:\n            // https://html.spec.whatwg.org/multipage/input.html#do-not-apply\n            if (!el.value && el.selectionStart === 0 && el.selectionEnd === 0) {\n                // Note: Just setting `0, 0` doesn't fix the issue. Setting\n                // `1, 1` fixes it for the first time that you type text and\n                // then hold delete. Toggling to `1, 1` and then back to\n                // `0, 0` seems to completely fix it.\n                el.setSelectionRange(1, 1);\n                el.setSelectionRange(0, 0);\n            }\n        };\n        const element = this._elementRef.nativeElement;\n        const nodeName = element.nodeName.toLowerCase();\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this._inputValueAccessor = inputValueAccessor || element;\n        this._previousNativeValue = this.value;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n        // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n        // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n        // exists on iOS, we only bother to install the listener on iOS.\n        if (_platform.IOS) {\n            ngZone.runOutsideAngular(() => {\n                _elementRef.nativeElement.addEventListener('keyup', this._iOSKeyupListener);\n            });\n        }\n        this._isServer = !this._platform.isBrowser;\n        this._isNativeSelect = nodeName === 'select';\n        this._isTextarea = nodeName === 'textarea';\n        this._isInFormField = !!_formField;\n        if (this._isNativeSelect) {\n            this.controlType = element.multiple\n                ? 'mat-native-select-multiple'\n                : 'mat-native-select';\n        }\n    }\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n                this.autofilled = event.isAutofilled;\n                this.stateChanges.next();\n            });\n        }\n    }\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n    ngOnDestroy() {\n        this.stateChanges.complete();\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n        }\n        if (this._platform.IOS) {\n            this._elementRef.nativeElement.removeEventListener('keyup', this._iOSKeyupListener);\n        }\n    }\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n            // Since the input isn't a `ControlValueAccessor`, we don't have a good way of knowing when\n            // the disabled state has changed. We can't use the `ngControl.statusChanges`, because it\n            // won't fire if the input is disabled with `emitEvents = false`, despite the input becoming\n            // disabled.\n            if (this.ngControl.disabled !== null && this.ngControl.disabled !== this.disabled) {\n                this.disabled = this.ngControl.disabled;\n                this.stateChanges.next();\n            }\n        }\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this._dirtyCheckNativeValue();\n        // We need to dirty-check and set the placeholder attribute ourselves, because whether it's\n        // present or not depends on a query which is prone to \"changed after checked\" errors.\n        this._dirtyCheckPlaceholder();\n    }\n    /** Focuses the input. */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /** Callback for the cases where the focused state of the input changes. */\n    _focusChanged(isFocused) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n    _onInput() {\n        // This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    }\n    /** Does some manual dirty checking on the native input `value` property. */\n    _dirtyCheckNativeValue() {\n        const newValue = this._elementRef.nativeElement.value;\n        if (this._previousNativeValue !== newValue) {\n            this._previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n    /** Does some manual dirty checking on the native input `placeholder` attribute. */\n    _dirtyCheckPlaceholder() {\n        const placeholder = this._getPlaceholder();\n        if (placeholder !== this._previousPlaceholder) {\n            const element = this._elementRef.nativeElement;\n            this._previousPlaceholder = placeholder;\n            placeholder\n                ? element.setAttribute('placeholder', placeholder)\n                : element.removeAttribute('placeholder');\n        }\n    }\n    /** Gets the current placeholder of the form field. */\n    _getPlaceholder() {\n        return this.placeholder || null;\n    }\n    /** Make sure the input is a supported type. */\n    _validateType() {\n        if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1 &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatInputUnsupportedTypeError(this._type);\n        }\n    }\n    /** Checks whether the input type is one of the types that are never empty. */\n    _isNeverEmpty() {\n        return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    }\n    /** Checks whether the input is invalid based on the native validation. */\n    _isBadInput() {\n        // The `validity` property won't be present on platform-server.\n        let validity = this._elementRef.nativeElement.validity;\n        return validity && validity.badInput;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get empty() {\n        return (!this._isNeverEmpty() &&\n            !this._elementRef.nativeElement.value &&\n            !this._isBadInput() &&\n            !this.autofilled);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        if (this._isNativeSelect) {\n            // For a single-selection `<select>`, the label should float when the selected option has\n            // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n            // overlapping the label with the options.\n            const selectElement = this._elementRef.nativeElement;\n            const firstOption = selectElement.options[0];\n            // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n            // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n            return (this.focused ||\n                selectElement.multiple ||\n                !this.empty ||\n                !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label));\n        }\n        else {\n            return this.focused || !this.empty;\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        if (ids.length) {\n            this._elementRef.nativeElement.setAttribute('aria-describedby', ids.join(' '));\n        }\n        else {\n            this._elementRef.nativeElement.removeAttribute('aria-describedby');\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n        // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n        // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\n        if (!this.focused) {\n            this.focus();\n        }\n    }\n    /** Whether the form control is a native select that is displayed inline. */\n    _isInlineSelect() {\n        const element = this._elementRef.nativeElement;\n        return this._isNativeSelect && (element.multiple || element.size > 1);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatInput, deps: [{ token: i0.ElementRef }, { token: i1.Platform }, { token: i2.NgControl, optional: true, self: true }, { token: i2.NgForm, optional: true }, { token: i2.FormGroupDirective, optional: true }, { token: i3.ErrorStateMatcher }, { token: MAT_INPUT_VALUE_ACCESSOR, optional: true, self: true }, { token: i4.AutofillMonitor }, { token: i0.NgZone }, { token: MAT_FORM_FIELD, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.0.4\", type: MatInput, selector: \"input[matInput], textarea[matInput], select[matNativeControl],\\n      input[matNativeControl], textarea[matNativeControl]\", inputs: { disabled: \"disabled\", id: \"id\", placeholder: \"placeholder\", name: \"name\", required: \"required\", type: \"type\", errorStateMatcher: \"errorStateMatcher\", userAriaDescribedBy: [\"aria-describedby\", \"userAriaDescribedBy\"], value: \"value\", readonly: \"readonly\" }, host: { listeners: { \"focus\": \"_focusChanged(true)\", \"blur\": \"_focusChanged(false)\", \"input\": \"_onInput()\" }, properties: { \"class.mat-input-server\": \"_isServer\", \"class.mat-mdc-form-field-textarea-control\": \"_isInFormField && _isTextarea\", \"class.mat-mdc-form-field-input-control\": \"_isInFormField\", \"class.mdc-text-field__input\": \"_isInFormField\", \"class.mat-mdc-native-select-inline\": \"_isInlineSelect()\", \"id\": \"id\", \"disabled\": \"disabled\", \"required\": \"required\", \"attr.name\": \"name || null\", \"attr.readonly\": \"readonly && !_isNativeSelect || null\", \"attr.aria-invalid\": \"(empty && required) ? null : errorState\", \"attr.aria-required\": \"required\", \"attr.id\": \"id\" }, classAttribute: \"mat-mdc-input-element\" }, providers: [{ provide: MatFormFieldControl, useExisting: MatInput }], exportAs: [\"matInput\"], usesInheritance: true, usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatInput, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n                    exportAs: 'matInput',\n                    host: {\n                        'class': 'mat-mdc-input-element',\n                        // The BaseMatInput parent class adds `mat-input-element`, `mat-form-field-control` and\n                        // `mat-form-field-autofill-control` to the CSS class list, but this should not be added for\n                        // this MDC equivalent input.\n                        '[class.mat-input-server]': '_isServer',\n                        '[class.mat-mdc-form-field-textarea-control]': '_isInFormField && _isTextarea',\n                        '[class.mat-mdc-form-field-input-control]': '_isInFormField',\n                        '[class.mdc-text-field__input]': '_isInFormField',\n                        '[class.mat-mdc-native-select-inline]': '_isInlineSelect()',\n                        // Native input properties that are overwritten by Angular inputs need to be synced with\n                        // the native input element. Otherwise property bindings for those don't work.\n                        '[id]': 'id',\n                        '[disabled]': 'disabled',\n                        '[required]': 'required',\n                        '[attr.name]': 'name || null',\n                        '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n                        // Only mark the input as invalid for assistive technology if it has a value since the\n                        // state usually overlaps with `aria-required` when the input is empty and can be redundant.\n                        '[attr.aria-invalid]': '(empty && required) ? null : errorState',\n                        '[attr.aria-required]': 'required',\n                        // Native input properties that are overwritten by Angular inputs need to be synced with\n                        // the native input element. Otherwise property bindings for those don't work.\n                        '[attr.id]': 'id',\n                        '(focus)': '_focusChanged(true)',\n                        '(blur)': '_focusChanged(false)',\n                        '(input)': '_onInput()',\n                    },\n                    providers: [{ provide: MatFormFieldControl, useExisting: MatInput }],\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i1.Platform }, { type: i2.NgControl, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }] }, { type: i2.NgForm, decorators: [{\n                    type: Optional\n                }] }, { type: i2.FormGroupDirective, decorators: [{\n                    type: Optional\n                }] }, { type: i3.ErrorStateMatcher }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [MAT_INPUT_VALUE_ACCESSOR]\n                }] }, { type: i4.AutofillMonitor }, { type: i0.NgZone }, { type: i5.MatFormField, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_FORM_FIELD]\n                }] }], propDecorators: { disabled: [{\n                type: Input\n            }], id: [{\n                type: Input\n            }], placeholder: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], required: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], errorStateMatcher: [{\n                type: Input\n            }], userAriaDescribedBy: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], value: [{\n                type: Input\n            }], readonly: [{\n                type: Input\n            }] } });\n\nclass MatInputModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatInputModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.0.4\", ngImport: i0, type: MatInputModule, declarations: [MatInput], imports: [MatCommonModule, MatFormFieldModule], exports: [MatInput, MatFormFieldModule, TextFieldModule, MatCommonModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatInputModule, imports: [MatCommonModule, MatFormFieldModule, MatFormFieldModule, TextFieldModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatInputModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule, MatFormFieldModule],\n                    exports: [MatInput, MatFormFieldModule, TextFieldModule, MatCommonModule],\n                    declarations: [MatInput],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_INPUT_VALUE_ACCESSOR, MatInput, MatInputModule, getMatInputUnsupportedTypeError };\n","import * as i0 from '@angular/core';\nimport { InjectionToken, Directive, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, inject, ViewChild, Injector, TemplateRef, Injectable, Optional, SkipSelf, NgModule } from '@angular/core';\nimport { CommonModule, DOCUMENT } from '@angular/common';\nimport * as i2 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport { Subject } from 'rxjs';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i3 from '@angular/cdk/portal';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\nimport * as i1 from '@angular/cdk/platform';\nimport * as i2$1 from '@angular/cdk/a11y';\nimport * as i3$1 from '@angular/cdk/layout';\nimport { Breakpoints } from '@angular/cdk/layout';\nimport * as i1$1 from '@angular/cdk/overlay';\nimport { OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { takeUntil } from 'rxjs/operators';\nimport { MatCommonModule } from '@angular/material/core';\n\n/** Maximum amount of milliseconds that can be passed into setTimeout. */\nconst MAX_TIMEOUT = Math.pow(2, 31) - 1;\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nclass MatSnackBarRef {\n    constructor(containerInstance, _overlayRef) {\n        this._overlayRef = _overlayRef;\n        /** Subject for notifying the user that the snack bar has been dismissed. */\n        this._afterDismissed = new Subject();\n        /** Subject for notifying the user that the snack bar has opened and appeared. */\n        this._afterOpened = new Subject();\n        /** Subject for notifying the user that the snack bar action was called. */\n        this._onAction = new Subject();\n        /** Whether the snack bar was dismissed using the action button. */\n        this._dismissedByAction = false;\n        this.containerInstance = containerInstance;\n        containerInstance._onExit.subscribe(() => this._finishDismiss());\n    }\n    /** Dismisses the snack bar. */\n    dismiss() {\n        if (!this._afterDismissed.closed) {\n            this.containerInstance.exit();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /** Marks the snackbar action clicked. */\n    dismissWithAction() {\n        if (!this._onAction.closed) {\n            this._dismissedByAction = true;\n            this._onAction.next();\n            this._onAction.complete();\n            this.dismiss();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * @breaking-change 8.0.0\n     */\n    closeWithAction() {\n        this.dismissWithAction();\n    }\n    /** Dismisses the snack bar after some duration */\n    _dismissAfter(duration) {\n        // Note that we need to cap the duration to the maximum value for setTimeout, because\n        // it'll revert to 1 if somebody passes in something greater (e.g. `Infinity`). See #17234.\n        this._durationTimeoutId = setTimeout(() => this.dismiss(), Math.min(duration, MAX_TIMEOUT));\n    }\n    /** Marks the snackbar as opened */\n    _open() {\n        if (!this._afterOpened.closed) {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        }\n    }\n    /** Cleans up the DOM after closing. */\n    _finishDismiss() {\n        this._overlayRef.dispose();\n        if (!this._onAction.closed) {\n            this._onAction.complete();\n        }\n        this._afterDismissed.next({ dismissedByAction: this._dismissedByAction });\n        this._afterDismissed.complete();\n        this._dismissedByAction = false;\n    }\n    /** Gets an observable that is notified when the snack bar is finished closing. */\n    afterDismissed() {\n        return this._afterDismissed;\n    }\n    /** Gets an observable that is notified when the snack bar has opened and appeared. */\n    afterOpened() {\n        return this.containerInstance._onEnter;\n    }\n    /** Gets an observable that is notified when the snack bar action is called. */\n    onAction() {\n        return this._onAction;\n    }\n}\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nconst MAT_SNACK_BAR_DATA = new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n */\nclass MatSnackBarConfig {\n    constructor() {\n        /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n        this.politeness = 'assertive';\n        /**\n         * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n         * component or template, the announcement message will default to the specified message.\n         */\n        this.announcementMessage = '';\n        /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n        this.duration = 0;\n        /** Data being injected into the child component. */\n        this.data = null;\n        /** The horizontal position to place the snack bar. */\n        this.horizontalPosition = 'center';\n        /** The vertical position to place the snack bar. */\n        this.verticalPosition = 'bottom';\n    }\n}\n\n/** Directive that should be applied to the text element to be rendered in the snack bar. */\nclass MatSnackBarLabel {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatSnackBarLabel, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.0.4\", type: MatSnackBarLabel, isStandalone: true, selector: \"[matSnackBarLabel]\", host: { classAttribute: \"mat-mdc-snack-bar-label mdc-snackbar__label\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatSnackBarLabel, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[matSnackBarLabel]`,\n                    standalone: true,\n                    host: {\n                        'class': 'mat-mdc-snack-bar-label mdc-snackbar__label',\n                    },\n                }]\n        }] });\n/** Directive that should be applied to the element containing the snack bar's action buttons. */\nclass MatSnackBarActions {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatSnackBarActions, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.0.4\", type: MatSnackBarActions, isStandalone: true, selector: \"[matSnackBarActions]\", host: { classAttribute: \"mat-mdc-snack-bar-actions mdc-snackbar__actions\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatSnackBarActions, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[matSnackBarActions]`,\n                    standalone: true,\n                    host: {\n                        'class': 'mat-mdc-snack-bar-actions mdc-snackbar__actions',\n                    },\n                }]\n        }] });\n/** Directive that should be applied to each of the snack bar's action buttons. */\nclass MatSnackBarAction {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatSnackBarAction, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.0.4\", type: MatSnackBarAction, isStandalone: true, selector: \"[matSnackBarAction]\", host: { classAttribute: \"mat-mdc-snack-bar-action mdc-snackbar__action\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatSnackBarAction, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[matSnackBarAction]`,\n                    standalone: true,\n                    host: {\n                        'class': 'mat-mdc-snack-bar-action mdc-snackbar__action',\n                    },\n                }]\n        }] });\n\nclass SimpleSnackBar {\n    constructor(snackBarRef, data) {\n        this.snackBarRef = snackBarRef;\n        this.data = data;\n    }\n    /** Performs the action on the snack bar. */\n    action() {\n        this.snackBarRef.dismissWithAction();\n    }\n    /** If the action button should be shown. */\n    get hasAction() {\n        return !!this.data.action;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: SimpleSnackBar, deps: [{ token: MatSnackBarRef }, { token: MAT_SNACK_BAR_DATA }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"17.0.4\", type: SimpleSnackBar, isStandalone: true, selector: \"simple-snack-bar\", host: { classAttribute: \"mat-mdc-simple-snack-bar\" }, exportAs: [\"matSnackBar\"], ngImport: i0, template: \"<div matSnackBarLabel>\\n  {{data.message}}\\n</div>\\n\\n@if (hasAction) {\\n  <div matSnackBarActions>\\n    <button mat-button matSnackBarAction (click)=\\\"action()\\\">\\n      {{data.action}}\\n    </button>\\n  </div>\\n}\\n\", styles: [\".mat-mdc-simple-snack-bar{display:flex}\"], dependencies: [{ kind: \"ngmodule\", type: MatButtonModule }, { kind: \"component\", type: i2.MatButton, selector: \"    button[mat-button], button[mat-raised-button], button[mat-flat-button],    button[mat-stroked-button]  \", exportAs: [\"matButton\"] }, { kind: \"directive\", type: MatSnackBarLabel, selector: \"[matSnackBarLabel]\" }, { kind: \"directive\", type: MatSnackBarActions, selector: \"[matSnackBarActions]\" }, { kind: \"directive\", type: MatSnackBarAction, selector: \"[matSnackBarAction]\" }, { kind: \"ngmodule\", type: CommonModule }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: SimpleSnackBar, decorators: [{\n            type: Component,\n            args: [{ selector: 'simple-snack-bar', exportAs: 'matSnackBar', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, imports: [MatButtonModule, MatSnackBarLabel, MatSnackBarActions, MatSnackBarAction, CommonModule], standalone: true, host: {\n                        'class': 'mat-mdc-simple-snack-bar',\n                    }, template: \"<div matSnackBarLabel>\\n  {{data.message}}\\n</div>\\n\\n@if (hasAction) {\\n  <div matSnackBarActions>\\n    <button mat-button matSnackBarAction (click)=\\\"action()\\\">\\n      {{data.action}}\\n    </button>\\n  </div>\\n}\\n\", styles: [\".mat-mdc-simple-snack-bar{display:flex}\"] }]\n        }], ctorParameters: () => [{ type: MatSnackBarRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_SNACK_BAR_DATA]\n                }] }] });\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nconst matSnackBarAnimations = {\n    /** Animation that shows and hides a snack bar. */\n    snackBarState: trigger('state', [\n        state('void, hidden', style({\n            transform: 'scale(0.8)',\n            opacity: 0,\n        })),\n        state('visible', style({\n            transform: 'scale(1)',\n            opacity: 1,\n        })),\n        transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n            opacity: 0,\n        }))),\n    ]),\n};\n\nlet uniqueId = 0;\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\nclass MatSnackBarContainer extends BasePortalOutlet {\n    constructor(_ngZone, _elementRef, _changeDetectorRef, _platform, \n    /** The snack bar configuration. */\n    snackBarConfig) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._platform = _platform;\n        this.snackBarConfig = snackBarConfig;\n        this._document = inject(DOCUMENT);\n        this._trackedModals = new Set();\n        /** The number of milliseconds to wait before announcing the snack bar's content. */\n        this._announceDelay = 150;\n        /** Whether the component has been destroyed. */\n        this._destroyed = false;\n        /** Subject for notifying that the snack bar has announced to screen readers. */\n        this._onAnnounce = new Subject();\n        /** Subject for notifying that the snack bar has exited from view. */\n        this._onExit = new Subject();\n        /** Subject for notifying that the snack bar has finished entering the view. */\n        this._onEnter = new Subject();\n        /** The state of the snack bar animations. */\n        this._animationState = 'void';\n        /** Unique ID of the aria-live element. */\n        this._liveElementId = `mat-snack-bar-container-live-${uniqueId++}`;\n        /**\n         * Attaches a DOM portal to the snack bar container.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            this._assertNotAttached();\n            const result = this._portalOutlet.attachDomPortal(portal);\n            this._afterPortalAttached();\n            return result;\n        };\n        // Use aria-live rather than a live role like 'alert' or 'status'\n        // because NVDA and JAWS have show inconsistent behavior with live roles.\n        if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n            this._live = 'assertive';\n        }\n        else if (snackBarConfig.politeness === 'off') {\n            this._live = 'off';\n        }\n        else {\n            this._live = 'polite';\n        }\n        // Only set role for Firefox. Set role based on aria-live because setting role=\"alert\" implies\n        // aria-live=\"assertive\" which may cause issues if aria-live is set to \"polite\" above.\n        if (this._platform.FIREFOX) {\n            if (this._live === 'polite') {\n                this._role = 'status';\n            }\n            if (this._live === 'assertive') {\n                this._role = 'alert';\n            }\n        }\n    }\n    /** Attach a component portal as content to this snack bar container. */\n    attachComponentPortal(portal) {\n        this._assertNotAttached();\n        const result = this._portalOutlet.attachComponentPortal(portal);\n        this._afterPortalAttached();\n        return result;\n    }\n    /** Attach a template portal as content to this snack bar container. */\n    attachTemplatePortal(portal) {\n        this._assertNotAttached();\n        const result = this._portalOutlet.attachTemplatePortal(portal);\n        this._afterPortalAttached();\n        return result;\n    }\n    /** Handle end of animations, updating the state of the snackbar. */\n    onAnimationEnd(event) {\n        const { fromState, toState } = event;\n        if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n            this._completeExit();\n        }\n        if (toState === 'visible') {\n            // Note: we shouldn't use `this` inside the zone callback,\n            // because it can cause a memory leak.\n            const onEnter = this._onEnter;\n            this._ngZone.run(() => {\n                onEnter.next();\n                onEnter.complete();\n            });\n        }\n    }\n    /** Begin animation of snack bar entrance into view. */\n    enter() {\n        if (!this._destroyed) {\n            this._animationState = 'visible';\n            this._changeDetectorRef.detectChanges();\n            this._screenReaderAnnounce();\n        }\n    }\n    /** Begin animation of the snack bar exiting from view. */\n    exit() {\n        // It's common for snack bars to be opened by random outside calls like HTTP requests or\n        // errors. Run inside the NgZone to ensure that it functions correctly.\n        this._ngZone.run(() => {\n            // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n            // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n            // `MatSnackBar.open`).\n            this._animationState = 'hidden';\n            // Mark this element with an 'exit' attribute to indicate that the snackbar has\n            // been dismissed and will soon be removed from the DOM. This is used by the snackbar\n            // test harness.\n            this._elementRef.nativeElement.setAttribute('mat-exit', '');\n            // If the snack bar hasn't been announced by the time it exits it wouldn't have been open\n            // long enough to visually read it either, so clear the timeout for announcing.\n            clearTimeout(this._announceTimeoutId);\n        });\n        return this._onExit;\n    }\n    /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n    ngOnDestroy() {\n        this._destroyed = true;\n        this._clearFromModals();\n        this._completeExit();\n    }\n    /**\n     * Removes the element in a microtask. Helps prevent errors where we end up\n     * removing an element which is in the middle of an animation.\n     */\n    _completeExit() {\n        queueMicrotask(() => {\n            this._onExit.next();\n            this._onExit.complete();\n        });\n    }\n    /**\n     * Called after the portal contents have been attached. Can be\n     * used to modify the DOM once it's guaranteed to be in place.\n     */\n    _afterPortalAttached() {\n        const element = this._elementRef.nativeElement;\n        const panelClasses = this.snackBarConfig.panelClass;\n        if (panelClasses) {\n            if (Array.isArray(panelClasses)) {\n                // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n                panelClasses.forEach(cssClass => element.classList.add(cssClass));\n            }\n            else {\n                element.classList.add(panelClasses);\n            }\n        }\n        this._exposeToModals();\n        // Check to see if the attached component or template uses the MDC template structure,\n        // specifically the MDC label. If not, the container should apply the MDC label class to this\n        // component's label container, which will apply MDC's label styles to the attached view.\n        const label = this._label.nativeElement;\n        const labelClass = 'mdc-snackbar__label';\n        label.classList.toggle(labelClass, !label.querySelector(`.${labelClass}`));\n    }\n    /**\n     * Some browsers won't expose the accessibility node of the live element if there is an\n     * `aria-modal` and the live element is outside of it. This method works around the issue by\n     * pointing the `aria-owns` of all modals to the live element.\n     */\n    _exposeToModals() {\n        // TODO(http://github.com/angular/components/issues/26853): consider de-duplicating this with the\n        // `LiveAnnouncer` and any other usages.\n        //\n        // Note that the selector here is limited to CDK overlays at the moment in order to reduce the\n        // section of the DOM we need to look through. This should cover all the cases we support, but\n        // the selector can be expanded if it turns out to be too narrow.\n        const id = this._liveElementId;\n        const modals = this._document.querySelectorAll('body > .cdk-overlay-container [aria-modal=\"true\"]');\n        for (let i = 0; i < modals.length; i++) {\n            const modal = modals[i];\n            const ariaOwns = modal.getAttribute('aria-owns');\n            this._trackedModals.add(modal);\n            if (!ariaOwns) {\n                modal.setAttribute('aria-owns', id);\n            }\n            else if (ariaOwns.indexOf(id) === -1) {\n                modal.setAttribute('aria-owns', ariaOwns + ' ' + id);\n            }\n        }\n    }\n    /** Clears the references to the live element from any modals it was added to. */\n    _clearFromModals() {\n        this._trackedModals.forEach(modal => {\n            const ariaOwns = modal.getAttribute('aria-owns');\n            if (ariaOwns) {\n                const newValue = ariaOwns.replace(this._liveElementId, '').trim();\n                if (newValue.length > 0) {\n                    modal.setAttribute('aria-owns', newValue);\n                }\n                else {\n                    modal.removeAttribute('aria-owns');\n                }\n            }\n        });\n        this._trackedModals.clear();\n    }\n    /** Asserts that no content is already attached to the container. */\n    _assertNotAttached() {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('Attempting to attach snack bar content after content is already attached');\n        }\n    }\n    /**\n     * Starts a timeout to move the snack bar content to the live region so screen readers will\n     * announce it.\n     */\n    _screenReaderAnnounce() {\n        if (!this._announceTimeoutId) {\n            this._ngZone.runOutsideAngular(() => {\n                this._announceTimeoutId = setTimeout(() => {\n                    const inertElement = this._elementRef.nativeElement.querySelector('[aria-hidden]');\n                    const liveElement = this._elementRef.nativeElement.querySelector('[aria-live]');\n                    if (inertElement && liveElement) {\n                        // If an element in the snack bar content is focused before being moved\n                        // track it and restore focus after moving to the live region.\n                        let focusedElement = null;\n                        if (this._platform.isBrowser &&\n                            document.activeElement instanceof HTMLElement &&\n                            inertElement.contains(document.activeElement)) {\n                            focusedElement = document.activeElement;\n                        }\n                        inertElement.removeAttribute('aria-hidden');\n                        liveElement.appendChild(inertElement);\n                        focusedElement?.focus();\n                        this._onAnnounce.next();\n                        this._onAnnounce.complete();\n                    }\n                }, this._announceDelay);\n            });\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatSnackBarContainer, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i1.Platform }, { token: MatSnackBarConfig }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.0.4\", type: MatSnackBarContainer, isStandalone: true, selector: \"mat-snack-bar-container\", host: { listeners: { \"@state.done\": \"onAnimationEnd($event)\" }, properties: { \"@state\": \"_animationState\" }, classAttribute: \"mdc-snackbar mat-mdc-snack-bar-container mdc-snackbar--open\" }, viewQueries: [{ propertyName: \"_portalOutlet\", first: true, predicate: CdkPortalOutlet, descendants: true, static: true }, { propertyName: \"_label\", first: true, predicate: [\"label\"], descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: \"<div class=\\\"mdc-snackbar__surface\\\">\\n  <!--\\n    This outer label wrapper will have the class `mdc-snackbar__label` applied if\\n    the attached template/component does not contain it.\\n  -->\\n  <div class=\\\"mat-mdc-snack-bar-label\\\" #label>\\n    <!-- Initialy holds the snack bar content, will be empty after announcing to screen readers. -->\\n    <div aria-hidden=\\\"true\\\">\\n      <ng-template cdkPortalOutlet></ng-template>\\n    </div>\\n\\n    <!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\\n    <div [attr.aria-live]=\\\"_live\\\" [attr.role]=\\\"_role\\\" [attr.id]=\\\"_liveElementId\\\"></div>\\n  </div>\\n</div>\\n\", styles: [\".mdc-snackbar{display:none;position:fixed;right:0;bottom:0;left:0;align-items:center;justify-content:center;box-sizing:border-box;pointer-events:none;-webkit-tap-highlight-color:rgba(0,0,0,0)}.mdc-snackbar--opening,.mdc-snackbar--open,.mdc-snackbar--closing{display:flex}.mdc-snackbar--open .mdc-snackbar__label,.mdc-snackbar--open .mdc-snackbar__actions{visibility:visible}.mdc-snackbar__surface{padding-left:0;padding-right:8px;display:flex;align-items:center;justify-content:flex-start;box-sizing:border-box;transform:scale(0.8);opacity:0}.mdc-snackbar__surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:1px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}@media screen and (forced-colors: active){.mdc-snackbar__surface::before{border-color:CanvasText}}[dir=rtl] .mdc-snackbar__surface,.mdc-snackbar__surface[dir=rtl]{padding-left:8px;padding-right:0}.mdc-snackbar--open .mdc-snackbar__surface{transform:scale(1);opacity:1;pointer-events:auto}.mdc-snackbar--closing .mdc-snackbar__surface{transform:scale(1)}.mdc-snackbar__label{padding-left:16px;padding-right:8px;width:100%;flex-grow:1;box-sizing:border-box;margin:0;visibility:hidden;padding-top:14px;padding-bottom:14px}[dir=rtl] .mdc-snackbar__label,.mdc-snackbar__label[dir=rtl]{padding-left:8px;padding-right:16px}.mdc-snackbar__label::before{display:inline;content:attr(data-mdc-snackbar-label-text)}.mdc-snackbar__actions{display:flex;flex-shrink:0;align-items:center;box-sizing:border-box;visibility:hidden}.mdc-snackbar__action+.mdc-snackbar__dismiss{margin-left:8px;margin-right:0}[dir=rtl] .mdc-snackbar__action+.mdc-snackbar__dismiss,.mdc-snackbar__action+.mdc-snackbar__dismiss[dir=rtl]{margin-left:0;margin-right:8px}.mat-mdc-snack-bar-container{margin:8px;position:static}.mat-mdc-snack-bar-container .mdc-snackbar__surface{min-width:344px}@media(max-width: 480px),(max-width: 344px){.mat-mdc-snack-bar-container .mdc-snackbar__surface{min-width:100%}}@media(max-width: 480px),(max-width: 344px){.mat-mdc-snack-bar-container{width:100vw}}.mat-mdc-snack-bar-container .mdc-snackbar__surface{max-width:672px}.mat-mdc-snack-bar-container .mdc-snackbar__surface{box-shadow:0px 3px 5px -1px rgba(0, 0, 0, 0.2), 0px 6px 10px 0px rgba(0, 0, 0, 0.14), 0px 1px 18px 0px rgba(0, 0, 0, 0.12)}.mat-mdc-snack-bar-container .mdc-snackbar__surface{background-color:var(--mdc-snackbar-container-color)}.mat-mdc-snack-bar-container .mdc-snackbar__surface{border-radius:var(--mdc-snackbar-container-shape)}.mat-mdc-snack-bar-container .mdc-snackbar__label{color:var(--mdc-snackbar-supporting-text-color)}.mat-mdc-snack-bar-container .mdc-snackbar__label{font-size:var(--mdc-snackbar-supporting-text-size);font-family:var(--mdc-snackbar-supporting-text-font);font-weight:var(--mdc-snackbar-supporting-text-weight);line-height:var(--mdc-snackbar-supporting-text-line-height)}.mat-mdc-snack-bar-container .mat-mdc-button.mat-mdc-snack-bar-action:not(:disabled){color:var(--mat-snack-bar-button-color);--mat-text-button-state-layer-color:currentColor;--mat-text-button-ripple-color:currentColor}.mat-mdc-snack-bar-container .mat-mdc-button.mat-mdc-snack-bar-action:not(:disabled) .mat-ripple-element{opacity:.1}.mat-mdc-snack-bar-container .mdc-snackbar__label::before{display:none}.mat-mdc-snack-bar-handset,.mat-mdc-snack-bar-container,.mat-mdc-snack-bar-label{flex:1 1 auto}.mat-mdc-snack-bar-handset .mdc-snackbar__surface{width:100%}\"], dependencies: [{ kind: \"ngmodule\", type: PortalModule }, { kind: \"directive\", type: i3.CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }], animations: [matSnackBarAnimations.snackBarState], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatSnackBarContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-snack-bar-container', changeDetection: ChangeDetectionStrategy.Default, encapsulation: ViewEncapsulation.None, animations: [matSnackBarAnimations.snackBarState], standalone: true, imports: [PortalModule], host: {\n                        'class': 'mdc-snackbar mat-mdc-snack-bar-container mdc-snackbar--open',\n                        '[@state]': '_animationState',\n                        '(@state.done)': 'onAnimationEnd($event)',\n                    }, template: \"<div class=\\\"mdc-snackbar__surface\\\">\\n  <!--\\n    This outer label wrapper will have the class `mdc-snackbar__label` applied if\\n    the attached template/component does not contain it.\\n  -->\\n  <div class=\\\"mat-mdc-snack-bar-label\\\" #label>\\n    <!-- Initialy holds the snack bar content, will be empty after announcing to screen readers. -->\\n    <div aria-hidden=\\\"true\\\">\\n      <ng-template cdkPortalOutlet></ng-template>\\n    </div>\\n\\n    <!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\\n    <div [attr.aria-live]=\\\"_live\\\" [attr.role]=\\\"_role\\\" [attr.id]=\\\"_liveElementId\\\"></div>\\n  </div>\\n</div>\\n\", styles: [\".mdc-snackbar{display:none;position:fixed;right:0;bottom:0;left:0;align-items:center;justify-content:center;box-sizing:border-box;pointer-events:none;-webkit-tap-highlight-color:rgba(0,0,0,0)}.mdc-snackbar--opening,.mdc-snackbar--open,.mdc-snackbar--closing{display:flex}.mdc-snackbar--open .mdc-snackbar__label,.mdc-snackbar--open .mdc-snackbar__actions{visibility:visible}.mdc-snackbar__surface{padding-left:0;padding-right:8px;display:flex;align-items:center;justify-content:flex-start;box-sizing:border-box;transform:scale(0.8);opacity:0}.mdc-snackbar__surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:1px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}@media screen and (forced-colors: active){.mdc-snackbar__surface::before{border-color:CanvasText}}[dir=rtl] .mdc-snackbar__surface,.mdc-snackbar__surface[dir=rtl]{padding-left:8px;padding-right:0}.mdc-snackbar--open .mdc-snackbar__surface{transform:scale(1);opacity:1;pointer-events:auto}.mdc-snackbar--closing .mdc-snackbar__surface{transform:scale(1)}.mdc-snackbar__label{padding-left:16px;padding-right:8px;width:100%;flex-grow:1;box-sizing:border-box;margin:0;visibility:hidden;padding-top:14px;padding-bottom:14px}[dir=rtl] .mdc-snackbar__label,.mdc-snackbar__label[dir=rtl]{padding-left:8px;padding-right:16px}.mdc-snackbar__label::before{display:inline;content:attr(data-mdc-snackbar-label-text)}.mdc-snackbar__actions{display:flex;flex-shrink:0;align-items:center;box-sizing:border-box;visibility:hidden}.mdc-snackbar__action+.mdc-snackbar__dismiss{margin-left:8px;margin-right:0}[dir=rtl] .mdc-snackbar__action+.mdc-snackbar__dismiss,.mdc-snackbar__action+.mdc-snackbar__dismiss[dir=rtl]{margin-left:0;margin-right:8px}.mat-mdc-snack-bar-container{margin:8px;position:static}.mat-mdc-snack-bar-container .mdc-snackbar__surface{min-width:344px}@media(max-width: 480px),(max-width: 344px){.mat-mdc-snack-bar-container .mdc-snackbar__surface{min-width:100%}}@media(max-width: 480px),(max-width: 344px){.mat-mdc-snack-bar-container{width:100vw}}.mat-mdc-snack-bar-container .mdc-snackbar__surface{max-width:672px}.mat-mdc-snack-bar-container .mdc-snackbar__surface{box-shadow:0px 3px 5px -1px rgba(0, 0, 0, 0.2), 0px 6px 10px 0px rgba(0, 0, 0, 0.14), 0px 1px 18px 0px rgba(0, 0, 0, 0.12)}.mat-mdc-snack-bar-container .mdc-snackbar__surface{background-color:var(--mdc-snackbar-container-color)}.mat-mdc-snack-bar-container .mdc-snackbar__surface{border-radius:var(--mdc-snackbar-container-shape)}.mat-mdc-snack-bar-container .mdc-snackbar__label{color:var(--mdc-snackbar-supporting-text-color)}.mat-mdc-snack-bar-container .mdc-snackbar__label{font-size:var(--mdc-snackbar-supporting-text-size);font-family:var(--mdc-snackbar-supporting-text-font);font-weight:var(--mdc-snackbar-supporting-text-weight);line-height:var(--mdc-snackbar-supporting-text-line-height)}.mat-mdc-snack-bar-container .mat-mdc-button.mat-mdc-snack-bar-action:not(:disabled){color:var(--mat-snack-bar-button-color);--mat-text-button-state-layer-color:currentColor;--mat-text-button-ripple-color:currentColor}.mat-mdc-snack-bar-container .mat-mdc-button.mat-mdc-snack-bar-action:not(:disabled) .mat-ripple-element{opacity:.1}.mat-mdc-snack-bar-container .mdc-snackbar__label::before{display:none}.mat-mdc-snack-bar-handset,.mat-mdc-snack-bar-container,.mat-mdc-snack-bar-label{flex:1 1 auto}.mat-mdc-snack-bar-handset .mdc-snackbar__surface{width:100%}\"] }]\n        }], ctorParameters: () => [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1.Platform }, { type: MatSnackBarConfig }], propDecorators: { _portalOutlet: [{\n                type: ViewChild,\n                args: [CdkPortalOutlet, { static: true }]\n            }], _label: [{\n                type: ViewChild,\n                args: ['label', { static: true }]\n            }] } });\n\n/** @docs-private */\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n    return new MatSnackBarConfig();\n}\n/** Injection token that can be used to specify default snack bar. */\nconst MAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken('mat-snack-bar-default-options', {\n    providedIn: 'root',\n    factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n});\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nclass MatSnackBar {\n    /** Reference to the currently opened snackbar at *any* level. */\n    get _openedSnackBarRef() {\n        const parent = this._parentSnackBar;\n        return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n    }\n    set _openedSnackBarRef(value) {\n        if (this._parentSnackBar) {\n            this._parentSnackBar._openedSnackBarRef = value;\n        }\n        else {\n            this._snackBarRefAtThisLevel = value;\n        }\n    }\n    constructor(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n        this._overlay = _overlay;\n        this._live = _live;\n        this._injector = _injector;\n        this._breakpointObserver = _breakpointObserver;\n        this._parentSnackBar = _parentSnackBar;\n        this._defaultConfig = _defaultConfig;\n        /**\n         * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n         * If there is a parent snack-bar service, all operations should delegate to that parent\n         * via `_openedSnackBarRef`.\n         */\n        this._snackBarRefAtThisLevel = null;\n        /** The component that should be rendered as the snack bar's simple component. */\n        this.simpleSnackBarComponent = SimpleSnackBar;\n        /** The container component that attaches the provided template or component. */\n        this.snackBarContainerComponent = MatSnackBarContainer;\n        /** The CSS class to apply for handset mode. */\n        this.handsetCssClass = 'mat-mdc-snack-bar-handset';\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param component Component to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromComponent(component, config) {\n        return this._attach(component, config);\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param template Template to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromTemplate(template, config) {\n        return this._attach(template, config);\n    }\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param message The message to show in the snackbar.\n     * @param action The label for the snackbar action.\n     * @param config Additional configuration options for the snackbar.\n     */\n    open(message, action = '', config) {\n        const _config = { ...this._defaultConfig, ...config };\n        // Since the user doesn't have access to the component, we can\n        // override the data to pass in our own message and action.\n        _config.data = { message, action };\n        // Since the snack bar has `role=\"alert\"`, we don't\n        // want to announce the same message twice.\n        if (_config.announcementMessage === message) {\n            _config.announcementMessage = undefined;\n        }\n        return this.openFromComponent(this.simpleSnackBarComponent, _config);\n    }\n    /**\n     * Dismisses the currently-visible snack bar.\n     */\n    dismiss() {\n        if (this._openedSnackBarRef) {\n            this._openedSnackBarRef.dismiss();\n        }\n    }\n    ngOnDestroy() {\n        // Only dismiss the snack bar at the current level on destroy.\n        if (this._snackBarRefAtThisLevel) {\n            this._snackBarRefAtThisLevel.dismiss();\n        }\n    }\n    /**\n     * Attaches the snack bar container component to the overlay.\n     */\n    _attachSnackBarContainer(overlayRef, config) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        const injector = Injector.create({\n            parent: userInjector || this._injector,\n            providers: [{ provide: MatSnackBarConfig, useValue: config }],\n        });\n        const containerPortal = new ComponentPortal(this.snackBarContainerComponent, config.viewContainerRef, injector);\n        const containerRef = overlayRef.attach(containerPortal);\n        containerRef.instance.snackBarConfig = config;\n        return containerRef.instance;\n    }\n    /**\n     * Places a new component or a template as the content of the snack bar container.\n     */\n    _attach(content, userConfig) {\n        const config = { ...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig };\n        const overlayRef = this._createOverlay(config);\n        const container = this._attachSnackBarContainer(overlayRef, config);\n        const snackBarRef = new MatSnackBarRef(container, overlayRef);\n        if (content instanceof TemplateRef) {\n            const portal = new TemplatePortal(content, null, {\n                $implicit: config.data,\n                snackBarRef,\n            });\n            snackBarRef.instance = container.attachTemplatePortal(portal);\n        }\n        else {\n            const injector = this._createInjector(config, snackBarRef);\n            const portal = new ComponentPortal(content, undefined, injector);\n            const contentRef = container.attachComponentPortal(portal);\n            // We can't pass this via the injector, because the injector is created earlier.\n            snackBarRef.instance = contentRef.instance;\n        }\n        // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n        // appropriate. This class is applied to the overlay element because the overlay must expand to\n        // fill the width of the screen for full width snackbars.\n        this._breakpointObserver\n            .observe(Breakpoints.HandsetPortrait)\n            .pipe(takeUntil(overlayRef.detachments()))\n            .subscribe(state => {\n            overlayRef.overlayElement.classList.toggle(this.handsetCssClass, state.matches);\n        });\n        if (config.announcementMessage) {\n            // Wait until the snack bar contents have been announced then deliver this message.\n            container._onAnnounce.subscribe(() => {\n                this._live.announce(config.announcementMessage, config.politeness);\n            });\n        }\n        this._animateSnackBar(snackBarRef, config);\n        this._openedSnackBarRef = snackBarRef;\n        return this._openedSnackBarRef;\n    }\n    /** Animates the old snack bar out and the new one in. */\n    _animateSnackBar(snackBarRef, config) {\n        // When the snackbar is dismissed, clear the reference to it.\n        snackBarRef.afterDismissed().subscribe(() => {\n            // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n            if (this._openedSnackBarRef == snackBarRef) {\n                this._openedSnackBarRef = null;\n            }\n            if (config.announcementMessage) {\n                this._live.clear();\n            }\n        });\n        if (this._openedSnackBarRef) {\n            // If a snack bar is already in view, dismiss it and enter the\n            // new snack bar after exit animation is complete.\n            this._openedSnackBarRef.afterDismissed().subscribe(() => {\n                snackBarRef.containerInstance.enter();\n            });\n            this._openedSnackBarRef.dismiss();\n        }\n        else {\n            // If no snack bar is in view, enter the new snack bar.\n            snackBarRef.containerInstance.enter();\n        }\n        // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n        if (config.duration && config.duration > 0) {\n            snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration));\n        }\n    }\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param config The user-specified snack bar config.\n     */\n    _createOverlay(config) {\n        const overlayConfig = new OverlayConfig();\n        overlayConfig.direction = config.direction;\n        let positionStrategy = this._overlay.position().global();\n        // Set horizontal position.\n        const isRtl = config.direction === 'rtl';\n        const isLeft = config.horizontalPosition === 'left' ||\n            (config.horizontalPosition === 'start' && !isRtl) ||\n            (config.horizontalPosition === 'end' && isRtl);\n        const isRight = !isLeft && config.horizontalPosition !== 'center';\n        if (isLeft) {\n            positionStrategy.left('0');\n        }\n        else if (isRight) {\n            positionStrategy.right('0');\n        }\n        else {\n            positionStrategy.centerHorizontally();\n        }\n        // Set horizontal position.\n        if (config.verticalPosition === 'top') {\n            positionStrategy.top('0');\n        }\n        else {\n            positionStrategy.bottom('0');\n        }\n        overlayConfig.positionStrategy = positionStrategy;\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an injector to be used inside of a snack bar component.\n     * @param config Config that was used to create the snack bar.\n     * @param snackBarRef Reference to the snack bar.\n     */\n    _createInjector(config, snackBarRef) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        return Injector.create({\n            parent: userInjector || this._injector,\n            providers: [\n                { provide: MatSnackBarRef, useValue: snackBarRef },\n                { provide: MAT_SNACK_BAR_DATA, useValue: config.data },\n            ],\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatSnackBar, deps: [{ token: i1$1.Overlay }, { token: i2$1.LiveAnnouncer }, { token: i0.Injector }, { token: i3$1.BreakpointObserver }, { token: MatSnackBar, optional: true, skipSelf: true }, { token: MAT_SNACK_BAR_DEFAULT_OPTIONS }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatSnackBar, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatSnackBar, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: i1$1.Overlay }, { type: i2$1.LiveAnnouncer }, { type: i0.Injector }, { type: i3$1.BreakpointObserver }, { type: MatSnackBar, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }, { type: MatSnackBarConfig, decorators: [{\n                    type: Inject,\n                    args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n                }] }] });\n\nconst DIRECTIVES = [MatSnackBarContainer, MatSnackBarLabel, MatSnackBarActions, MatSnackBarAction];\nclass MatSnackBarModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatSnackBarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.0.4\", ngImport: i0, type: MatSnackBarModule, imports: [OverlayModule,\n            PortalModule,\n            MatButtonModule,\n            MatCommonModule,\n            SimpleSnackBar, MatSnackBarContainer, MatSnackBarLabel, MatSnackBarActions, MatSnackBarAction], exports: [MatCommonModule, MatSnackBarContainer, MatSnackBarLabel, MatSnackBarActions, MatSnackBarAction] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatSnackBarModule, providers: [MatSnackBar], imports: [OverlayModule,\n            PortalModule,\n            MatButtonModule,\n            MatCommonModule,\n            SimpleSnackBar, MatSnackBarContainer, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatSnackBarModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        OverlayModule,\n                        PortalModule,\n                        MatButtonModule,\n                        MatCommonModule,\n                        SimpleSnackBar,\n                        ...DIRECTIVES,\n                    ],\n                    exports: [MatCommonModule, ...DIRECTIVES],\n                    providers: [MatSnackBar],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SNACK_BAR_DATA, MAT_SNACK_BAR_DEFAULT_OPTIONS, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MatSnackBar, MatSnackBarAction, MatSnackBarActions, MatSnackBarConfig, MatSnackBarContainer, MatSnackBarLabel, MatSnackBarModule, MatSnackBarRef, SimpleSnackBar, matSnackBarAnimations };\n"],"names":["i1","normalizePassiveListenerOptions","i0","Injectable","EventEmitter","Directive","Output","booleanAttribute","Optional","Inject","Input","NgModule","coerceElement","coerceNumberProperty","EMPTY","Subject","fromEvent","auditTime","takeUntil","DOCUMENT","listenerOptions","passive","AutofillMonitor","constructor","_platform","_ngZone","_monitoredElements","Map","monitor","elementOrRef","isBrowser","element","info","get","subject","result","cssClass","listener","event","animationName","classList","contains","add","run","next","target","isAutofilled","remove","runOutsideAngular","addEventListener","set","unlisten","removeEventListener","stopMonitoring","complete","delete","ngOnDestroy","forEach","_info","_","ɵfac","AutofillMonitor_Factory","t","ɵɵinject","Platform","NgZone","_2","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","ngDevMode","ɵsetClassMetadata","type","args","CdkAutofill","_elementRef","_autofillMonitor","cdkAutofill","ngOnInit","subscribe","emit","CdkAutofill_Factory","ɵɵdirectiveInject","ElementRef","ɵdir","ɵɵdefineDirective","selectors","outputs","selector","CdkTextareaAutosize","minRows","_minRows","value","_setMinHeight","maxRows","_maxRows","_setMaxHeight","enabled","_enabled","resizeToFitContent","reset","placeholder","_textareaElement","_cachedPlaceholderHeight","undefined","setAttribute","removeAttribute","_cacheTextareaPlaceholderHeight","document","_destroyed","_previousMinRows","_isViewInited","_handleFocusEvent","_hasFocus","_document","nativeElement","minHeight","_cachedLineHeight","style","maxHeight","ngAfterViewInit","_initialHeight","height","window","_getWindow","pipe","_cacheTextareaLineHeight","textareaClone","cloneNode","rows","position","visibility","border","padding","overflow","parentNode","appendChild","clientHeight","_measureScrollHeight","previousMargin","marginBottom","isFirefox","FIREFOX","needsMarginFiller","measuringClass","scrollHeight","ngDoCheck","force","textarea","_previousValue","Math","max","requestAnimationFrame","_scrollToCaretPosition","setTimeout","_noopInputHandler","_getDocument","doc","defaultView","selectionStart","selectionEnd","isStopped","setSelectionRange","CdkTextareaAutosize_Factory","hostAttrs","hostBindings","CdkTextareaAutosize_HostBindings","rf","ctx","ɵɵlistener","CdkTextareaAutosize_input_HostBindingHandler","inputs","exportAs","features","ɵɵInputTransformsFeature","host","decorators","alias","transform","TextFieldModule","TextFieldModule_Factory","ɵmod","ɵɵdefineNgModule","_3","ɵinj","ɵɵdefineInjector","declarations","exports","coerceBooleanProperty","getSupportedInputTypes","i4","InjectionToken","Self","i2","Validators","i3","mixinErrorState","MatCommonModule","i5","MAT_FORM_FIELD","MatFormFieldControl","MatFormFieldModule","getMatInputUnsupportedTypeError","Error","MAT_INPUT_VALUE_ACCESSOR","MAT_INPUT_INVALID_TYPES","nextUniqueId","_MatInputBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","stateChanges","MatInput","disabled","_disabled","focused","id","_id","_uid","required","_required","control","hasValidator","_type","_validateType","_isTextarea","has","_inputValueAccessor","readonly","_readonly","inputValueAccessor","ngZone","_formField","controlType","autofilled","_neverEmptyInputTypes","filter","_iOSKeyupListener","el","nodeName","toLowerCase","_previousNativeValue","IOS","_isServer","_isNativeSelect","_isInFormField","multiple","ngOnChanges","updateErrorState","_dirtyCheckNativeValue","_dirtyCheckPlaceholder","focus","options","_focusChanged","isFocused","_onInput","newValue","_getPlaceholder","_previousPlaceholder","indexOf","_isNeverEmpty","_isBadInput","validity","badInput","empty","shouldLabelFloat","selectElement","firstOption","selectedIndex","label","setDescribedByIds","ids","length","join","onContainerClick","_isInlineSelect","size","MatInput_Factory","NgControl","NgForm","FormGroupDirective","ErrorStateMatcher","hostVars","MatInput_HostBindings","MatInput_focus_HostBindingHandler","MatInput_blur_HostBindingHandler","MatInput_input_HostBindingHandler","ɵɵhostProperty","ɵɵattribute","name","errorState","ɵɵclassProp","errorStateMatcher","userAriaDescribedBy","ɵɵProvidersFeature","provide","useExisting","ɵɵInheritDefinitionFeature","ɵɵNgOnChangesFeature","providers","MatFormField","MatInputModule","MatInputModule_Factory","imports","Component","ViewEncapsulation","ChangeDetectionStrategy","inject","ViewChild","Injector","TemplateRef","SkipSelf","CommonModule","MatButtonModule","trigger","state","transition","animate","BasePortalOutlet","CdkPortalOutlet","PortalModule","ComponentPortal","TemplatePortal","i2$1","i3$1","Breakpoints","i1$1","OverlayConfig","OverlayModule","SimpleSnackBar_Conditional_2_Template","_r2","ɵɵgetCurrentView","ɵɵelementStart","SimpleSnackBar_Conditional_2_Template_button_click_1_listener","ɵɵrestoreView","ctx_r1","ɵɵnextContext","ɵɵresetView","action","ɵɵtext","ɵɵelementEnd","ctx_r0","ɵɵadvance","ɵɵtextInterpolate1","data","_c0","MatSnackBarContainer_ng_template_4_Template","MAX_TIMEOUT","pow","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","_onExit","_finishDismiss","dismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","min","_open","dispose","dismissedByAction","afterDismissed","afterOpened","_onEnter","onAction","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","MatSnackBarLabel","MatSnackBarLabel_Factory","standalone","MatSnackBarActions","MatSnackBarActions_Factory","MatSnackBarAction","MatSnackBarAction_Factory","SimpleSnackBar","snackBarRef","hasAction","SimpleSnackBar_Factory","ɵcmp","ɵɵdefineComponent","ɵɵStandaloneFeature","decls","vars","consts","template","SimpleSnackBar_Template","ɵɵtemplate","message","ɵɵconditional","dependencies","MatButton","styles","encapsulation","changeDetection","None","OnPush","matSnackBarAnimations","snackBarState","opacity","uniqueId","MatSnackBarContainer","_changeDetectorRef","snackBarConfig","_trackedModals","Set","_announceDelay","_onAnnounce","_animationState","_liveElementId","attachDomPortal","portal","_assertNotAttached","_portalOutlet","_afterPortalAttached","_live","_role","attachComponentPortal","attachTemplatePortal","onAnimationEnd","fromState","toState","_completeExit","onEnter","enter","detectChanges","_screenReaderAnnounce","_announceTimeoutId","_clearFromModals","queueMicrotask","panelClasses","panelClass","Array","isArray","_exposeToModals","_label","labelClass","toggle","querySelector","modals","querySelectorAll","i","modal","ariaOwns","getAttribute","replace","trim","clear","hasAttached","inertElement","liveElement","focusedElement","activeElement","HTMLElement","MatSnackBarContainer_Factory","ChangeDetectorRef","viewQuery","MatSnackBarContainer_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","MatSnackBarContainer_HostBindings","ɵɵsyntheticHostListener","MatSnackBarContainer_animation_state_done_HostBindingHandler","$event","ɵɵsyntheticHostProperty","MatSnackBarContainer_Template","ɵɵelement","animation","Default","animations","static","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MAT_SNACK_BAR_DEFAULT_OPTIONS","MatSnackBar","_openedSnackBarRef","parent","_parentSnackBar","_snackBarRefAtThisLevel","_overlay","_injector","_breakpointObserver","_defaultConfig","simpleSnackBarComponent","snackBarContainerComponent","handsetCssClass","openFromComponent","component","config","_attach","openFromTemplate","open","_config","_attachSnackBarContainer","overlayRef","userInjector","viewContainerRef","injector","create","useValue","containerPortal","containerRef","attach","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","HandsetPortrait","detachments","overlayElement","matches","announce","_animateSnackBar","overlayConfig","direction","positionStrategy","global","isRtl","isLeft","isRight","left","right","centerHorizontally","top","bottom","MatSnackBar_Factory","Overlay","LiveAnnouncer","BreakpointObserver","DIRECTIVES","MatSnackBarModule","MatSnackBarModule_Factory"],"sourceRoot":"webpack:///","x_google_ignoreList":[0,1,2]}